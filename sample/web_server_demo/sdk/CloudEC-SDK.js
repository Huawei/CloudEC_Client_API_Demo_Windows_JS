/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 144);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(3);
var core = __webpack_require__(29);
var hide = __webpack_require__(17);
var redefine = __webpack_require__(18);
var ctx = __webpack_require__(25);
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
  var key, own, out, exp;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // extend global
    if (target) redefine(target, key, out, type & $export.U);
    // export
    if (exports[key] != out) hide(exports, key, exp);
    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
  }
};
global.core = core;
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Logger = (function () {
        function Logger() {
        }
        Logger.getCurrentTime = function () {
            var date = new Date();
            var separator1 = "-";
            var separator2 = ":";
            var month = date.getMonth() + 1;
            var strDate = date.getDate();
            var currentDate;
            if (month >= 1 && month <= 9) {
                month = "0" + month;
            }
            if (strDate >= 1 && strDate <= 9) {
                strDate = "0" + strDate;
            }
            currentDate = date.getFullYear() + separator1 + month + separator1 + strDate + " " + date.getHours() + separator2 + date.getMinutes() + separator2 + date.getSeconds();
            return "[" + currentDate + "]";
        };
        Logger.error = function (moduleName, args) {
            console.error(this.getCurrentTime() + "[" + moduleName + "]" + "[error]", args);
        };
        Logger.warn = function (moduleName, args) {
            console.warn(this.getCurrentTime() + "[" + moduleName + "]" + "[warn]", args);
        };
        Logger.info = function (moduleName, args) {
            console.info(this.getCurrentTime() + "[" + moduleName + "]" + "[info]", args);
        };
        Logger.debug = function (moduleName, args) {
            console.debug(this.getCurrentTime() + "[" + moduleName + "]" + "[debug]", args);
        };
        Logger.Instance = new Logger();
        return Logger;
    }());
    exports.default = Logger;
    exports.isInteger = function (obj) {
        return typeof obj === 'number' && obj % 1 === 0;
    };
    exports.isNumber = function (obj) {
        return typeof obj === 'number';
    };
    exports.isIntegerRange = function (obj, start, end) {
        if (!obj) {
            return true;
        }
        return exports.isInteger(obj) && obj >= start && obj <= end;
    };
    exports.formatDateYYYYMMDDHHMM = function (time, separator) {
        if (separator === void 0) { separator = "/"; }
        var date = new Date(time * 1.0);
        var year = date.getFullYear();
        var month = exports.formatNum(date.getMonth() + 1);
        var day = exports.formatNum(date.getDate());
        var hour = exports.formatNum(date.getHours());
        var minute = exports.formatNum(date.getMinutes());
        return {
            date: year + separator + month + separator + day,
            time: hour + ":" + minute
        };
    };
    exports.formatDate = function (time) {
        var date = new Date(parseInt(time) * 1000);
        var year = date.getFullYear();
        var month = exports.formatNum(date.getMonth() + 1);
        var day = exports.formatNum(date.getDate());
        var hour = exports.formatNum(date.getHours());
        var minute = exports.formatNum(date.getMinutes());
        return year + '-' + month + '-' + day + ' ' + hour + ':' + minute;
    };
    exports.isString = function (param) {
        if (typeof param === 'string') {
            return true;
        }
        else {
            return false;
        }
    };
    exports.isValidAttendeeParam = function (param) {
        if (exports.isUndefined(param)) {
            return false;
        }
        if ((!exports.isUndefined(param.autoInvite) && !exports.isBinaryNumber(param.autoInvite)) ||
            (!exports.isUndefined(param.role) && !exports.isBinaryNumber(param.role))) {
            return false;
        }
        if ((!exports.isUndefined(param.email) && !exports.isString(param.email)) ||
            (!exports.isUndefined(param.name) && !exports.isString(param.name)) ||
            (!exports.isUndefined(param.smsPhone) && !exports.isString(param.smsPhone)) ||
            (!exports.isUndefined(param.number) && !exports.isString(param.number))) {
            return false;
        }
        return true;
    };
    exports.isBinaryNumber = function (param) {
        return (typeof param === 'number' && (param === 0 || param === 1));
    };
    exports.isUndefined = function (param) {
        return param == undefined || param == null || param == NaN;
    };
    exports.isNull = function (param) {
        return param === "";
    };
    exports.isArray = function (param) {
        return (param instanceof Array);
    };
    exports.isBoolean = function (param) {
        return (typeof param === 'boolean');
    };
    exports.isFunction = function (param) {
        return (typeof param === 'function');
    };
    exports.UTCTimeStr = function (time) {
        var year = time.getUTCFullYear();
        var month = time.getUTCMonth();
        var date = time.getUTCDate();
        var hour = time.getUTCHours();
        var minute = time.getUTCMinutes();
        var utcTime = year + "-" + month + "-" + date + " " + hour + ":" + minute;
        return utcTime;
    };
    exports.formatNum = function (num, pow) {
        if (pow === void 0) { pow = 2; }
        var temp = Math.pow(10, pow);
        var tempStr = num + temp + "";
        return tempStr.substring(1);
    };
    exports.getErrResult = function (cmdId, errId, desc) {
        var err = exports.getErrCode(cmdId, errId);
        var errInfo = { cmdId: err.cmdId, errorCode: err.errorCode, errorInfo: desc };
        var retInfo = { result: false, info: errInfo };
        return retInfo;
    };
    exports.getErrCode = function (cmd_id, err_id) {
        var offset_login = 100000000;
        var offset_call = 200000000;
        var offset_conf = 300000000;
        var offset_data = 400000000;
        var offset_im = 500000000;
        var offset_eaddr = 600000000;
        if (0x10000 < cmd_id && cmd_id < 0x20000) {
            return { cmdId: cmd_id, errorCode: err_id + offset_call };
        }
        else if ((0x50000) < cmd_id && cmd_id < 0x60000) {
            return { cmdId: cmd_id, errorCode: err_id + offset_login };
        }
        else if ((0x70000) < cmd_id && cmd_id < 0x80000) {
            return { cmdId: cmd_id, errorCode: err_id + offset_conf };
        }
        else if (40000000 < cmd_id && cmd_id < 50000000) {
            return { cmdId: cmd_id, errorCode: err_id + offset_data };
        }
        else if (0x20000 < cmd_id && cmd_id < 0x30000) {
            return { cmdId: cmd_id, errorCode: err_id + offset_im };
        }
        else if (0x30000 < cmd_id && cmd_id < 0x40000) {
            return { cmdId: cmd_id, errorCode: err_id + offset_eaddr };
        }
        else {
            console.error("it is out of the offset range");
            return { cmdId: cmd_id, errorCode: err_id };
        }
    };
    function replaceAll(s1, s2, s3) {
        var reg = new RegExp(s2, "gm");
        return s1.replace(reg, s3);
    }
    exports.hidePhone = function (phone) {
        var phoneS;
        if (phone.length >= 8) {
            phoneS = replaceAll(phone, "(.\\d{2})\\d{1,4}(\\d{4})", "$1****$2");
        }
        else {
            phoneS = replaceAll(phone, "(.\\d{1})\\d{0,4}(\\d{1})", "$1****$2");
        }
        return phoneS;
    };
    exports.hideName = function (name) {
        var reg = /(.{2}).+/g;
        var nameS;
        if (name.length >= 2) {
            nameS = name.replace(reg, "$1****");
        }
        else {
            nameS = name.replace(name, "******");
        }
        return nameS;
    };
    exports.hideEmail = function (email) {
        var reg = /(.{0,1}).+(.{1}@.+)/g;
        var emailS = email.replace(reg, "$1****$2");
        return emailS;
    };
    exports.hidePassword = function (password) {
        var passwordS = password.replace(password, "******");
        return passwordS;
    };
    exports.hideIPAddress = function (IPAddress) {
        var pattern = /(\d+\.\d+\.\d+\.)\d+/;
        var IPAddressS = IPAddress.replace(pattern, '$1\*');
        return IPAddressS;
    };
    var emailArr = ["email", "real_user_account", "sip_account", "sip_impi", "account", "old_account"];
    var nameArr = ["user_name", "ucaccount", "subject", "conf_subject", "conf_name", "short_conf_name", "short_user_name", "origin", "target", "name", "createor",
        "domain_ip", "display_name", "display_name_tel", "history_num", "number", "group_name", "owner", "manifesto", "tel_number", "user_number",
        "fwd_from_name", "scheduser_name", "condition", "acount_id", "fromUserName", "nFromUserid", "dept_name_cn", "dept_name_en",
        "init_invite_account", "desc", "signature", "birthday", "sender"];
    var passwordArr = ["auth_token", "left_days_of_pwd", "sip_password", "password", "tms_password", "tms_pwd", "ack", "token", "content", "acTmpToken", "conf_key", "data_random", "website",
        "address", "q_pin_yin", "chairman_pwd", "general_pwd", "data_random", "host_key", "crypt_key", "part_secure_conf_num", "head-id", "image_id", "conf_pwd", "participant_id",
        "proxyAccount", "proxyPassword", "session_id", "tms_account", "tms_pwd", "admin_account", "member_account", "lpMsg"];
    var phoneArr = ["sip_impi", "tel_number", "tel_num", "tel_num_tel", "espacenumber", "homephone", "home_phone", "mobile", "sip_short_num", "shortnum", "user_uri", "user_alt_uri",
        "call_forward_onbusy_num", "call_forward_uncondition_num", "call_foward_noreply_num", "call_foward_offline_num", "fwd_from_num", "scheduser_number", "bind_no"];
    var IPAddressArr = ["local_ip", "local_ipv4", "local_addr", "last_login_ip"];
    var PersonalInfArr = ["entry", "contact_list", "im_group_list", "user_group_list", "user_list", "at_user_list", "service_Param"];
    function replacer(key, value) {
        if (emailArr.indexOf(key) != -1 && !exports.isNull(value) && exports.isString(value)) {
            var email = exports.hideEmail(value);
            return email;
        }
        if (nameArr.indexOf(key) != -1 && !exports.isNull(value) && exports.isString(value)) {
            var name_1 = exports.hideName(value);
            return name_1;
        }
        if (passwordArr.indexOf(key) != -1 && !exports.isNull(value) && (exports.isString(value) || exports.isNumber(value))) {
            var valueStr = value + "";
            var password = exports.hidePassword(valueStr);
            valueStr = "";
            return password;
        }
        if (phoneArr.indexOf(key) != -1 && !exports.isNull(value) && exports.isString(value)) {
            var phone = exports.hidePhone(value);
            return phone;
        }
        if (IPAddressArr.indexOf(key) != -1 && !exports.isNull(value) && exports.isString(value)) {
            var ipAddress = exports.hideIPAddress(value);
            return ipAddress;
        }
        if (PersonalInfArr.indexOf(key) != -1 && !exports.isNull(value)) {
            return "******";
        }
        return value;
    }
    exports.replaceLogInfo = function (dataInfo) {
        var dataInfoEncryption = JSON.stringify(dataInfo, replacer, "   ");
        return dataInfoEncryption;
    };
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(5);
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};


/***/ }),
/* 3 */
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};


/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

var store = __webpack_require__(59)('wks');
var uid = __webpack_require__(41);
var Symbol = __webpack_require__(3).Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(4)(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(2);
var IE8_DOM_DEFINE = __webpack_require__(100);
var toPrimitive = __webpack_require__(30);
var dP = Object.defineProperty;

exports.f = __webpack_require__(7) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.15 ToLength
var toInteger = __webpack_require__(32);
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.13 ToObject(argument)
var defined = __webpack_require__(31);
module.exports = function (it) {
  return Object(defined(it));
};


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LOGIN_AUTH_TYPE = {
        ACCOUNT_AUTH: 0,
        TOKEN_AUTH: 1,
        CONF_PASSCODE_AUTH: 2
    };
    exports.FIREWALL_MODE = {
        LOGIN_E_FIREWALL_MODE_ONLY_HTTP: 0,
        LOGIN_E_FIREWALL_MODE_HTTP_AND_SVN: 1,
        LOGIN_E_FIREWALL_MODE_NULL: 2
    };
    exports.CALL_FIREWALL_MODE = {
        CALL_E_FIREWALL_MODE_LINE: 0,
        CALL_E_FIREWALL_MODE_STG: 1,
        CALL_E_FIREWALL_MODE_INNERSVN: 2,
        CALL_E_FIREWALL_MODE_BUTT: 3
    };
    exports.IM_FIREWALL_MODE = {
        IM_E_NET_ACCESS_MODE_NORMAL: 0,
        IM_E_NET_ACCESS_MODE_STG: 1,
    };
    exports.CONF_MEDIATYPE = {
        CONF_MEDIATYPE_FLAG_VOICE: 1,
        CONF_MEDIATYPE_FLAG_VIDEO: 2,
        CONF_MEDIATYPE_FLAG_HDVIDEO: 4,
        CONF_MEDIATYPE_FLAG_TELEPRESENCE: 8,
        CONF_MEDIATYPE_FLAG_DATA: 16,
        CONF_MEDIATYPE_FLAG_DESKTOPSHARING: 32
    };
    exports.ONLINE_STATUS = {
        OFFLINE: 0,
        ONLINE: 1,
        HIDDEN: 2,
        BUSY: 3,
        LEAVE: 4,
        DO_NOT_DISTURB: 5,
        MOBILE_ONLINE: 6,
    };
    exports.CHAT_TYPE = {
        SINGLE_CHAT: 0,
        SINGLE_CHAT_TEMPORARY: 1,
        GROUP_CHAT: 2,
        GROUP_CHAT_TEMPORARY: 3,
        SERVICE_ONLINE: 4,
        REMINDER: 5,
        DISCUSSION_GROUP: 6,
        FILE_TRANSFER_NOTIFICATION: 7,
        SYSTEM_NOTIFICATION: 10,
        SYSTEM_ADVERTISING: 11,
        FUSION_MEETING_NOTIFICATION: 14,
        IM_NOTIFICATION_MESSAGE: 20,
        AUTO_REPLY: 101,
    };
    exports.OWNER_TYPE = {
        MINE: "mine",
        OTHERS: "others"
    };
    exports.IM_TYPE = {
        SINGLE: 0,
        GROUP: 1,
        SHORT_MESSAGE: 2,
        SYSTEM_ANNOUNCEMENT: 3,
        OTHER: 4,
    };
    exports.SOURCE_FLAG = {
        IM: 0,
        MEETING: 1,
    };
    exports.CONTENT_TYPE = {
        TEXT: 0,
        RICH_TEXT: 1,
    };
    exports.MEDIA_TYPE = {
        TEXT: 0,
        AUDIO: 1,
        VIDEO: 2,
        PHOTO: 3,
        FILE: 4,
        PUBLIC_NUMBER: 5,
        SCREEN_SHOT: 6,
        CARD: 7,
        PHOTO_TEXT: 8,
        GROUP_SPACE_FILE: 10,
        QUOTE: 11,
        CALL_AUDIO: 100,
        CALL_VIDEO: 101,
        MOBILE_AUDIO: 200,
        MOBILE_VIDEO: 201,
    };
    exports.CALL_STATUS = {
        CALLED: 'called',
        CALLING: 'calling',
        NO_CALL: 'no_call',
        ANSWERED: 'answered',
        ANSWERING: 'answering',
        NO_ANSWER: 'no_answer',
    };
    exports.INPUT_TYPE = {
        INPUTTING: 0,
        STOP: 1,
    };
    exports.SEND_STATUS = {
        success: 1,
        error: 0,
    };
    exports.QUERY_OPERATION_TYPE = {
        NORMAL: 0,
        FIRST: 1,
    };
    exports.IS_ENCRYPT = {
        YES: 1,
        NO: 0,
    };
    exports.SEARCH_STATUS = {
        none: 0,
        searching: 1,
        searchover: 2,
    };
    exports.USER_INFO = {
        CALL_NUM_LIST: ['bind_no', 'home_phone', 'ip_phone', 'mobile', 'office_phone', 'other_phone', 'short_phone', 'account'],
        USER_SHOW_INFO: ['account', 'native_name', 'dept_name_cn']
    };
    exports.KEYPAD_CONST = {
        DIAL_NUM_LIST: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "*", "0+", "#"],
        KEY_AUDIO_SRC: '../resources/audio/key/',
        KEY_AUDIO_LIST: ['0.wav', '1.wav', '2.wav', '3.wav', '4.wav', '5.wav', '6.wav', '7.wav', '8.wav', '9.wav', '10.wav', '11.wav'],
        MAX_DIAL_NUM_LEN: 128,
        DISTANCE: 200,
        LOAD_LENGTH: 50,
        ON_HOLD_TIME_STAMP: 400,
        BTN_HIGH_LIGHT_TIME: 150
    };
    exports.isMobile = false;
    exports.CALL_CONST = {
        PROMPT_CALL_FAILED: 'CALL_CALLING_FAILED',
        PROMPT_PREVENT_TWO_CALLS: 'PREVENT_TWO_CALLS',
        PREVENT_TWO_OUTGOING_CALL: 'PREVENT_TWO_OUTGOING_CALL',
        CALL_HOLD_FAILED: 'CALL_HOLD_FAILED',
        CALL_UNHOLD_FAILED: 'CALL_UNHOLD_FAILED',
        PROMPT_SIP_NOT_REG: 'CALL_SIP_NOT_REG',
        MAX_CALL_LENGTH: 2,
        MAX_VIDEO_CALL_LENGTH: 1,
        DTMF_MAX_VALUE: 11,
        DTMF_NUM_LIST: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "*", "0", "#"],
        TIME_RE_REGISTER: 2000,
        VOLUME_MAX: 100,
        VOLUME_DEFAULT: 50,
        NOTIFY_WIDTH: 310,
        NOTIFY_HEIGHT: 191,
        BOTTOM_MAX: 90,
        VIBRATE_DISTANCE: 1000,
        VIBRATE_CYCLE: 2000,
        VOLUME_CIRCLE_SIZE: 12
    };
    exports.MEDIA_STATUS = {
        NORMAL: -1,
        SEND: 7,
        SENDING: 0,
        SEND_SUCCESS: 1,
        SEND_ERROR: 2,
        RECEIVE: 3,
        RECEIVING: 4,
        RECEIVE_SUCCESS: 5,
        RECEIVE_ERROR: 6,
        ERROR: -100,
    };
    exports.NOTIFICATION_MESSAGE_TYPE = {
        MESSIONED: 0,
        NOTIFICATION: 1,
        REFERENCE: 2
    };
    exports.P2P_FILE_START_RESULT = {
        Success: 0,
        ModeDetectSuccess: 1,
        TimeOut: -100,
        TargetOffline: -104,
        PeerReject: -112,
        NoFileToSend: -116,
        SendError: -120,
        AcceptError: -121,
        OpenFileError: -122,
        Canceled: -124,
        FileBusy: -125,
        FileIsEmpty: -128,
        FileModeMismatch: -132,
        RegionalIsolation: -136
    };
    exports.P2P_FILE_STOP_REASON = {
        Normal: 0,
        TimeOut: 1,
        SendError: 2,
        AcceptError: 3,
        Completed: 4,
        Abnormal: 5,
        SendOfflineFile: 6,
        Unknow: -1
    };
    exports.ERROR_CODE = {
        Timeout: -100,
        Error: -1,
        Success: 0,
        OprMsgTimeout: 38,
        Failure: 1001,
        DBError: 1002,
        ParamError: 1003,
        DecodeError: 1004,
        NotExist: 1005,
        Exist: 1006,
        GroupFilePermDenied: 1007,
        GroupFileSpaceMax: 1008,
        GroupFileSingleFileSizeMax: 1009,
        IMGroupReachMaxNumber: 2001,
        IMGroupFull: 2002,
        DiscussionGroupReachMaxNumber: 2003,
        FixedDiscussionGroupReachMaxNumber: 2004
    };
    exports.GROUP_TYPE = {
        FIXED_GROUP: 0,
        DISCUSS_GROUP: 1
    };
    exports.FILE_DEAL_TYPE = {
        DOWNLOAD: 0,
        UPLOAD: 1,
        SEND: 2,
        RECEIVE: 3,
        RE_RECEIVE: 4,
        RE_DOWNLOAD: 5
    };
    exports.GROUP_TAB_LIST = {
        setting: 0,
        member: 1,
        files: 2,
        album: 3
    };
    exports.CONTACT_TAB_LIST = {
        information: 0,
        number: 1,
    };
    exports.FILE_STATUS = {
        upload: "upload",
        download: "download",
        failed: "fail",
    };
    exports.PX_TO_SIZE = {
        "10px": 8,
        "13px": 10,
        "15px": 12,
        "18px": 14,
        "20px": 16,
        "23px": 18,
        "26px": 20,
        "28px": 22
    };
    exports.PX_TO_SIZES = {
        "8px": 8,
        "10px": 10,
        "12px": 12,
        "14px": 14,
        "16px": 16,
        "18px": 18,
        "20px": 20,
        "22px": 22
    };
    exports.SIZE_TO_PX = {
        8: "10px",
        10: "13px",
        12: "15px",
        14: "18px",
        16: "20px",
        18: "23px",
        20: "26px",
        22: "28px",
    };
    exports.SIZE_TO_PXS = {
        8: "8px",
        10: "10px",
        12: "12px",
        14: "14px",
        16: "16px",
        18: "18px",
        20: "20px",
        22: "22px",
    };
    exports.RIGHT_MENU_TYPE = {
        SEARCH_LIST: 0,
        RECENT_LIST: 1,
        CONTACT_GROUP: 2,
        CONTACT_LIST: 3,
        GROUP_LIST: 5,
        CONVERSATION: 6,
        EDITOR: 7,
        CONF_MEMBERLIST: 8,
        GROUP_MEMBER: 9,
    };
    exports.EXIT_OR_DISSOLUTION_GROUP = {
        EXIT_GROUP: 0,
        DISSOLUTION_GROUP: 1
    };
    exports.HIDE_OR_SHOW_WINDOW = {
        HIDE_WINDOW: 0,
        SHOW_WINDOW: 1
    };
    exports.DEAL_ERROR = "dealWasError";
    exports.builtPlacements = {
        left: {
            points: ['cr', 'cl'],
        },
        right: {
            points: ['cl', 'cr'],
        },
        top: {
            points: ['bc', 'tc'],
        },
        bottom: {
            points: ['tc', 'bc'],
        },
        topLeft: {
            points: ['bl', 'tl'],
        },
        topRight: {
            points: ['br', 'tr'],
        },
        bottomRight: {
            points: ['tr', 'br'],
        },
        bottomLeft: {
            points: ['tl', 'bl'],
        },
        center: {
            points: ['cc', 'cc'],
        },
    };
    exports.EDITOR_TOOL_BAR = {
        FONT: 'font',
        EMOJI: 'emoji',
        ACCESSORY: 'accessory',
        SCREEN_SHOT: 'screen-shot',
        PULL_DOWN: 'pull-down',
        CARD: 'card',
        FAVOUR: 'favour',
        HISTORY: 'history'
    };
    exports.EMOJI_TYPE = {
        SYSTEM: 'system',
        COLLECTION: 'collection',
    };
    exports.CONF_AUDIO_STATE = {
        CONF_AUDIO_INVITING: 1,
        CONF_AUDIO_INCONF: 5,
        CONF_AUDIO_QUIT: 6,
    };
    exports.SIP_REGISTER_STATE = {
        SIP_REGISTER_UNREGISTER: 0,
        SIP_REGISTER_REGISTERING: 1,
        SIP_REGISTER_DEREGISTERING: 2,
        SIP_REGISTER_REGISTERED: 3
    };
    exports.IS_DOWNLOADED = {
        YES: 1,
        NO: 0,
    };
    exports.IS_UPLOADED = {
        YES: 1,
        NO: 0,
    };
    exports.IS_DELETE = {
        YES: 1,
        NO: 0,
    };
    exports.IS_QUOTE = {
        YES: 1,
        NO: 0,
    };
    exports.IS_RECEIVED = {
        YES: 1,
        NO: 0,
    };
    exports.IS_SENT = {
        YES: 1,
        NO: 0,
    };
    exports.GROUP_JOIN_FLAG = {
        AUTO_JOIN: 0,
        APPLY_JOIN: 1,
    };
    exports.SLIDER_DETAIL_TYPE = {
        contact: "Contact",
        group: "Group"
    };
    exports.CONTACT_SELECT_DIALOG_TYPE = {
        CONTACT_SELECT_DIALOG_DISCUSSGROUP: 1,
        CONTACT_SELECT_DIALOG_CONFADDMEMBER: 2,
        CONTACT_SELECT_DIALOG_RELAYMESSAGE: 3,
        CONTACT_SELECT_DIALOG_ADD_CONTACT: 4,
    };
    exports.SEARCH_MESSAGE_TYPE = {
        SEARCH_TEXT: 0,
        SEARCH_PICTURE: 1,
        SEARCH_FILE: 2,
        SEARCH_FILE_PICTURE: 3,
    };
    exports.SEARCH_MESSAGE_TYPE_VALUE = {
        PICTURE: 1,
        FILE: 2,
    };
    exports.MUTE_STATE = {
        MUTE_STATE_UNMUTE: 0,
        MUTE_STATE_MUTE: 1,
        MUTE_STATE_TOUNMUTE: 2,
        MUTE_STATE_TOMUTE: 3,
    };
    exports.CLOSE_WAYS = {
        CLOSE_APP: "close",
        MINIMIZE_APP: "minimizeApp"
    };
    exports.IS_REMINDER = {
        TRUE: "true",
        FALSE: "false",
    };
    exports.GROUP_NOTIFY_TYPE = {
        DISMISS_GROUP_NOTIFY: 0,
        LEAVE_GROUP_NOTIFY: 1,
        GROUP_MEMADD_NOTIFY: 2,
        GROUP_OWNERCHG_NOTIFY: 3,
        RECEIVE_JOIN_GROUP_NOTIFY: 4,
    };
    exports.FIRST_LOGIN_NOT_REMIND = {
        TRUE: "true",
        FALSE: "false"
    };
    exports.CONF_MSG_TYPE = {
        TYPE_IN_CONFERENCE: 0,
        TYPE_ENTER_CONFERENCE: 1,
        TYPE_LEAVE_CONFERENCE: 2,
    };
    exports.IOS_PHONE_VIDEO_CAMERA_PARAM = [
        { captureRotation: 3, localDisRotation: 3, collectMode: 1 },
        { captureRotation: 0, localDisRotation: 0, collectMode: 0 },
        { captureRotation: 2, localDisRotation: 2, collectMode: 0 },
        { captureRotation: 1, localDisRotation: 1, collectMode: 1 },
        { captureRotation: 3, localDisRotation: 3, collectMode: 1 },
        { captureRotation: 2, localDisRotation: 0, collectMode: 0 },
        { captureRotation: 0, localDisRotation: 2, collectMode: 0 },
        { captureRotation: 1, localDisRotation: 1, collectMode: 1 }
    ];
    exports.SERVER_PUBLIC_PATH = {
        EMOTION_PATH: 'file:///UC.InternalImg//emotion/',
        IMAGE_PATH: 'file:///UC.ExternalImg//temp/',
    };
    exports.KEY_CODE_ENTER = 13;
    exports.CLIENT_TYPE = {
        PC: 0,
        MOBILE: 1,
        WEB: 2
    };
    exports.CLIENT_DESC = {
        PC: "eSDK-Desktop",
        MOBILE: "eSDK-Mobile",
    };
    exports.RESUME_EVENT = {
        IP_CHANGE: "ipchange",
        AWAY_OFFLINE: "offline",
        BACK_ONLINE: "online",
        SESSION_TIMEOUT: "sessionTimeout",
        SUSPEND: "suspend"
    };
    exports.CLOUDEC_SDK_INFO = {
        version: "6.19.0.RC1",
        name: "eSDK EC",
        time: "2018.9.12"
    };
    exports.CLOUDEC_COMMON_RESULT = {
        SUCCESS: 0,
        FAILED: -1
    };
    var MediaDevice;
    (function (MediaDevice) {
        MediaDevice[MediaDevice["MICROPHONE"] = 0] = "MICROPHONE";
        MediaDevice[MediaDevice["SPEAKER"] = 1] = "SPEAKER";
        MediaDevice[MediaDevice["CAMERA"] = 2] = "CAMERA";
    })(MediaDevice = exports.MediaDevice || (exports.MediaDevice = {}));
    exports.CLOUDEC_CHANNEL_STATUS = {
        IDLE: 0,
        CONNECTED: 1,
        CLOSED: 2
    };
    exports.CLOUDEC_LOGIN_E_DEPLOY_MODE = {
        LOGIN_E_DEPLOY_ENTERPRISE_IPT: 0,
        LOGIN_E_DEPLOY_ENTERPRISE_CC: 1,
        LOGIN_E_DEPLOY_SPHOSTED_IPT: 2,
        LOGIN_E_DEPLOY_SPHOSTED_CC: 3,
        LOGIN_E_DEPLOY_SPHOSTED_CONF: 4,
        LOGIN_E_DEPLOY_IMSHOSTED_IPT: 5,
        LOGIN_E_DEPLOY_IMSHOSTED_CC: 6,
    };
    exports.CLOUDEC_IPT_TYPE = {
        ENABLE_CALL_WAIT: 3,
        DISABLE_CALL_WAIT: 4,
        ENABLE_DO_NOT_DISTURB: 1,
        DISABLE_DO_NOT_DISTURB: 2,
        ENABLE_UNCONDITION_FORWARD: 25,
        DISABLE_UNCONDITION_FORWARD: 26,
        ENABLE_NO_REPLY_FORWARD: 29,
        DISABLE_NO_REPLY_FORWARD: 30,
        ENABLE_BUSY_FORWARD: 27,
        DISABLE_BUSY_FORWARD: 28,
        ENABLE_OFFLINE_FORWARD: 31,
        DISABLE_OFFLINE_FORWARD: 32,
    };
    exports.IM_HISTORYMESSAGE_TYPE = {
        SINGLECHAT: 0,
        GROUPCHAT: 1,
        BULLETIN: 3,
    };
    exports.CLOUDEC_SDK_LOG_LEVEL = {
        LOG_ERROR: 0,
        LOG_WARNING: 1,
        LOG_INFO: 2,
        LOG_DEBUG: 3,
    };
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, util_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Dispatcher = (function () {
        function Dispatcher() {
        }
        Dispatcher.register = function (name, callback, context) {
            var observers = Dispatcher.listeners[name];
            if (!observers) {
                Dispatcher.listeners[name] = [];
            }
            Dispatcher.listeners[name].push(new Observer(callback, context));
        };
        Dispatcher.remove = function (name, callback, context) {
            var observers = Dispatcher.listeners[name];
            if (!observers)
                return;
            var length = observers.length;
            for (var i = 0; i < length; i++) {
                var observer = observers[i];
                if (observer.compar(context)) {
                    observers.splice(i, 1);
                    break;
                }
            }
            if (observers.length == 0) {
                delete Dispatcher.listeners[name];
            }
        };
        Dispatcher.removeAll = function () {
            for (var m in Dispatcher.listeners) {
                if (Dispatcher.listeners[m]) {
                    for (var i = 0; i < Dispatcher.listeners[m].length; ++i) {
                        Dispatcher.listeners[m].splice(i, 1);
                    }
                }
            }
        };
        Dispatcher.fire = function (name) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            return __awaiter(this, void 0, void 0, function () {
                var observers, length, i, observer;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            util_1.default.info("dispatcher", "fire a event=" + name);
                            observers = Dispatcher.listeners[name];
                            if (!observers)
                                return [2];
                            length = observers.length;
                            i = 0;
                            _a.label = 1;
                        case 1:
                            if (!(i < length)) return [3, 4];
                            observer = observers[i];
                            return [4, observer.notify.apply(observer, [name].concat(args))];
                        case 2:
                            _a.sent();
                            _a.label = 3;
                        case 3:
                            i++;
                            return [3, 1];
                        case 4: return [2];
                    }
                });
            });
        };
        Dispatcher.listeners = {};
        return Dispatcher;
    }());
    exports.default = Dispatcher;
    var Observer = (function () {
        function Observer(callback, context) {
            this.context = null;
            var self = this;
            self.callback = callback;
            self.context = context;
        }
        Observer.prototype.notify = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return __awaiter(this, void 0, void 0, function () {
                var self, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            self = this;
                            return [4, (_a = self.callback).call.apply(_a, [self.context].concat(args))];
                        case 1:
                            _b.sent();
                            return [2];
                    }
                });
            });
        };
        Observer.prototype.compar = function (context) {
            return context == this.context;
        };
        return Observer;
    }());
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.USER_EVENT_ID = {
        USER_LOGIN_RET_EVENT: "USER_LOGIN_RET_EVENT",
    };
    exports.SDK_EVENT_ID = {
        SDK_LOGIN_REQ: "SDK_LOGIN_REQ",
        SDK_LOGOUT_REQ: "SDK_LOGOUT_REQ",
        SDK_SET_PROXY_REQ: "SDK_SET_PROXY_REQ",
        SDK_SIP_DEREGISTER_ANONYCONF: "SDK_SIP_DEREGISTER_ANONYCONF",
        SDK_CONF_BOOK_RESVCONF: "SDK_CONF_BOOK_RESVCONF",
        SDK_CONF_JOIN_INSTCONF: "SDK_CONF_JOIN_INSTCONF",
        SDK_CONF_REFRESH_TOKEN: "SDK_CONF_REFRESH_TOKEN",
        SDK_CONF_GET_CONFLIST: "SDK_CONF_GET_CONFLIST",
        SDK_CONF_GET_CONFINFO: "SDK_CONF_GET_CONFINFO",
        SDK_CONF_ACCESS_RESVCONF: "SDK_CONF_ACCESS_RESVCONF",
        SDK_CONF_ACCEPT_CONF: "SDK_CONF_ACCEPT_CONF",
        SDK_CONF_REJECT_CONF: "SDK_CONF_REJECT_CONF",
        SDK_CONF_ADD_ATTENDEE: "SDK_CONF_ADD_ATTENDEE",
        SDK_CONF_DEL_ATTENDEE: "SDK_CONF_DEL_ATTENDEE",
        SDK_CONF_MUTE_CONF: "SDK_CONF_MUTE_CONF",
        SDK_CONF_MUTE_ATTENDEE: "SDK_CONF_MUTE_ATTENDEE",
        SDK_CONF_JOIN_ANONYCONF: "SDK_CONF_JOIN_ANONYCONF",
        SDK_CONF_AS_SET_OWNER: "SDK_CONF_AS_SET_OWNER",
        SDK_CONF_AS_SET_SHARE_TYPE: "SDK_CONF_AS_SET_SHARE_TYPE",
        SDK_CONF_AS_START: "SDK_CONF_AS_START",
        SDK_CONF_AS_STOP: "SDK_CONF_AS_STOP",
        SDK_CONF_WB_CREATE: "SDK_CONF_WB_CREATE",
        SDK_CONF_WB_DELETE: "SDK_CONF_WB_DELETE",
        SDK_CONF_WB_PAGE_CREATE: "SDK_CONF_WB_PAGE_CREATE",
        SDK_CONF_WB_PAGE_DELETE: "SDK_CONF_WB_PAGE_DELETE",
        SDK_CONF_WB_SET_CURR_PAGE: "SDK_CONF_WB_SET_CURR_PAGE",
        SDK_CONF_AT_CREATE_START: "SDK_CONF_AT_CREATE_START",
        SDK_CONF_AT_CUSTOMER_UPDATE: "SDK_CONF_AT_CUSTOMER_UPDATE",
        SDK_CONF_AT_DRAWING_UPDATE: "SDK_CONF_AT_DRAWING_UPDATE",
        SDK_CONF_AT_CREATE_DONE: "SDK_CONF_AT_CREATE_DONE",
        SDK_CONF_AT_SET_SELECT: "SDK_CONF_AT_SET_SELECT",
        SDK_CONF_AT_DELETE: "SDK_CONF_AT_DELETE",
        SDK_CONF_AT_EDIT_START: "SDK_CONF_AT_EDIT_START",
        SDK_CONF_AT_EDIT_UPDATE: "SDK_CONF_AT_EDIT_UPDATE",
        SDK_CONF_AT_EDIT_DONE: "SDK_CONF_AT_EDIT_DONE",
        SDK_CONF_AT_TEXT_CREATE: "SDK_CONF_AT_TEXTCREATE",
        SDK_CONF_AT_TEXT_UPDATE: "SDK_CONF_AT_TEXT_UPDATE",
        SDK_CONF_AT_TEXT_GETINFO: "SDK_CONF_AT_TEXT_GETINFO",
        SDK_CONF_AT_HITTEST: "SDK_CONF_AT_HITTEST",
        SDK_CONF_AT_HITTEST_RECT: "SDK_CONF_AT_HITTEST_RECT",
        SDK_CONF_AT_LASERPOINTER_START: "SDK_CONF_AT_LASERPOINTER_START",
        SDK_CONF_AT_LASERPOINTER_MOVETO: "SDK_CONF_AT_LASERPOINTER_MOVETO",
        SDK_CONF_AT_LASERPOINTER_STOP: "SDK_CONF_AT_LASERPOINTER_STOP",
        SDK_CONF_REQUEST_PRIVILEGE: "SDK_CONF_REQUEST_PRIVILEGE",
        SDK_CONF_SET_PRIVILEGE: "SDK_CONF_SET_PRIVILEGE",
        SDK_CONF_KEYBOARD_INPUT: "SDK_CONF_KEYBOARD_INPUT",
        SDK_CONF_REQUEST_CHAIRMAN: "SDK_CONF_REQUEST_CHAIRMAN",
        SDK_CONF_RELEASE_CHAIRMAN: "SDK_CONF_RELEASE_CHAIRMAN",
        SDK_CONF_HAND_UP: "SDK_CONF_HAND_UP",
        SDK_CONF_LEAVE_CONF: "SDK_CONF_LEAVE_CONF",
        SDK_CONF_END_CONF: "SDK_CONF_END_CONF",
        SDK_CONF_SET_CONFMODE: "SDK_CONF_SET_CONFMODE",
        SDK_CONF_SET_CONF_MIXED_PICTURE: "SDK_CONF_SET_CONF_MIXED_PICTURE",
        SDK_CONF_BROADCAST_ATTENDEE: "SDK_CONF_BROADCAST_ATTENDEE",
        SDK_CONF_WATCH_ATTENDEE: "SDK_CONF_WATCH_ATTENDEE",
        SDK_CONF_VIDEO_SWITCH: "SDK_CONF_VIDEO_SWITCH",
        SDK_CONF_MIC_SWITCH: "SDK_CONF_MIC_SWITCH",
        SDK_CONF_SEND_MSG: "SDK_CONF_SEND_MSG",
        SDK_CONF_ENABLE_RENDER: "SDK_CONF_ENABLE_RENDER",
        SDK_CONF_SET_DATA_RENDER: "SDK_CONF_SET_DATA_RENDER",
        SDK_CONF_SET_WB_DATA_RENDER: "SDK_CONF_SET_WB_DATA_RENDER",
        SDK_CONF_SET_CANVAS_SIZE: "SDK_CONF_SET_CANVAS_SIZE",
        SDK_CONF_SET_DROP_FRAME: "SDK_CONF_SET_DROP_FRAME",
        SDK_CONF_VIDEO_RECONNECT: "SDK_CONF_VIDEO_RECONNECT",
        SDK_CONF_GET_ATTENDEELIST: "SDK_CONF_GET_ATTENDEELIST",
        SDK_CONF_ADD_ATTENDEE_TB: "SDK_CONF_ADD_ATTENDEE_TB",
        SDK_CONF_DEL_ATTENDEE_TB: "SDK_CONF_DEL_ATTENDEE_TB",
        SDK_DATACONF_MEMBER_TB: "SDK_DATACONF_MEMBER_TB",
        SDK_DATACONF_MEMBER_TYPE_TB: "SDK_DATACONF_MEMBER_TYPE_TB",
        SDK_DATACONF_UPDATE_SHARING_SESSION_TB: "SDK_DATACONF_UPDATE_SHARING_SESSION_TB",
        SDK_DATACONF_CLEAR_ATTENDEE_TB: "SDK_DATACONF_CLEAR_ATTENDEE_TB",
        SDK_DATACONF_SELECT_ATTENDEE_TB: "SDK_DATACONF_SELECT_ATTENDEE_TB",
        SDK_DEVC_GET_MEDIA_DEVICE: "SDK_DEVC_GET_MEDIA_DEVICE",
        SDK_DEVC_SET_MEDIA_DEVICE: "SDK_DEVC_SET_MEDIA_DEVICE",
        SDK_DEVC_GET_VOICE: "SDK_DEVC_GET_VOICE",
        SDK_DEVC_SET_VOICE: "SDK_DEVC_SET_VOICE",
        SDK_CMPT_GET_CPU_USAGE: "SDK_CMPT_GET_CPU_USAGE",
        SDK_CMPT_GET_MEMORY_USAGE: "SDK_CMPT_GET_MEMORY_USAGE",
        SDK_EADDR_REFRESH_TOKEN: "SDK_EADDR_REFRESH_TOKEN",
        SDK_EADDR_SEARCH_USER: "SDK_EADDR_SEARCH_USER",
        SDK_EADDR_SEARCH_DEPT: "SDK_EADDR_SEARCH_DEPT",
        SDK_CALL_START_CALL: "SDK_CALL_START_CALL",
        SDK_CALL_ACCEPT_CALL: "SDK_CALL_ACCEPT_CALL",
        SDK_CALL_REJECT_CALL: "SDK_CALL_REJECT_CALL",
        SDK_CALL_HOLD_CALL: "SDK_CALL_HOLD_CALL",
        SDK_CALL_UNHOLD_CALL: "SDK_CALL_UNHOLD_CALL",
        SDK_CALL_SEND_DTMF: "SDK_CALL_SEND_DTMF",
        SDK_CALL_SET_VIDEO_RENDER: "SDK_CALL_SET_VIDEO_RENDER",
        SDK_CALL_SET_LOCAL_VIDEOWH: "SDK_CALL_SET_LOCAL_VIDEOWH",
        SDK_CALL_SET_REMOTE_VIDEOWH: "SDK_CALL_SET_REMOTE_VIDEOWH",
        SDK_CONF_P2P_TRANSFER_TO_CONF: "SDK_CONF_P2P_TRANSFER_TO_CONF",
        SDK_CALL_START_PLAY_MEDIA_FILE: "SDK_CALL_START_PLAY_MEDIA_FILE",
        SDK_CALL_STOP_PLAY_MEDIA_FILE: "SDK_CALL_STOP_PLAY_MEDIA_FILE",
        SDK_CALL_ADD_VIDEO: "SDK_CALL_ADD_VIDEO",
        SDK_CALL_DEL_VIDEO: "SDK_CALL_DEL_VIDEO",
        SDK_CALL_REPLY_ADD_VIDEO: "SDK_CALL_REPLY_ADD_VIDEO",
        SDK_CALL_NATIVEWND_INIT: "SDK_CALL_NATIVEWND_INIT",
        SDK_CALL_NATIVEWND_CREATE_WINDOW: "SDK_CALL_NATIVEWND_CREATE_WINDOW",
        SDK_CALL_NATIVEWND_DESTROY_WINDOW: "SDK_CALL_NATIVEWND_DESTROY_WINDOW",
        SDK_CALL_NATIVEWND_UNINIT: "SDK_CALL_NATIVEWND_UNINIT",
        SDK_CALL_SET_VIDEO_WINDOW: "SDK_CALL_SET_VIDEO_WINDOW",
        SDK_CALL_RESET_NATIVEWND_SIZE: "SDK_CALL_RESET_NATIVEWND_SIZE",
        SDK_CALL_SET_IPT_SERVICE: "SDK_CALL_SET_IPT_SERVICE",
        SDK_CALL_BLIND_TRANSFER: "SDK_CALL_BLIND_TRANSFER",
        SDK_IM_LOGOUT: "SDK_IM_LOGOUT",
        SDK_IM_GET_USER_INFO: "SDK_IM_GET_USER_INFO",
        SDK_IM_SET_USER_INFO: "SDK_IM_SET_USER_INFO",
        SDK_IM_GET_CONTACT_LIST: "SDK_IM_GET_CONTACT_LIST",
        SDK_IM_ADD_CONTACT_GROUP: "SDK_IM_ADD_CONTACT_GROUP",
        SDK_IM_MOD_CONTACT_GROUP: "SDK_IM_MOD_CONTACT_GROUP",
        SDK_IM_DEL_CONTACT_GROUP: "SDK_IM_DEL_CONTACT_GROUP",
        SDK_IM_UPDATE_GROUP_LIST_ORDER: "SDK_IM_UPDATE_GROUP_LIST_ORDER",
        SDK_IM_MOVE_CONTACT: "SDK_IM_MOVE_CONTACT",
        SDK_IM_ADD_CONTACT: "SDK_IM_ADD_CONTACT",
        SDK_IM_MOD_CONTACT: "SDK_IM_MOD_CONTACT",
        SDK_IM_DEL_CONTACT: "SDK_IM_DEL_CONTACT",
        SDK_IM_ADD_FRIEND: "SDK_IM_ADD_FRIEND",
        SDK_IM_ADD_FIXED_GROUP: "SDK_IM_ADD_FIXED_GROUP",
        SDK_IM_MOD_FIXED_GROUP: "SDK_IM_MOD_FIXED_GROUP",
        SDK_IM_DEL_FIXED_GROUP: "SDK_IM_DEL_FIXED_GROUP",
        SDK_IM_ADD_DISCUSSION_GROUP: "SDK_IM_ADD_DISCUSSION_GROUP",
        SDK_IM_MOD_DISCUSSION_GROUP: "SDK_IM_MOD_DISCUSSION_GROUP",
        SDK_IM_DEL_DISCUSSION_GROUP: "SDK_IM_DEL_DISCUSSION_GROUP",
        SDK_IM_SEARCH_GROUP: "SDK_IM_SEARCH_GROUP",
        SDK_IM_GET_GROUP_DETAIL: "SDK_IM_GET_GROUP_DETAIL",
        SDK_IM_ADD_FIXED_GROUP_MEMBER: "SDK_IM_ADD_FIXED_GROUP_MEMBER",
        SDK_IM_JOIN_FIXED_GROUP: "SDK_IM_JOIN_FIXED_GROUP",
        SDK_IM_ADD_DISCUSSION_GROUP_MEMBER: "SDK_IM_ADD_DISCUSSION_GROUP_MEMBER",
        SDK_IM_DEL_FIXED_GROUP_MEMBER: "SDK_IM_DEL_FIXED_GROUP_MEMBER",
        SDK_IM_LEAVE_FIXED_GROUP: "SDK_IM_LEAVE_FIXED_GROUP",
        SDK_IM_DEL_DISCUSSION_GROUP_MEMBER: "SDK_IM_DEL_DISCUSSION_GROUP_MEMBER",
        SDK_IM_LEAVE_DISCUSSION_GROUP: "SDK_IM_LEAVE_DISCUSSION_GROUP",
        SDK_IM_GET_GROUP_MEMBERS: "SDK_IM_GET_GROUP_MEMBERS",
        SDK_IM_CONFIRM_FIXED_GROUP_INVITE: "SDK_IM_CONFIRM_FIXED_GROUP_INVITE",
        SDK_IM_CONFIRM_FIXED_GROUP_APPLY: "SDK_IM_CONFIRM_FIXED_GROUP_APPLY",
        SDK_IM_TRANSFER_GROUP: "SDK_IM_TRANSFER_GROUP",
        SDK_IM_SET_GROUP_MSG_PROMPT_POLICY: "SDK_IM_SET_GROUP_MSG_PROMPT_POLICY",
        SDK_IM_SET_DISGROUP_POLICY: "SDK_IM_SET_DISGROUP_POLICY",
        SDK_IM_PUBLISH_STATUS: "SDK_IM_PUBLISH_STATUS",
        SDK_IM_DETECT_USER_STATUS: "SDK_IM_DETECT_USER_STATUS",
        SDK_IM_SEND_MESSAGE: "SDK_IM_SEND_MESSAGE",
        SDK_IM_NOTIFY_INPUTTING: "SDK_IM_NOTIFY_INPUTTING",
        SDK_IM_WITH_DRAW_MESSAGE: "SDK_IM_WITH_DRAW_MESSAGE",
        SDK_IM_SET_READ_MESSAGE: "SDK_IM_SET_READ_MESSAGE",
        SDK_IM_GET_RECENT_CONVERSATION: "SDK_IM_GET_RECENT_CONVERSATION",
        SDK_IM_DEL_RECENT_CONVERSATION: "SDK_IM_DEL_RECENT_CONVERSATION",
        SDK_IM_DEL_MESSAGE: "SDK_IM_DEL_MESSAGE",
        SDK_IM_QUERY_HISTORY_MESSAGE: "SDK_IM_QUERY_HISTORY_MESSAGE",
    };
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CloudEC_SERVERCONFIG = {
        LOGIN_ADDRESS: "szxuces-vip.huawei.com",
        LOGIN_PORT: "8443",
        CA_PATH: "./",
        LOG_PATH: "./js_sdk_log",
        LOG_LEVEL: 3,
        LOG_IM_LEVEL: 0,
        LOG_FILE_COUNT: 5,
        LOG_FILE_SIZE: 10240,
        IM_SERVER_VERSION: "v3.1.0.200",
        LOGIN_SERVER_VERSION: "V6R6C00",
        ENTERPRISE_DOMAIN: "127.0.0.1",
        IS_WITH_SBC: 1,
        IS_TLS_SUPPORT: 0,
        IS_WSS: 1,
        CONF_CONTROL_PROTOCOL: 0,
        HWUC: 0,
        DROP_FRAME_COUNT: 2,
        IS_AUTO_ADAPT_FRAME: 0,
        VIDEO_DISPLAY_MODE: 1,
        NATIVE_NEED_ATTACH: 1,
        NATIVE_WINDOW_X_OFFSET: 600,
        NATIVE_WINDOW_Y_OFFSET: 300,
        NATIVE_WINDOW_X_OFFSET_RATE: 50,
        NATIVE_WINDOW_Y_OFFSET_RATE: 20,
        NATIVE_WINDOW_WIDTH: 720,
        NATIVE_WINDOW_HEIGHT: 480,
    };
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 15 */
/***/ (function(module, exports) {

module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};


/***/ }),
/* 16 */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(8);
var createDesc = __webpack_require__(40);
module.exports = __webpack_require__(7) ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(3);
var hide = __webpack_require__(17);
var has = __webpack_require__(16);
var SRC = __webpack_require__(41)('src');
var TO_STRING = 'toString';
var $toString = Function[TO_STRING];
var TPL = ('' + $toString).split(TO_STRING);

__webpack_require__(29).inspectSource = function (it) {
  return $toString.call(it);
};

(module.exports = function (O, key, val, safe) {
  var isFunction = typeof val == 'function';
  if (isFunction) has(val, 'name') || hide(val, 'name', key);
  if (O[key] === val) return;
  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
  if (O === global) {
    O[key] = val;
  } else if (!safe) {
    delete O[key];
    hide(O, key, val);
  } else if (O[key]) {
    O[key] = val;
  } else {
    hide(O, key, val);
  }
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString() {
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var fails = __webpack_require__(4);
var defined = __webpack_require__(31);
var quot = /"/g;
// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
var createHTML = function (string, tag, attribute, value) {
  var S = String(defined(string));
  var p1 = '<' + tag;
  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};
module.exports = function (NAME, exec) {
  var O = {};
  O[NAME] = exec(createHTML);
  $export($export.P + $export.F * fails(function () {
    var test = ''[NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  }), 'String', O);
};


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = __webpack_require__(56);
var defined = __webpack_require__(31);
module.exports = function (it) {
  return IObject(defined(it));
};


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

var pIE = __webpack_require__(57);
var createDesc = __webpack_require__(40);
var toIObject = __webpack_require__(20);
var toPrimitive = __webpack_require__(30);
var has = __webpack_require__(16);
var IE8_DOM_DEFINE = __webpack_require__(100);
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = __webpack_require__(7) ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = __webpack_require__(16);
var toObject = __webpack_require__(10);
var IE_PROTO = __webpack_require__(75)('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(11), __webpack_require__(24), __webpack_require__(14), __webpack_require__(12), __webpack_require__(28), __webpack_require__(350), __webpack_require__(13), __webpack_require__(1), __webpack_require__(349), __webpack_require__(376), __webpack_require__(377), __webpack_require__(378), __webpack_require__(379), __webpack_require__(380), __webpack_require__(381), __webpack_require__(382), __webpack_require__(11), __webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, enum_1, errorCode_1, serverConfig_1, dispatcher_1, observer_1, initialization_1, eventInfo_1, util, call_1, conference_1, device_1, eaddr_1, contact_1, group_1, presence_1, message_1, enum_2, util_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Client = (function () {
        function Client() {
            this.timer = 0;
            this.currentFrame = serverConfig_1.CloudEC_SERVERCONFIG.DROP_FRAME_COUNT || 2;
            this.pcMemory = 0;
            this.playHandle = -1;
            this.parentFrameHwnd = 0;
            this.frameHwndList = {};
            this.isNativeWndExist = false;
            initialization_1.default.init();
            this._device = new device_1.default();
            this._eaddr = new eaddr_1.default();
            this._contact = new contact_1.default();
            this._group = new group_1.default();
            this._presence = new presence_1.default();
            this._message = new message_1.default();
            this._status = 0;
        }
        Client.prototype.login = function (authType, authParam, serverInfo, callback) {
            var _this = this;
            util_1.default.info("Login", "Client:enter login");
            var err = { cmdId: 100000000, errorCode: 100000002, errorInfo: "parameter error" };
            var evt = { result: false, info: err };
            if (util.isUndefined(callback) || !util.isFunction(callback)) {
                var err_1 = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(100000000, 100000002, "callback");
                Client.notifyErr(err_1);
                return;
            }
            if ((typeof authType) != 'number') {
                err.errorInfo = "authType should be a number";
                evt.info = err;
                callback(evt);
                return;
            }
            switch (authType) {
                case enum_1.LOGIN_AUTH_TYPE.ACCOUNT_AUTH:
                    if (!authParam.account || !authParam.passwd) {
                        err.errorInfo = "login account or password is empty";
                        evt.info = err;
                        callback(evt);
                        return;
                    }
                    break;
                case enum_1.LOGIN_AUTH_TYPE.TOKEN_AUTH:
                    if (!authParam.token) {
                        err.errorInfo = "login token is empty";
                        evt.info = err;
                        callback(evt);
                        return;
                    }
                    break;
                default:
                    err.errorInfo = "authType should be in [0,1]";
                    evt.info = err;
                    callback(evt);
                    return;
            }
            if ("" == serverInfo.serverAddress || (typeof serverInfo.serverPort) != 'number') {
                err.errorInfo = "serverAddress or serverPort is incorrect";
                evt.info = err;
                callback(evt);
                return;
            }
            sessionStorage.setItem("CLOUDEC_LOGIN_INPUT_PARAM", JSON.stringify({ authType: authType, authParam: authParam, serverInfo: serverInfo }));
            authParam.token = "";
            authParam.passwd = "";
            serverInfo.extensions = "";
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_LOGIN_REQ, function (ret) {
                if (!ret.result) {
                    callback(ret);
                    return;
                }
                var _a = ret.info, userAccount = _a.userAccount, sipAccount = _a.sipAccount, shortNumber = _a.shortNumber, deployMode = _a.deployMode;
                var milltime = new Date().getTime();
                var mydate = util.formatDateYYYYMMDDHHMM(milltime);
                var loginTime = mydate.date + " " + mydate.time;
                var userInfo = { userAccount: userAccount, sipAccount: sipAccount, shortNumber: shortNumber, loginTime: loginTime };
                evt.result = true;
                evt.info = userInfo;
                _this._status = 1;
                _this.registerCallEvent();
                _this.registerConfEvent();
                _this.registerDataEvent();
                _this.registerImEvent();
                callback(evt);
            });
        };
        Client.prototype.logout = function () {
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_LOGOUT_REQ);
            delete this._call;
            delete this._conf;
            this._status = 0;
        };
        Client.prototype.bookConference = function (bookConferenceParam, callback) {
            this.isLogin();
            var ret = this.isValidBookConferenceParam(bookConferenceParam);
            if (ret.result === false) {
                Client.notifyErr(ret);
                return;
            }
            if (util.isUndefined(callback) || !util.isFunction(callback)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(300000000, 300000002, "callback");
                Client.notifyErr(err);
                return;
            }
            if (bookConferenceParam.topic.length === 0) {
                bookConferenceParam.topic = "CloudEC_Meeting";
                util_1.default.info("Login", "set default meeting topic");
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_BOOK_RESVCONF, bookConferenceParam, function (ret) {
                if (ret.result == true) {
                    var data = ret.info.param;
                    var conf_list_info = data.conf_list_info;
                    var date = new Date();
                    var offset = date.getTimezoneOffset() * 60 * 1000;
                    var sdate = new Date(conf_list_info.start_time.replace(" ", "T"));
                    var l_sdate = new Date(sdate.valueOf() - offset);
                    var l_start_time = l_sdate.toLocaleString();
                    var edate = new Date(conf_list_info.end_time.replace(" ", "T"));
                    var l_edate = new Date(edate.valueOf() - offset);
                    var l_end_time = l_edate.toLocaleString();
                    var conf_info = {
                        conferenceID: conf_list_info.conf_id,
                        accessNumber: conf_list_info.access_number,
                        chairmanPasswd: conf_list_info.chairman_pwd,
                        generalPasswd: conf_list_info.general_pwd,
                        state: conf_list_info.conf_state,
                        topic: conf_list_info.conf_subject,
                        startTime: l_start_time,
                        endTime: l_end_time,
                        mediaType: conf_list_info.media_type,
                        scheduserName: "",
                        scheduerNumber: "",
                        attendeeAmount: conf_list_info.size
                    };
                    ret.info = conf_info;
                }
                callback(ret);
            });
        };
        Client.prototype.joinInstanceConf = function (instanceConfParam, callback) {
            var _this = this;
            this.isLogin();
            var err = { cmdId: 0, errorCode: 400000001, errorInfo: "parameter error" };
            var evt = { result: false, info: err };
            var validret = this.isValideInstanceConfParam(instanceConfParam);
            if (validret.result === false) {
                Client.notifyErr(validret);
                return;
            }
            if (util.isUndefined(callback) || !util.isFunction(callback)) {
                var err_2 = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(300000000, 300000002, "callback");
                Client.notifyErr(err_2);
                return;
            }
            if (!util.isUndefined(this._conf) || !util.isUndefined(this._call)) {
                callback(errorCode_1.EC_SDK_ERROR.ALREADY_IN_CONF());
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_JOIN_INSTCONF, instanceConfParam, function (ret) {
                if (ret.result == true) {
                    _this._conf = new conference_1.default();
                    _this._conf.setConfInfo(ret.info);
                    evt.result = true;
                    evt.info = _this._conf;
                }
                else {
                    evt.result = false;
                    evt.info = ret.info;
                }
                callback(evt);
            });
        };
        Client.prototype.joinAnonymousConf = function (anonymousConfParam, serverInfo, callback) {
            var _this = this;
            util_1.default.info("Login", "Client:join anonymous conf begin");
            var err = { cmdId: 0, errorCode: 400000001, errorInfo: "parameter error" };
            var evt = { result: false, info: err };
            if (util.isUndefined(callback) || !util.isFunction(callback)) {
                var err_3 = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(300000000, 300000002, "callback");
                Client.notifyErr(err_3);
                return;
            }
            if (util.isUndefined(serverInfo) || "" == serverInfo.serverAddress || (typeof serverInfo.serverPort) != 'number') {
                err.errorInfo = "serverAddress or serverPort is incorrect";
                evt.info = err;
                callback(evt);
                return;
            }
            if (util.isUndefined(anonymousConfParam) || "" == anonymousConfParam.confId || !util.isBinaryNumber(anonymousConfParam.callType)) {
                err.errorInfo = "anonymous conf parameters can not be empty";
                evt.result = false;
                evt.info = err;
                callback(evt);
                return;
            }
            this.registerCallEvent();
            this.registerConfEvent();
            this.registerDataEvent();
            this._status = 1;
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_JOIN_ANONYCONF, anonymousConfParam, serverInfo, function (ret) {
                if (ret.result) {
                    _this._conf = new conference_1.default();
                    evt.info = _this._conf;
                    callback(evt);
                }
                else {
                    callback(ret);
                }
            });
        };
        Client.prototype.getMyConfList = function (page_index, page_size, callback) {
            this.isLogin();
            if (util.isUndefined(page_index) || !util.isInteger(page_index)) {
                Client.notifyErr(errorCode_1.EC_SDK_ERROR.PARAM_TYPE_ERROR("page_index"));
                return;
            }
            if (util.isUndefined(page_size) || !util.isInteger(page_size)) {
                Client.notifyErr(errorCode_1.EC_SDK_ERROR.PARAM_TYPE_ERROR("page_size"));
                return;
            }
            if (util.isUndefined(callback) || !util.isFunction(callback)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(300000000, 300000002, "callback");
                Client.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_GET_CONFLIST, page_index, page_size, function (ret) {
                var conf_list = [];
                if (ret.result == true) {
                    var conf_list_info = ret.info.param.conf_list_info;
                    for (var m in conf_list_info) {
                        var date = new Date();
                        var offset = date.getTimezoneOffset() * 60 * 1000;
                        var sdate = new Date(conf_list_info[m].start_time.replace(" ", "T"));
                        var l_sdate = new Date(sdate.valueOf() - offset);
                        var l_start_time = l_sdate.toLocaleString();
                        var edate = new Date(conf_list_info[m].end_time.replace(" ", "T"));
                        var l_edate = new Date(edate.valueOf() - offset);
                        var l_end_time = l_edate.toLocaleString();
                        var obj = {
                            accessNumber: conf_list_info[m].access_number,
                            chairmanPasswd: conf_list_info[m].chairman_pwd,
                            generalPasswd: conf_list_info[m].general_pwd,
                            conferenceID: conf_list_info[m].conf_id,
                            state: conf_list_info[m].conf_state,
                            topic: conf_list_info[m].conf_subject,
                            startTime: l_start_time,
                            endTime: l_end_time,
                            mediaType: (conf_list_info[m].media_type == 1 || conf_list_info[m].media_type == 17 ? 0 : 1),
                            scheduserName: conf_list_info[m].scheduser_name,
                            scheduerNumber: conf_list_info[m].scheduser_number,
                            attendeeAmount: conf_list_info[m].size
                        };
                        conf_list[m] = obj;
                    }
                    callback({ result: true, info: conf_list });
                }
                else {
                    callback(ret);
                }
            });
        };
        Client.prototype.getMyConfInfo = function (conf_id, callback) {
            this.isLogin();
            if (util.isUndefined(conf_id) || !util.isString(conf_id)) {
                Client.notifyErr(errorCode_1.EC_SDK_ERROR.PARAM_TYPE_ERROR("conf_id"));
                return;
            }
            if (util.isUndefined(callback) || !util.isFunction(callback)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(300000000, 300000002, "callback");
                Client.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_GET_CONFINFO, conf_id, function (ret) {
                if (ret.result == true) {
                    var data = ret.info.param;
                    var conf_list_info = data.get_conf_info_result.conf_list_info;
                    var date = new Date();
                    var offset = date.getTimezoneOffset() * 60 * 1000;
                    var sdate = new Date(conf_list_info.start_time.replace(" ", "T"));
                    var l_sdate = new Date(sdate.valueOf() - offset);
                    var l_start_time = l_sdate.toLocaleString();
                    var edate = new Date(conf_list_info.end_time.replace(" ", "T"));
                    var l_edate = new Date(edate.valueOf() - offset);
                    var l_end_time = l_edate.toLocaleString();
                    var conf_info = {
                        conferenceID: conf_list_info.conf_id,
                        accessNumber: conf_list_info.access_number,
                        chairmanPasswd: conf_list_info.chairman_pwd,
                        generalPasswd: conf_list_info.general_pwd,
                        state: conf_list_info.conf_state,
                        topic: conf_list_info.conf_subject,
                        startTime: l_start_time,
                        endTime: l_end_time,
                        mediaType: conf_list_info.media_type,
                        scheduserName: conf_list_info.scheduser_name,
                        scheduerNumber: conf_list_info.scheduser_number,
                        attendeeAmount: data.get_conf_info_result.num_of_addendee
                    };
                    callback({ result: true, info: conf_info });
                }
                else {
                    callback(ret);
                }
            });
        };
        Client.prototype.joinConference = function (joinConfParam, callback) {
            var _this = this;
            this.isLogin();
            var err = { cmdId: 300000000, errorCode: 300000002, errorInfo: "parameter error" };
            var evt = { result: true, info: "" };
            var mediaType = 1;
            if (util.isUndefined(callback) || !util.isFunction(callback)) {
                var err_4 = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(300000000, 300000002, "callback");
                Client.notifyErr(err_4);
                return;
            }
            if (util.isUndefined(joinConfParam) || "" == joinConfParam.conferenceId
                || "" == joinConfParam.accessNumber) {
                err.errorInfo = "Parameter can not be empty";
                evt.result = false;
                evt.info = err;
                callback(evt);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_ACCESS_RESVCONF, joinConfParam, mediaType, function (ret) {
                if (ret.result) {
                    _this._conf = new conference_1.default();
                    evt.info = _this._conf;
                    callback(evt);
                }
                else {
                    callback(ret);
                }
            });
            joinConfParam.confPasswd = "";
        };
        Client.prototype.setLoginProxy = function (proxyParam) {
            util_1.default.info("Login", "setLoginProxy proxyAddress: " + JSON.stringify(proxyParam));
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_SET_PROXY_REQ, proxyParam, function (ret) {
            });
        };
        Client.prototype.getCallHandler = function () {
            this.isLogin();
            if (this._call) {
                return this._call;
            }
            else {
                util_1.default.error("client", JSON.stringify(errorCode_1.EC_SDK_ERROR.OBJECT_NOT_EXISTS("Call")));
                Client.notifyErr(errorCode_1.EC_SDK_ERROR.OBJECT_NOT_EXISTS("call"));
                return null;
            }
        };
        Client.prototype.getConfHandler = function () {
            if (this._conf) {
                return this._conf;
            }
            else {
                var errinfo = "Conference object doesn't exists";
                util_1.default.error("client", errinfo);
                Client.notifyErr(errorCode_1.EC_SDK_ERROR.OBJECT_NOT_EXISTS("Conference"));
                return null;
            }
        };
        Client.prototype.on = function (event, action) {
            util_1.default.info("client", "register event = " + event);
            var _listener = Client._listeners[event];
            if (!_listener) {
                Client._listeners[event] = [];
            }
            Client._listeners[event].push(action);
        };
        Client.prototype.onError = function (action) {
            this.on("error", action);
        };
        Client.notifyErr = function (errorInfo) {
            var _listener = Client._listeners["error"];
            if (!_listener)
                return;
            var length = _listener.length;
            for (var i = 0; i < length; i++) {
                var callback = _listener[i];
                callback(errorInfo);
            }
        };
        Client.prototype.notify = function (event) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            var _listener = Client._listeners[event];
            if (!_listener)
                return;
            var length = _listener.length;
            for (var i = 0; i < length; i++) {
                var callback = _listener[i];
                callback.apply(void 0, args);
            }
        };
        Client.prototype.isValideInstanceConfParam = function (param) {
            if (util.isUndefined(param)) {
                return errorCode_1.EC_SDK_ERROR.PARAM_TYPE_ERROR("instanceConfParam");
            }
            if (!util.isUndefined(param.isVideo) && !util.isInteger(param.isVideo) && (param.isVideo < 0 || param.isVideo > 3)) {
                return errorCode_1.EC_SDK_ERROR.CONF_PARAM_INVALID_ERROR("isVideo");
            }
            if (!util.isUndefined(param.autoRecord) && !util.isBinaryNumber(param.autoRecord)) {
                return errorCode_1.EC_SDK_ERROR.CONF_PARAM_INVALID_ERROR("auto_record");
            }
            if (!util.isUndefined(param.attendees)) {
                if (!util.isArray(param.attendees)) {
                    return errorCode_1.EC_SDK_ERROR.PARAM_TYPE_ERROR("attendees");
                }
                for (var i = 0; i < param.attendees.length; i++) {
                    if (!util.isValidAttendeeParam(param.attendees[i])) {
                        return errorCode_1.EC_SDK_ERROR.CONF_PARAM_INVALID_ERROR("attendees");
                    }
                }
            }
            return { result: true, info: "" };
        };
        Client.prototype.isValidBookConferenceParam = function (param) {
            if (util.isUndefined(param)) {
                return errorCode_1.EC_SDK_ERROR.PARAM_TYPE_ERROR("bookConferenceParam");
            }
            if (!util.isInteger(param.duration) ||
                !util.isString(param.topic)) {
                return errorCode_1.EC_SDK_ERROR.PARAM_TYPE_ERROR("duration or topic");
            }
            if (!util.isUndefined(param.autoRecord) && !util.isBinaryNumber(param.autoRecord)) {
                return errorCode_1.EC_SDK_ERROR.CONF_PARAM_INVALID_ERROR("auto_record");
            }
            if (!util.isUndefined(param.isVideo) && !util.isInteger(param.isVideo) && (param.isVideo < 0 || param.isVideo > 3)) {
                return errorCode_1.EC_SDK_ERROR.CONF_PARAM_INVALID_ERROR("isVideo");
            }
            var startTime = param.startTime;
            if (startTime != null) {
                if (!util.isInteger(startTime.year) ||
                    !util.isInteger(startTime.month) ||
                    !util.isInteger(startTime.date) ||
                    !util.isInteger(startTime.hours) ||
                    !util.isInteger(startTime.minutes)) {
                    return errorCode_1.EC_SDK_ERROR.PARAM_TYPE_ERROR("startTime");
                }
                if (startTime.month < 1 || startTime.month > 12) {
                    return errorCode_1.EC_SDK_ERROR.PARAM_RANGE_ERROR("month", "0", "12");
                }
                if (startTime.date < 1 || startTime.date > 31) {
                    return errorCode_1.EC_SDK_ERROR.PARAM_RANGE_ERROR("date", "1", "31");
                }
                if (startTime.hours < 0 || startTime.hours > 24) {
                    return errorCode_1.EC_SDK_ERROR.PARAM_RANGE_ERROR("hours", "0", "24");
                }
                if (startTime.minutes < 0 || startTime.minutes > 60) {
                    return errorCode_1.EC_SDK_ERROR.PARAM_RANGE_ERROR("minutes", "0", "60");
                }
            }
            if (util.isUndefined(param.attendees) || !util.isArray(param.attendees) || param.attendees.length === 0) {
                return errorCode_1.EC_SDK_ERROR.CONF_PARAM_INVALID_ERROR("attendees");
            }
            for (var i = 0; i < param.attendees.length; i++) {
                if (!util.isValidAttendeeParam(param.attendees[i])) {
                    return errorCode_1.EC_SDK_ERROR.CONF_PARAM_INVALID_ERROR("attendees");
                }
            }
            return { result: true, info: "" };
        };
        Client.prototype.registerCallEvent = function () {
            var _this = this;
            observer_1.default.subscribe('CallIncomming', function (ret) {
                var evt = { result: true, info: "you have a incoming call" };
                _this._call = new call_1.default();
                _this._call.setCallID(ret.callId);
                _this.callID = ret.callId;
                _this._call.setCallStyle(0);
                _this._call.setCallType(ret.isVideo);
                _this._call.setCallee(ret.callNo);
                evt.info = {
                    callNo: ret.callNo,
                    callType: ret.isVideo,
                };
                _this.notify('CallIncomming', evt);
                dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CALL_START_PLAY_MEDIA_FILE, 0, "./audio/In.wav", function (data) {
                    if (data.result == 0) {
                        _this.playHandle = data.param.play_handle;
                    }
                });
            });
            observer_1.default.subscribe('onForceUnReg', function (ret) {
                _this.logout();
                _this.notify("ForceUnReg", ret);
            });
            observer_1.default.subscribe('CallDestroy', function (ret) {
                _this.notify("CallDestroy", ret);
            });
            observer_1.default.subscribe('CallEnded', function (ret) {
                delete _this._call;
                var evt;
                if (ret) {
                    evt = { result: ret, info: "end success" };
                }
                else {
                    evt = { result: ret, info: "end failure" };
                }
                if (serverConfig_1.CloudEC_SERVERCONFIG.VIDEO_DISPLAY_MODE == 0) {
                    _this.delVideo();
                }
                else {
                    _this.closeVideo();
                }
                if (_this.playHandle >= 0) {
                    dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CALL_STOP_PLAY_MEDIA_FILE, _this.playHandle, function (data) {
                        if (data.result == 0) {
                            _this.playHandle = -1;
                        }
                    });
                }
                _this.notify('CallEnded', evt);
            });
            observer_1.default.subscribe('CallConnected', function (ret) {
                var evt = { result: true, info: "call connect!" };
                _this.notify('CallConnected', evt);
                _this.callID = ret.call_id;
                if (_this.playHandle >= 0) {
                    dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CALL_STOP_PLAY_MEDIA_FILE, _this.playHandle, function (data) {
                        if (data.result == 0) {
                            _this.playHandle = -1;
                        }
                    });
                }
                if (serverConfig_1.CloudEC_SERVERCONFIG.VIDEO_DISPLAY_MODE == 1 && ret.call_type == 1) {
                    _this.displayVideoEx(ret.call_id);
                }
                else if (serverConfig_1.CloudEC_SERVERCONFIG.VIDEO_DISPLAY_MODE == 1 && ret.call_type == 0 && _this.isNativeWndExist) {
                    _this.closeVideo();
                }
            });
            observer_1.default.subscribe('CallRingBack', function (ret) {
                var evt = { result: true, info: "call ringBack!" };
                if (_this.playHandle == -1) {
                    _this.playHandle = -2;
                    _this._call.setCallID(ret.call_id);
                    _this.callID = ret.call_id;
                    _this.notify('CallRingBack', evt);
                    dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CALL_START_PLAY_MEDIA_FILE, 0, "./audio/ringback.wav", function (data) {
                        if (data.result == 0) {
                            _this.playHandle = data.param.play_handle;
                        }
                    });
                }
            });
            observer_1.default.subscribe('AddVideoRequest', function (ret) {
                var evt = { result: true, info: "Add video request!" };
                _this.notify('AddVideoRequest', evt);
            });
            observer_1.default.subscribe('DelVideoRequest', function (ret) {
                var evt = { result: true, info: "Delete video request!" };
                _this.notify('DelVideoRequest', evt);
            });
            observer_1.default.subscribe('CallModifyVideoResult', function (ret) {
                var evt = { result: true, info: "Audio and video conversion succeed!" };
                if (0 == ret.result) {
                    if (1 == ret.is_video) {
                        if (serverConfig_1.CloudEC_SERVERCONFIG.VIDEO_DISPLAY_MODE == 0) {
                            _this.showVideo();
                        }
                    }
                    else {
                        if (serverConfig_1.CloudEC_SERVERCONFIG.VIDEO_DISPLAY_MODE == 1) {
                            _this.closeVideo();
                        }
                    }
                }
                else {
                    evt = { result: false, info: "Audio and video conversion failed!" };
                    if (serverConfig_1.CloudEC_SERVERCONFIG.VIDEO_DISPLAY_MODE == 1) {
                        if (0 == ret.is_video) {
                            _this.closeVideo();
                        }
                    }
                }
                _this.notify('CallModifyVideoResult', evt);
            });
            observer_1.default.subscribe('VideoSocketResult', function (ret) {
                if (!ret.result) {
                    Client.notifyErr(ret);
                }
            });
            observer_1.default.subscribe('CallSessionModify', function (ret) {
                _this.notify('CallSessionModify', ret);
                if (serverConfig_1.CloudEC_SERVERCONFIG.VIDEO_DISPLAY_MODE == 1) {
                    if (ret.nowIsVideoCall === 1) {
                        _this.displayVideoEx(ret.call_id);
                    }
                    else {
                        _this.closeVideo();
                    }
                }
            });
            observer_1.default.subscribe('NewServiceRight', function (ret) {
                var evt = { result: true, info: ret };
                _this.notify('NewServiceRight', evt);
            });
            observer_1.default.subscribe('SetIptServiceSuccess', function (ret) {
                var evt = { result: true, info: "set ipt successful!" };
                _this.notify('SetIptServiceResult', evt);
            });
            observer_1.default.subscribe('SetIptServiceFailed', function (ret) {
                var evt = { result: false, info: "failed to set ipt!" };
                _this.notify('SetIptServiceResult', evt);
            });
            observer_1.default.subscribe('CallBldTransferRecvSucRsp', function (ret) {
                var evt = { result: true, info: "blind transfer request result!" };
                _this.notify('CallBldTransferRecvSucRsp', evt);
            });
            observer_1.default.subscribe('CallBldTransferFailed', function (ret) {
                var evt = { result: false, info: "blind transfer failed!" };
                _this.notify('CallBldTransferResult', evt);
            });
            observer_1.default.subscribe('CallBldTransferSuccess', function (ret) {
                var evt = { result: true, info: "blind transfer success!" };
                _this.notify('CallBldTransferResult', evt);
            });
        };
        Client.prototype.registerConfEvent = function () {
            var _this = this;
            observer_1.default.subscribe("BeTransToConfInd", function (ret) {
                if (_this._call) {
                    delete _this._call;
                }
                if (ret.info.conf_info.media_type != 17 && ret.info.conf_info.media_type != 1) {
                    if (serverConfig_1.CloudEC_SERVERCONFIG.VIDEO_DISPLAY_MODE == 1) {
                    }
                }
            });
            observer_1.default.subscribe("ConfConnected", function (ret) {
                if (util.isUndefined(_this._call) && ret.connect_info.media_type != 17 && ret.connect_info.media_type != 1) {
                    if (serverConfig_1.CloudEC_SERVERCONFIG.VIDEO_DISPLAY_MODE == 0) {
                        _this.showVideo();
                    }
                    else {
                    }
                }
                if (util.isUndefined(_this._conf)) {
                    _this._conf = new conference_1.default();
                }
                _this._conf.setCallId(ret.call_id);
                _this.callID = ret.call_id;
                _this.notify('ConfConnected', { result: true, info: "Access conference successful" });
            });
            observer_1.default.subscribe("ConfInfoInd", function (ret) {
                var mediaType = ret.info.mediaType;
                var loginInfo = JSON.parse(sessionStorage.cloudEC_loginInfo);
                var deployMode = loginInfo.deployMode;
                if (serverConfig_1.CloudEC_SERVERCONFIG.VIDEO_DISPLAY_MODE == 1 && mediaType != 17 && mediaType != 1) {
                    _this.displayVideoEx(_this.callID);
                }
                else if (serverConfig_1.CloudEC_SERVERCONFIG.VIDEO_DISPLAY_MODE == 1 && (mediaType == 17 || mediaType == 1)) {
                    if (deployMode == enum_2.CLOUDEC_LOGIN_E_DEPLOY_MODE.LOGIN_E_DEPLOY_ENTERPRISE_CC) {
                        _this.closeVideo();
                    }
                }
                if (_this._conf != undefined) {
                    _this._conf.setConfInfo(ret.info);
                }
                else {
                    _this._conf = new conference_1.default();
                    _this._conf.setCallId(ret.info.callid);
                    _this.callID = ret.info.callid;
                }
            });
            observer_1.default.subscribe("AttendeeListUpdate", function (ret) {
                var attendeeList = ret.conf_status.participants;
                var participantNum = ret.conf_status.num_of_participant;
                var participantOriginNum = _this._conf.getAttendeeListNumber();
                var attendeeListOrigin = new Array();
                _this._conf.getAttendeeList(function (ret) {
                    attendeeListOrigin = ret.info;
                });
                if (serverConfig_1.CloudEC_SERVERCONFIG.CONF_CONTROL_PROTOCOL == 0) {
                    _this._conf.updateConfInfo({
                        createor: ret.conf_status.createor,
                        isAllMute: ret.conf_status.is_all_mute,
                        lockState: ret.conf_status.lock_state,
                    });
                }
                if (participantNum > 0 && participantNum < participantOriginNum) {
                    var _loop_1 = function (i) {
                        var flag = void 0;
                        flag = attendeeList.find(function (value) {
                            return value.number === attendeeListOrigin[i].number;
                        });
                        if (flag == undefined && attendeeListOrigin[i].name != "") {
                            _this._conf.deleteAttendeeList(attendeeListOrigin[i]);
                        }
                    };
                    for (var i = 0; i < attendeeListOrigin.length; i++) {
                        _loop_1(i);
                    }
                }
                else if (participantNum > 0 && participantNum == participantOriginNum) {
                    var _loop_2 = function (i) {
                        var flag = void 0;
                        flag = attendeeListOrigin.find(function (value) {
                            return attendeeList[i].number === value.number;
                        });
                        if (flag != undefined) {
                            var attendee = {
                                participantId: attendeeList[i].participant_id,
                                name: attendeeList[i].name,
                                number: attendeeList[i].number,
                                isMute: attendeeList[i].is_mute,
                                isDeaf: attendeeList[i].is_deaf,
                                raiseHandState: attendeeList[i].hand_state,
                                role: attendeeList[i].role,
                                joinState: attendeeList[i].state,
                                isSelf: attendeeList[i].is_self,
                                isDataconfMember: flag.isDataconfMember,
                                dataconfUserId: flag.dataconfUserId,
                                dataconfMemberType: flag.dataconfMemberType,
                                sharingPermit: flag.sharingPermit,
                                isBroadcast: attendeeList[i].is_broadcast
                            };
                            _this._conf.updateAttendeeList(attendee);
                        }
                    };
                    for (var i = 0; i < attendeeList.length; i++) {
                        _loop_2(i);
                    }
                }
                else if (participantNum > 0 && participantNum > participantOriginNum) {
                    var _loop_3 = function (i) {
                        var flag = void 0;
                        flag = attendeeListOrigin.find(function (value) {
                            return attendeeList[i].name === value.name;
                        });
                        if (flag == undefined) {
                            var attendee = {
                                participantId: attendeeList[i].participant_id,
                                name: attendeeList[i].name,
                                number: attendeeList[i].number,
                                isMute: attendeeList[i].is_mute,
                                isDeaf: attendeeList[i].is_deaf,
                                raiseHandState: attendeeList[i].hand_state,
                                role: attendeeList[i].role,
                                joinState: attendeeList[i].state,
                                isSelf: attendeeList[i].is_self,
                                isDataconfMember: 0,
                                dataconfUserId: 0,
                                dataconfMemberType: 0,
                                sharingPermit: 0,
                                isBroadcast: attendeeList[i].is_broadcast
                            };
                            _this._conf.addAttendeeList(attendee);
                        }
                    };
                    for (var i = 0; i < attendeeList.length; i++) {
                        _loop_3(i);
                    }
                }
                var evt = { result: true, info: ret.conf_status.subject };
                _this.notify('UpdateAttendeeList', evt);
            });
            observer_1.default.subscribe("UpdateConfinfo", function (data) {
                if (!util.isUndefined(_this._conf)) {
                    _this._conf.setConfInfo(data);
                }
            });
            observer_1.default.subscribe("ConfIncoming", function (ret) {
                var err = { cmdId: 0, errorCode: 400000001, errorInfo: "parameter error" };
                var evt = { result: false, info: err };
                _this._conf = new conference_1.default();
                var confInfo = {
                    mediaType: ret.conf_incoming_ind.media_type,
                    confHandle: ret.handle
                };
                _this._conf.setConfInfo(confInfo);
                evt.result = true;
                evt.info = "You have a incoming conference";
                _this.notify('ConfIncoming', evt);
            });
            observer_1.default.subscribe("confFinished", function (data) {
                var evt = { result: true, info: "The meeting has already left!" };
                if (_this._conf) {
                    var objConfHandle = _this._conf.getConfHandle();
                    var objDataConfHandle = _this._conf.getDataConfHandle();
                    if (objConfHandle === data.confHandle && objDataConfHandle === data.dataConfHandle) {
                        delete _this._conf;
                    }
                    if (serverConfig_1.CloudEC_SERVERCONFIG.VIDEO_DISPLAY_MODE == 1) {
                        _this.closeVideo();
                    }
                    if (1 == serverConfig_1.CloudEC_SERVERCONFIG.IS_AUTO_ADAPT_FRAME) {
                        _this.delInterval();
                    }
                    _this.sipDeregisterAnonyConf();
                    _this.notify('LeaveConference', evt);
                }
            });
            observer_1.default.subscribe("ConfEnd", function (data) {
                if (!util.isUndefined(_this._conf)) {
                    var evt = { result: true, info: "The meeting ended successfully!" };
                    var objConfHandle = _this._conf.getConfHandle();
                    if (objConfHandle === data.info.param.handle) {
                        delete _this._conf;
                    }
                    if (serverConfig_1.CloudEC_SERVERCONFIG.VIDEO_DISPLAY_MODE == 1) {
                        _this.closeVideo();
                    }
                    if (1 == serverConfig_1.CloudEC_SERVERCONFIG.IS_AUTO_ADAPT_FRAME) {
                        _this.delInterval();
                    }
                    _this.sipDeregisterAnonyConf();
                    _this.notify('EndConference', evt);
                }
            });
            observer_1.default.subscribe("FloorAttendeeInd", function (data) {
                var evt = { result: false, info: "No speaker" };
                if (data.num_of_speaker != 0) {
                    var speakerArr = new Array();
                    var speakerTemp = data.speaker;
                    for (var i = 0; i < speakerTemp.length; i++) {
                        var speaker = {
                            number: speakerTemp[i].number,
                            isSpeaking: speakerTemp[i].is_speaking,
                            speakingVolume: speakerTemp[i].speaking_volume != undefined ? speakerTemp[i].speaking_volume : 0
                        };
                        speakerArr.push(speaker);
                    }
                    speakerArr.sort(function (x, y) {
                        return y.speakingVolume - x.speakingVolume;
                    });
                    evt.result = true;
                    evt.info = speakerArr;
                }
                _this.notify('SpeakerIdentify', evt);
            });
        };
        Client.prototype.registerDataEvent = function () {
            var _this = this;
            observer_1.default.subscribe('UserEnterInd', function (data) {
                var number = data.user_alt_uri;
                var isDataconfMember = 1;
                var dataconfUserId = data.user_alt_id;
                var dataconfMemberType = data.value2;
                var flag;
                if (dataconfUserId == 4294967294) {
                    return;
                }
                var attendeeListOrigin = new Array();
                _this._conf.getAttendeeList(function (ret) {
                    attendeeListOrigin = ret.info;
                });
                flag = attendeeListOrigin.find(function (value) {
                    return number === value.number;
                });
                if (flag != undefined) {
                    var attendee = {
                        participantId: flag.participantId,
                        name: flag.name,
                        number: flag.number,
                        isMute: flag.isMute,
                        isDeaf: flag.isDeaf,
                        raiseHandState: flag.raiseHandState,
                        role: flag.role,
                        joinState: flag.joinState,
                        isSelf: flag.isSelf,
                        isDataconfMember: 1,
                        dataconfUserId: dataconfUserId,
                        dataconfMemberType: dataconfMemberType,
                        sharingPermit: flag.sharingPermit,
                        isBroadcast: flag.isBroadcast
                    };
                    _this._conf.updateAttendeeList(attendee);
                }
                else {
                    var attendee = {
                        participantId: "",
                        name: "",
                        number: number,
                        isMute: 0,
                        isDeaf: 0,
                        raiseHandState: 0,
                        role: 0,
                        joinState: 0,
                        isSelf: 0,
                        isDataconfMember: 1,
                        dataconfUserId: dataconfUserId,
                        dataconfMemberType: dataconfMemberType,
                        sharingPermit: 0,
                        isBroadcast: 0
                    };
                    _this._conf.addAttendeeList(attendee);
                }
                var evt = { result: true, info: "Participant status changes, please update the list of attendees" };
                _this.notify('UpdateAttendeeList', evt);
            });
            observer_1.default.subscribe('PresenterChangeInd', function (data) {
                var dataconfUserId = data.value2;
                var attendeeListOrigin = new Array();
                var flag;
                _this._conf.getAttendeeList(function (ret) {
                    attendeeListOrigin = ret.info;
                });
                flag = attendeeListOrigin.find(function (value) {
                    return dataconfUserId === value.dataconfUserId;
                });
                if (flag != undefined) {
                    var attendee = {
                        participantId: flag.participantId,
                        name: flag.name,
                        number: flag.number,
                        isMute: flag.isMute,
                        isDeaf: flag.isDeaf,
                        raiseHandState: flag.raiseHandState,
                        role: flag.role,
                        joinState: flag.joinState,
                        isSelf: flag.isSelf,
                        isDataconfMember: 1,
                        dataconfUserId: flag.dataconfUserId,
                        dataconfMemberType: 2,
                        sharingPermit: flag.sharingPermit,
                        isBroadcast: flag.isBroadcast
                    };
                    _this._conf.updateAttendeeList(attendee);
                }
                var evt = { result: true, info: "Participant status changes, please update the list of attendees" };
                _this.notify('UpdateAttendeeList', evt);
            });
            observer_1.default.subscribe('ConfTerminal', function (data) {
                _this.notify('ConfTerminal', data);
            });
            observer_1.default.subscribe('dataUserleave', function (data) {
                var flag;
                var attendeeListOrigin = new Array();
                _this._conf.getAttendeeList(function (ret) {
                    attendeeListOrigin = ret.info;
                });
                flag = attendeeListOrigin.find(function (value) {
                    return 1 === value.sharingPermit;
                });
                if (flag == undefined) {
                    var evt = { result: true, info: "" };
                    evt.info = {
                        state: 0,
                        description: "The screen sharing has ended"
                    };
                    _this.notify('AsOnSharingState', evt);
                }
            });
            observer_1.default.subscribe('AnnoHittest', function (data) {
                var annoidType = _this._conf.getAnnoidType();
                var wbInfoList = _this._conf.getWbInfoList();
                if (data.annoid != 0) {
                    if (annoidType.operationIndex == 2) {
                        var annoidArr = new Array();
                        annoidArr = [data.annoid];
                        dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_AT_DELETE, data.confHandle, annoidType.ciid, annoidArr, wbInfoList[0].currentPage, wbInfoList[0].docid);
                    }
                    else if (annoidType.operationIndex == 4) {
                        dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_AT_TEXT_GETINFO, data.confHandle, annoidType.ciid, wbInfoList[0].docid, wbInfoList[0].currentPage, data.annoid);
                    }
                    else if (annoidType.operationIndex == 3) {
                        var annoidArr = new Array();
                        annoidArr = [data.annoid];
                        dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_AT_SET_SELECT, data.confHandle, 1, annoidType.ciid, annoidArr, wbInfoList[0].docid, wbInfoList[0].currentPage);
                        _this._conf.annotationSwitch(20);
                        _this._conf.setAnnoid(data.annoid);
                    }
                }
            });
            observer_1.default.subscribe('AnnoTextGetInfo', function (data) {
                var point = _this._conf.getPoint();
                var annoidType = _this._conf.getAnnoidType();
                var wbInfoList = _this._conf.getWbInfoList();
                var pString = _this._conf.diag("");
                var pInfo = {
                    "bounds": {
                        "left": point.x,
                        "top": point.y,
                        "right": point.x + 1500,
                        "bottom": point.y + 300
                    },
                    "pString": pString,
                    "pFont": "宋体",
                    "color": 255,
                    "size": 240,
                    "reserve": 0
                };
                dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_AT_TEXT_UPDATE, data.confHandle, true, pInfo, wbInfoList[0].docid, wbInfoList[0].currentPage, annoidType.ciid, data.annoid);
            });
            observer_1.default.subscribe('AsOnPrivilege', function (data) {
                var evt = { result: true, info: "" };
                var remoteCtrl;
                var dataconfUserId = data.user_id;
                var attendeeListOrigin = new Array();
                var attendee;
                _this._conf.getAttendeeList(function (ret) {
                    attendeeListOrigin = ret.info;
                });
                attendee = attendeeListOrigin.find(function (value) {
                    return dataconfUserId === value.dataconfUserId;
                });
                if (data.value2 == 1 && attendee.isSelf == 1) {
                    _this._conf.removeCtrlMsg(1);
                }
                else if (data.value2 == 0 && attendee.isSelf == 1) {
                    _this._conf.removeCtrlMsg(0);
                }
                remoteCtrl = {
                    userid: data.user_id,
                    name: attendee.name,
                    isSelf: attendee.isSelf,
                    sharePrivilege: data.value1,
                    shareAction: data.value2,
                };
                evt.info = remoteCtrl;
                _this.notify('AsOnPrivilege', evt);
            });
            observer_1.default.subscribe('WbDocNew', function (data) {
                var evt = { result: true, info: "This is a new whiteboard document!" };
                util_1.default.info("client", "===WbDocNew" + JSON.stringify(data));
                if (data.value2 == 0) {
                    var wbInfo = {
                        number: "",
                        userid: data.value2,
                        docid: data.value1,
                        pageSize: 0,
                        currentPage: 0
                    };
                    _this._conf.addWbInfoList(wbInfo);
                }
                if (data.value1 != 0 && data.value2 != 0) {
                    var dataWBCanvas = document.getElementById("CloudEC:dataWBCanvas");
                    if (typeof dataWBCanvas === "undefined") {
                        util_1.default.error("client", "can't find CloudEC:dataWBCanvas");
                    }
                    else {
                        var height = dataWBCanvas.height;
                        var width = dataWBCanvas.width;
                        dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_SET_WB_DATA_RENDER, { type: "canvas", info: { canvas: dataWBCanvas, confHandle: data.confHandle, width: width, height: height } });
                        dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_WB_PAGE_CREATE, data.confHandle, data.value1, height, width);
                    }
                }
                _this.notify('WbDocNew', evt);
            });
            observer_1.default.subscribe('WbDocDel', function (data) {
                var evt = { result: true, info: "Close the whiteboard document" };
                var flag;
                var wbInfo;
                var wbInfoList = _this._conf.getWbInfoList();
                flag = wbInfoList.find(function (value) {
                    return data.value1 === value.docid;
                });
                if (flag != undefined) {
                    wbInfo = {
                        number: flag.number,
                        userid: flag.userid,
                        docid: data.value1,
                        pageSize: 0,
                        currentPage: 0
                    };
                    _this._conf.deleteWbInfoList(wbInfo);
                }
                util_1.default.info("client", "===WbDocDel" + JSON.stringify(data));
                _this.notify('WbDocDel', evt);
            });
            observer_1.default.subscribe('WbPageNew', function (data) {
                var evt = { result: true, info: "This is a new whiteboard document page!" };
                var flag;
                var wbInfo;
                var wbInfoList = _this._conf.getWbInfoList();
                flag = wbInfoList.find(function (value) {
                    return data.value1 === value.docid;
                });
                if (flag != undefined && data.value2 != 0) {
                    wbInfo = {
                        number: flag.number,
                        userid: flag.userid,
                        docid: data.value1,
                        pageSize: (flag.pageSize + 1),
                        currentPage: data.value2
                    };
                    _this._conf.updateWbInfoList(wbInfo);
                    dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_WB_SET_CURR_PAGE, data.confHandle, data.value1, data.value2);
                }
                util_1.default.info("client", "===WbPageNew" + JSON.stringify(data));
                _this.notify('WbPageNew', evt);
            });
            observer_1.default.subscribe('WbPageDel', function (data) {
                var evt = { result: true, info: { state: 0, description: "" } };
                var flag;
                var wbInfo;
                var wbInfoList = _this._conf.getWbInfoList();
                flag = wbInfoList.find(function (value) {
                    return data.value1 === value.docid;
                });
                if (flag != undefined) {
                    wbInfo = {
                        number: flag.number,
                        userid: flag.userid,
                        docid: data.value1,
                        pageSize: (flag.pageSize - 1),
                        currentPage: data.value2
                    };
                    _this._conf.updateWbInfoList(wbInfo);
                }
                if (data.value2 - 1 > 0) {
                    dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_WB_SET_CURR_PAGE, data.confHandle, data.value1, data.value2 - 1);
                }
                util_1.default.info("client", "===WbPageDel" + JSON.stringify(data));
                _this.notify('WbPageNew', evt);
            });
            observer_1.default.subscribe("AsOnSharingSession", function (data) {
                var dataConfHandle = _this._conf.getDataConfHandle();
                var evt = { result: true, info: "Participant status changes, please update the list of attendees" };
                var dataconfUserId = data.user_id;
                var attendeeListOrigin = new Array();
                var attendee;
                _this._conf.getAttendeeList(function (ret) {
                    attendeeListOrigin = ret.info;
                });
                attendee = attendeeListOrigin.find(function (value) {
                    return dataconfUserId === value.dataconfUserId;
                });
                if (dataconfUserId != null && attendee != undefined) {
                    if (1 == data.value1 && dataconfUserId != 0) {
                        if (1 == attendee.isSelf) {
                            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_AS_SET_SHARE_TYPE, dataConfHandle, 0);
                            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_AS_START, dataConfHandle);
                        }
                        attendee.sharingPermit = 1;
                    }
                    _this._conf.updateAttendeeList(attendee);
                }
                else if (dataconfUserId == 0) {
                    for (var i = 0; i < attendeeListOrigin.length; i++) {
                        attendeeListOrigin[i].sharingPermit = 0;
                        _this._conf.updateAttendeeList(attendeeListOrigin[i]);
                    }
                }
                _this.notify('UpdateAttendeeList', evt);
            });
            observer_1.default.subscribe("AsOnSharingState", function (data) {
                var evt = { result: true, info: "" };
                if (data.value2 == 2) {
                    evt.info = {
                        state: data.value2,
                        description: "The shared side starts sharing"
                    };
                }
                else if (data.value2 == 0) {
                    evt.info = {
                        state: data.value2,
                        description: "The screen sharing has ended"
                    };
                }
                else if (data.value2 == 1) {
                    evt.info = {
                        state: data.value2,
                        description: "Watch the viewing side"
                    };
                    var dataCanvas = document.getElementById("CloudEC:dataCanvas");
                    if (typeof dataCanvas === "undefined") {
                        util_1.default.error("client", "can't find CloudEC:dataCanvas");
                    }
                    else {
                        var height = dataCanvas.offsetHeight;
                        var width = dataCanvas.offsetWidth;
                        dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_SET_DATA_RENDER, { type: "canvas", info: { canvas: dataCanvas, confHandle: data.confHandle, width: width, height: height } });
                    }
                }
                _this.notify('AsOnSharingState', evt);
            });
            observer_1.default.subscribe("AsOnScreenData", function (data) {
                if (data.yuv == "") {
                    return;
                }
                var byteCharacters = atob(data.yuv);
                var byteArrays = [];
                for (var offset = 0; offset < byteCharacters.length; offset++) {
                    byteArrays[offset] = byteCharacters.charCodeAt(offset);
                }
                dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_SET_DATA_RENDER, { type: "data", info: { confHandle: data.confHandle, width: data.width, height: data.height, yuv: byteArrays } });
            });
            observer_1.default.subscribe("WbdrawDataNotify", function (data) {
                if (data.yuv == "") {
                    return;
                }
                var byteCharacters = atob(data.yuv);
                var byteArrays = [];
                for (var offset = 0; offset < byteCharacters.length; offset++) {
                    byteArrays[offset] = byteCharacters.charCodeAt(offset);
                }
                dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_SET_WB_DATA_RENDER, { type: "data", info: { confHandle: data.confHandle, width: data.width, height: data.height, yuv: byteArrays } });
            });
            observer_1.default.subscribe("ChatRecvMsg", function (data) {
                var evt = { result: true, info: "Received new message" };
                var time = util.formatDate(data.time);
                var chatMsg = {
                    fromUserName: data.fromUserName,
                    msgContent: data.lpMsg,
                    msgType: data.nMsgType,
                    sequenceNmuber: data.nSequenceNmuber,
                    time: time
                };
                evt.info = chatMsg;
                var attendeeListOrigin = new Array();
                var attendee;
                _this._conf.getAttendeeList(function (ret) {
                    attendeeListOrigin = ret.info;
                });
                for (var i = 0; i < attendeeListOrigin.length; i++) {
                    if (1 == attendeeListOrigin[i].isSelf) {
                        attendee = attendeeListOrigin[i];
                    }
                }
                if ("CloudEC_OpenShareScreen" == data.lpMsg) {
                    evt.info = "You have a sharing invitation";
                    _this.notify('SharedInComing', evt);
                }
                else if ("CloudEC_CloseShareScreen" == data.lpMsg) {
                    _this._conf.stopScreenSharing(attendee.dataconfUserId);
                }
                else {
                    _this.notify('ChatRecvMsg', evt);
                }
            });
        };
        Client.prototype.registerImEvent = function () {
            var _this = this;
            observer_1.default.subscribe("UserInfoChange", function (ret) {
                var retUserList = ret.info.user_list;
                var userInfo;
                var userList = new Array();
                if (!util.isUndefined(retUserList)) {
                    for (var i = 0; i < retUserList.length; i++) {
                        userInfo = {
                            staffID: retUserList[i].staff_id,
                            account: retUserList[i].account,
                            staffNO: retUserList[i].staff_no,
                            name: retUserList[i].name,
                            nativeName: retUserList[i].native_name,
                            qPinYin: retUserList[i].q_pin_yin,
                            gender: retUserList[i].gender,
                            birthday: retUserList[i].birthday,
                            age: retUserList[i].age,
                            bindNO: retUserList[i].bind_no,
                            mobile: retUserList[i].mobile,
                            homePhone: retUserList[i].home_phone,
                            officePhone: retUserList[i].office_phone,
                            shortPhone: retUserList[i].short_phone,
                            otherPhone: retUserList[i].other_phone,
                            voip: retUserList[i].voip,
                            ipPhone: retUserList[i].ip_phone,
                            fax: retUserList[i].fax,
                            email: retUserList[i].email,
                            webSite: retUserList[i].website,
                            signature: retUserList[i].signature,
                            desc: retUserList[i].desc,
                            address: retUserList[i].address,
                            imageID: retUserList[i].image_id,
                            postalcode: retUserList[i].postcode,
                            isSecrecy: retUserList[i].is_security,
                            title: retUserList[i].title,
                            deptID: retUserList[i].dept_id,
                            deptNameEn: retUserList[i].dept_name_en,
                            deptNameCn: retUserList[i].dept_name_cn,
                            imageSyncTime: retUserList[i].image_sync_time,
                            oldAccount: retUserList[i].old_account,
                            state: retUserList[i].state,
                            modifyTime: retUserList[i].modify_time,
                            contactID: 0,
                            extensions: ""
                        };
                        userList.push(userInfo);
                    }
                    var evt = { result: true, info: userList };
                    _this.notify('UserInfoChange', evt);
                }
            });
            observer_1.default.subscribe("AddFriend", function (ret) {
                var evt = { result: true, info: "" };
                var addFriendInfo = ret.info;
                var addFriendResult = {
                    account: addFriendInfo.account,
                    displayName: addFriendInfo.display_name,
                    serverMsgID: addFriendInfo.server_msg_id_str,
                };
                evt.info = addFriendResult;
                _this.notify('AddFriend', evt);
            });
            observer_1.default.subscribe("MsgSendAck", function (ret) {
                var evt = { result: true, info: "" };
                if (ret.info.server_chat_id == 0 || ret.info.server_chat_id_str == "0") {
                    evt = { result: false, info: "sending message failed!" };
                }
                else {
                    var msgSendAckInfo = ret.info;
                    var msgSendAckResult = {
                        origin: msgSendAckInfo.origin,
                        target: msgSendAckInfo.target,
                        utcStamp: msgSendAckInfo.utc_stamp,
                        chatID: msgSendAckInfo.chat_id,
                        serverChatID: msgSendAckInfo.server_chat_id_str,
                    };
                    evt.info = msgSendAckResult;
                }
                _this.notify('MsgSendAck', evt);
            });
            observer_1.default.subscribe("UnDeliver", function (ret) {
                var evt = { result: true, info: ret.info };
                _this.notify('UnDeliver', evt);
            });
            observer_1.default.subscribe("WithdrawResult", function (ret) {
                var evt = { result: true, info: "" };
                if (ret.info.timeout >= 120) {
                    evt = {
                        result: false,
                        info: "Information cannot be withdrawn for more than two minutes!"
                    };
                }
                else {
                    var withDrawInfo = ret.info;
                    var msgListArr = withDrawInfo.msg_list;
                    var msgList = new Array();
                    for (var key in msgListArr) {
                        if (msgListArr.hasOwnProperty(key)) {
                            var element = msgListArr[key];
                            msgList.push(element.str_msgid);
                        }
                    }
                    var withDrawResult = {
                        origin: withDrawInfo.origin,
                        target: withDrawInfo.target,
                        msgType: withDrawInfo.msgtype,
                        msgIdList: msgList,
                        timeout: withDrawInfo.timeout,
                        result: withDrawInfo.result,
                    };
                    evt.info = withDrawResult;
                }
                _this.notify('WithdrawResult', evt);
            });
            observer_1.default.subscribe("WithdrawNotify", function (ret) {
                var evt = { result: true, info: ret.info };
                var withDrawInfo = ret.info;
                var msgListArr = withDrawInfo.msg_list;
                var msgList = new Array();
                for (var key in msgListArr) {
                    if (msgListArr.hasOwnProperty(key)) {
                        var element = msgListArr[key];
                        msgList.push(element.str_msgid);
                    }
                }
                var withDrawNotify = {
                    origin: withDrawInfo.origin,
                    target: withDrawInfo.target,
                    msgType: withDrawInfo.msgtype,
                    serverChatID: withDrawInfo.str_unread_msg ? withDrawInfo.str_unread_msg : "0",
                    msgIdList: msgList,
                };
                evt.info = withDrawNotify;
                _this.notify('WithdrawNotify', evt);
            });
            observer_1.default.subscribe("CodeChat", function (ret) {
                var evt = { result: true, info: "" };
                var codeChatInfo = ret.info;
                var chatInfo = {
                    chatType: codeChatInfo.chat_type,
                    sourceFlag: codeChatInfo.source_flag,
                    contentType: codeChatInfo.content_type,
                    utcStamp: codeChatInfo.utc_stamp,
                    origin: codeChatInfo.origin,
                    target: codeChatInfo.target,
                    groupID: codeChatInfo.group_id,
                    content: codeChatInfo.content,
                    name: codeChatInfo.name,
                    regionID: codeChatInfo.region_id,
                    clientChatID: codeChatInfo.client_chat_id,
                    serverChatID: codeChatInfo.server_chat_id_str,
                    groupName: codeChatInfo.group_name,
                    mediaType: codeChatInfo.media_type,
                    deliverTime: codeChatInfo.deliver_time,
                    atUserInfoList: codeChatInfo.at_user_list,
                };
                evt.info = chatInfo;
                _this.notify('ChatNotify', evt);
            });
            observer_1.default.subscribe("ChatList", function (ret) {
                var evt = { result: true, info: "" };
                var chatListInfo = ret.info;
                var chatList;
                var chatInfoArr = new Array();
                for (var index = 0; chatListInfo.chat_list != null && index < chatListInfo.chat_list.length; index++) {
                    var element = chatListInfo.chat_list[index];
                    var chatInfo = {
                        chatType: element.chat_type,
                        sourceFlag: element.source_flag,
                        contentType: element.content_type,
                        utcStamp: element.utc_stamp,
                        origin: element.origin,
                        target: element.target,
                        groupID: element.group_id,
                        content: element.content,
                        name: element.name,
                        regionID: element.region_id,
                        clientChatID: element.client_chat_id,
                        serverChatID: element.server_chat_id_str,
                        groupName: element.group_name,
                        mediaType: element.media_type,
                        deliverTime: element.deliver_time,
                        atUserInfoList: new Array(),
                    };
                    chatInfoArr.push(chatInfo);
                }
                chatList = {
                    chatList: chatInfoArr,
                    total: chatListInfo.total,
                    maxMsgId: chatListInfo.max_msg_id_str,
                    minMsgId: chatListInfo.min_msg_id_str,
                    isAt: chatListInfo.is_at,
                };
                evt.info = chatList;
                _this.notify('ChatListNotify', evt);
            });
            observer_1.default.subscribe("SystemBulletin", function (ret) {
                var evt = { result: true, info: "" };
                var systemInfo = ret.info;
                var chatInfo = {
                    chatType: systemInfo.chat_type,
                    sourceFlag: systemInfo.source_flag,
                    contentType: systemInfo.content_type,
                    utcStamp: systemInfo.utc_stamp,
                    origin: systemInfo.origin,
                    target: systemInfo.target,
                    groupID: systemInfo.group_id,
                    content: systemInfo.content,
                    name: systemInfo.name,
                    regionID: systemInfo.region_id,
                    clientChatID: systemInfo.client_chat_id,
                    serverChatID: systemInfo.server_chat_id_str,
                    groupName: systemInfo.group_name,
                    mediaType: systemInfo.media_type,
                    deliverTime: systemInfo.deliver_time,
                    atUserInfoList: new Array(),
                };
                evt.info = chatInfo;
                _this.notify('SystemBulletin', evt);
            });
            observer_1.default.subscribe("SendImInput", function (ret) {
                var evt = { result: true, info: "" };
                var sendImInputInfo = ret.info;
                var EC_IMSendInputResult = {
                    account: sendImInputInfo.account,
                    status: sendImInputInfo.status,
                };
                evt.info = EC_IMSendInputResult;
                _this.notify('SendImInput', evt);
            });
            observer_1.default.subscribe("UserStatusList", function (ret) {
                var evt = { result: true, info: "" };
                var userStatusList = new Array();
                var userstatus_list = ret.info.userstatus_list;
                for (var index = 0; index < userstatus_list.length; index++) {
                    var userStatus = {
                        clientDesc: userstatus_list[index].client_desc,
                        clientType: userstatus_list[index].client_type,
                        desc: userstatus_list[index].desc,
                        origin: userstatus_list[index].origin,
                        status: userstatus_list[index].status,
                        extensions: ""
                    };
                    userStatusList.push(userStatus);
                }
                evt.info = { "userStatusList": userStatusList };
                _this.notify('UserStatusList', evt);
            });
            observer_1.default.subscribe("GroupDismiss", function (ret) {
                var evt = { result: true, info: "" };
                var data = ret.info;
                var phonelist = new Array();
                for (var index = 0; data.phone_list && index < data.phone_list.length; index++) {
                    var element = data.phone_list[index];
                    phonelist.push(element.phone);
                }
                var groupInfoChangeResult = {
                    groupID: data.group_id,
                    groupName: data.group_name,
                    adminAccount: data.admin_account,
                    memberAccount: data.member_account,
                    memberName: data.member_name,
                    serverMsgID: data.server_msg_id_str ? data.server_msg_id_str : "",
                    isInitGroupName: data.is_init_group_name,
                    phonelist: phonelist,
                    initInviteAccount: data.init_invite_account ? data.init_invite_account : "",
                };
                evt.info = groupInfoChangeResult;
                _this.notify('GroupDismiss', evt);
            });
            observer_1.default.subscribe("GroupInfoChange", function (ret) {
                var evt = { result: true, info: "" };
                var data = ret.info;
                var phonelist = new Array();
                for (var index = 0; data.phone_list && index < data.phone_list.length; index++) {
                    var element = data.phone_list[index];
                    phonelist.push(element.phone);
                }
                var groupInfoChangeResult = {
                    groupID: data.group_id,
                    groupName: data.group_name,
                    adminAccount: data.admin_account,
                    memberAccount: data.member_account,
                    memberName: data.member_name,
                    serverMsgID: data.server_msg_id_str ? data.server_msg_id_str : "",
                    isInitGroupName: data.is_init_group_name,
                    phonelist: phonelist,
                    initInviteAccount: data.init_invite_account ? data.init_invite_account : "",
                };
                evt.info = groupInfoChangeResult;
                _this.notify('GroupInfoChange', evt);
            });
            observer_1.default.subscribe("GroupOwnerChange", function (ret) {
                var evt = { result: true, info: "" };
                var data = ret.info;
                var phonelist = new Array();
                for (var index = 0; data.phone_list && index < data.phone_list.length; index++) {
                    var element = data.phone_list[index];
                    phonelist.push(element.phone);
                }
                var groupInfoChangeResult = {
                    groupID: data.group_id,
                    groupName: data.group_name,
                    adminAccount: data.admin_account,
                    memberAccount: data.member_account,
                    memberName: data.member_name,
                    serverMsgID: data.server_msg_id_str ? data.server_msg_id_str : "",
                    isInitGroupName: data.is_init_group_name,
                    phonelist: phonelist,
                    initInviteAccount: data.init_invite_account ? data.init_invite_account : "",
                };
                evt.info = groupInfoChangeResult;
                _this.notify('GroupOwnerChange', evt);
            });
            observer_1.default.subscribe("GroupMemberAdd", function (ret) {
                var evt = { result: true, info: "" };
                var data = ret.info;
                var phonelist = new Array();
                for (var index = 0; data.phone_list && index < data.phone_list.length; index++) {
                    var element = data.phone_list[index];
                    phonelist.push(element.phone);
                }
                var groupInfoChangeResult = {
                    groupID: data.group_id,
                    groupName: data.group_name,
                    adminAccount: data.admin_account,
                    memberAccount: data.member_account,
                    memberName: data.member_name,
                    serverMsgID: data.server_msg_id_str ? data.server_msg_id_str : "",
                    isInitGroupName: data.is_init_group_name,
                    phonelist: phonelist,
                    initInviteAccount: data.init_invite_account ? data.init_invite_account : "",
                };
                evt.info = groupInfoChangeResult;
                _this.notify('GroupMemberAdd', evt);
            });
            observer_1.default.subscribe("GroupMemberDel", function (ret) {
                var evt = { result: true, info: "" };
                var data = ret.info;
                var phonelist = new Array();
                for (var index = 0; data.phone_list && index < data.phone_list.length; index++) {
                    var element = data.phone_list[index];
                    phonelist.push(element.phone);
                }
                var groupInfoChangeResult = {
                    groupID: data.group_id,
                    groupName: data.group_name,
                    adminAccount: data.admin_account,
                    memberAccount: data.member_account,
                    memberName: data.member_name,
                    serverMsgID: data.server_msg_id_str ? data.server_msg_id_str : "",
                    isInitGroupName: data.is_init_group_name,
                    phonelist: phonelist,
                    initInviteAccount: data.init_invite_account ? data.init_invite_account : "",
                };
                evt.info = groupInfoChangeResult;
                _this.notify('GroupMemberDel', evt);
            });
            observer_1.default.subscribe("WasAddToGroup", function (ret) {
                var evt = { result: true, info: "" };
                var data = ret.info;
                var phonelist = new Array();
                for (var index = 0; data.phone_list && index < data.phone_list.length; index++) {
                    var element = data.phone_list[index];
                    phonelist.push(element.phone);
                }
                var groupInfoChangeResult = {
                    groupID: data.group_id,
                    groupName: data.group_name,
                    adminAccount: data.admin_account,
                    memberAccount: data.member_account,
                    memberName: data.member_name,
                    serverMsgID: data.server_msg_id_str ? data.server_msg_id_str : "",
                    isInitGroupName: data.is_init_group_name,
                    phonelist: phonelist,
                    initInviteAccount: data.init_invite_account ? data.init_invite_account : "",
                };
                evt.info = groupInfoChangeResult;
                _this.notify('WasAddToGroup', evt);
            });
            observer_1.default.subscribe("ReceiveInviteJoinGroup", function (ret) {
                var evt = { result: true, info: "" };
                var data = ret.info;
                var receiveJoinGroupResult = {
                    groupID: data.group_id,
                    groupName: data.group_name,
                    memberAccount: data.member_account,
                    memberName: data.member_name,
                    serverMsgID: data.server_msg_id_str,
                };
                evt.info = receiveJoinGroupResult;
                _this.notify('ReceiveInviteJoinGroup', evt);
            });
            observer_1.default.subscribe("ReceiveInviteToGroup", function (ret) {
                var evt = { result: true, info: "" };
                var data = ret.info;
                var receiveInvateGroupResult = {
                    groupID: data.group_id,
                    groupName: data.group_name,
                    adminAccount: data.admin_account,
                    adminName: data.admin_name,
                    serverMsgID: data.server_msg_id_str,
                };
                evt.info = receiveInvateGroupResult;
                _this.notify('ReceiveInviteToGroup', evt);
            });
            observer_1.default.subscribe("GroupOwnerInviteResult", function (ret) {
                var evt = { result: true, info: "" };
                var data = ret.info;
                var groupOwnerInviteResult = {
                    agreeInvite: data.agree_invite,
                    groupID: data.group_id,
                    groupName: data.group_name,
                    memberAccount: data.member_account,
                    memberName: data.member_name,
                };
                evt.info = groupOwnerInviteResult;
                _this.notify('GroupOwnerInviteResult', evt);
            });
            observer_1.default.subscribe("GroupKickout", function (ret) {
                var evt = { result: true, info: "" };
                var resultCode = ret.info.result_code;
                switch (resultCode) {
                    case 0:
                        evt = {
                            result: true,
                            info: "Exiting the fixed group successfully!"
                        };
                        break;
                    case 1:
                        evt = {
                            result: false,
                            info: "Failed to exit fixed group!"
                        };
                        break;
                    case 3:
                        evt = {
                            result: false,
                            info: "Account not exist!"
                        };
                        break;
                }
                _this.notify('GroupKickout', evt);
            });
            observer_1.default.subscribe("GroupLeaveResult", function (ret) {
                var evt = { result: true, info: "" };
                var resultCode = ret.info.result_code;
                switch (resultCode) {
                    case 0:
                        evt = {
                            result: true,
                            info: "Exiting the fixed group successfully!"
                        };
                        break;
                    case 1:
                        evt = {
                            result: false,
                            info: "Failed to exit fixed group!"
                        };
                        break;
                    case 3:
                        evt = {
                            result: false,
                            info: "Account not exist!"
                        };
                        break;
                }
                _this.notify('GroupLeaveResult', evt);
            });
        };
        Client.prototype.isLogin = function () {
            if (this._status === 1) {
                return;
            }
            else {
                Client.notifyErr(errorCode_1.EC_SDK_ERROR.LOGIN_STATUS_ERROR());
                throw "login status error,please login at first";
            }
        };
        Client.prototype.showVideo = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                var localView, remoteView;
                return __generator(this, function (_a) {
                    localView = document.getElementById("CloudEC:localCanvas");
                    remoteView = document.getElementById("CloudEC:remoteCanvas");
                    if ((typeof localView === "undefined") || (typeof remoteView === "undefined")) {
                        util_1.default.error("client", "can't find CloudEC:remoteCanvas and CloudEC:localCanvas");
                    }
                    dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CALL_SET_VIDEO_RENDER, localView, remoteView);
                    dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CALL_SET_LOCAL_VIDEOWH, localView.clientWidth, localView.clientHeight);
                    dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CALL_SET_REMOTE_VIDEOWH, remoteView.clientWidth, remoteView.clientHeight);
                    localView.style.display = "block";
                    remoteView.style.display = "block";
                    if (1 == serverConfig_1.CloudEC_SERVERCONFIG.IS_AUTO_ADAPT_FRAME) {
                        dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CMPT_GET_MEMORY_USAGE, 3, function (data) {
                            if (0 == data.result) {
                                _this.preMemoryUsage = data.memory_usage;
                                _this.pcMemory = data.total_memory;
                                util_1.default.info("client", "initiation memory usage:" + _this.preMemoryUsage + "  machine memory:" + data.total_memory);
                                if (_this.preMemoryUsage > 80) {
                                    Client.notifyErr({ result: false, info: { cmdId: 300000000, errorCode: 390000003, errorInfo: "Memory usage over 80%, please close the unrelated program!" } });
                                }
                                _this.delInterval();
                                _this.getInterval(10, 30000, _this.pcMemory);
                            }
                        });
                    }
                    return [2];
                });
            });
        };
        Client.prototype.displayVideo = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                var count_1;
                return __generator(this, function (_a) {
                    if (this.parentFrameHwnd == 0 && !this.isNativeWndExist) {
                        this.isNativeWndExist = true;
                        count_1 = 2;
                        dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CALL_NATIVEWND_INIT, function (data) {
                            if (0 == data.result) {
                                _this.parentFrameHwnd = data.param.frameHwnd;
                                util_1.default.info("client", "displayVideo parentFrameHwnd:" + _this.parentFrameHwnd);
                                if (_this.parentFrameHwnd != 0) {
                                    dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CALL_NATIVEWND_CREATE_WINDOW, count_1, _this.parentFrameHwnd, function (data) {
                                        if (0 == data.result) {
                                            _this.frameHwndList = data.param.hwndList;
                                            util_1.default.info("client", "displayVideo frameHwndList:" + JSON.stringify(_this.frameHwndList));
                                        }
                                    });
                                }
                            }
                        });
                    }
                    return [2];
                });
            });
        };
        Client.prototype.setVideoWindow = function (callId) {
            util_1.default.info("client", "setVideoWindow frameHwndList:" + JSON.stringify(this.frameHwndList));
            if (this.frameHwndList != null && this.frameHwndList.length > 0) {
                util_1.default.info("client", "setVideoWindow callID:" + callId);
                dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CALL_SET_VIDEO_WINDOW, callId, this.frameHwndList);
            }
        };
        Client.prototype.displayVideoEx = function (callId) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                var count_2;
                return __generator(this, function (_a) {
                    if (this.parentFrameHwnd == 0 && !this.isNativeWndExist) {
                        this.isNativeWndExist = true;
                        count_2 = 2;
                        dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CALL_NATIVEWND_INIT, function (data) {
                            if (0 == data.result) {
                                _this.parentFrameHwnd = data.param.frameHwnd;
                                util_1.default.info("client", "displayVideo parentFrameHwnd:" + _this.parentFrameHwnd);
                                if (_this.parentFrameHwnd != 0) {
                                    dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CALL_NATIVEWND_CREATE_WINDOW, count_2, _this.parentFrameHwnd, function (data) {
                                        if (0 == data.result) {
                                            _this.frameHwndList = data.param.hwndList;
                                            util_1.default.info("client", "displayVideo frameHwndList:" + JSON.stringify(_this.frameHwndList));
                                            if (_this.frameHwndList != null && _this.frameHwndList.length > 0) {
                                                util_1.default.info("client", "setVideoWindow callID:" + callId);
                                                dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CALL_SET_VIDEO_WINDOW, callId, _this.frameHwndList);
                                            }
                                        }
                                    });
                                }
                            }
                        });
                    }
                    return [2];
                });
            });
        };
        Client.prototype.closeVideo = function () {
            util_1.default.info("client", "closeVideo parentFrameHwnd:" + this.parentFrameHwnd);
            if (this.parentFrameHwnd != 0 && this.isNativeWndExist) {
                this.isNativeWndExist = false;
                dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CALL_NATIVEWND_DESTROY_WINDOW, this.parentFrameHwnd, this.frameHwndList);
                dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CALL_NATIVEWND_UNINIT, this.parentFrameHwnd);
                this.parentFrameHwnd = 0;
                delete this.frameHwndList;
            }
        };
        Client.prototype.delVideo = function () {
            var localView = document.getElementById("CloudEC:localCanvas");
            var remoteView = document.getElementById("CloudEC:remoteCanvas");
            if ((typeof localView === "undefined") || (typeof remoteView === "undefined")) {
                util_1.default.error("client", "can't find CloudEC:remoteCanvas and CloudEC:localCanvas");
            }
            localView.style.cssText = "position: absolute;left: 0px;top: 0px;width: 120px;height: 80px; z-index: 999;background: #c7c7c7;";
            remoteView.style.cssText = "position: absolute;left: 0px;top: 0px;width: 720px;height: 480px; z-index: 1;background: black;";
        };
        Client.prototype.resetVideoSize = function (videoSize) {
            return __awaiter(this, void 0, void 0, function () {
                var err, evt, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            err = { cmdId: 200000000, errorCode: 200000003, errorInfo: "parameter error" };
                            evt = { result: false, info: err };
                            this.isLogin();
                            if (util.isUndefined(videoSize.target) || !util.isBinaryNumber(videoSize.target)) {
                                Client.notifyErr(evt);
                                return [2];
                            }
                            if (util.isUndefined(videoSize.width) || util.isUndefined(videoSize.height)) {
                                Client.notifyErr(evt);
                                return [2];
                            }
                            if (!util.isInteger(videoSize.width) || !util.isInteger(videoSize.height)) {
                                Client.notifyErr(evt);
                                return [2];
                            }
                            _a = videoSize.target;
                            switch (_a) {
                                case 0: return [3, 1];
                                case 1: return [3, 3];
                            }
                            return [3, 5];
                        case 1: return [4, dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CALL_SET_LOCAL_VIDEOWH, videoSize.width, videoSize.height)];
                        case 2:
                            _b.sent();
                            return [3, 5];
                        case 3: return [4, dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CALL_SET_REMOTE_VIDEOWH, videoSize.width, videoSize.height)];
                        case 4:
                            _b.sent();
                            return [3, 5];
                        case 5: return [2];
                    }
                });
            });
        };
        Client.prototype.resetNativeWndSize = function (nativeWndParam) {
            return __awaiter(this, void 0, void 0, function () {
                var err;
                return __generator(this, function (_a) {
                    if (util.isUndefined(nativeWndParam) || !util.isIntegerRange(nativeWndParam.width, 0, 4096)
                        || !util.isIntegerRange(nativeWndParam.height, 0, 2048) || !util.isIntegerRange(nativeWndParam.xOffsetRate, 0, 100)
                        || !util.isIntegerRange(nativeWndParam.yOffsetRate, 0, 100)) {
                        err = errorCode_1.EC_SDK_ERROR.CONF_PARAM_INVALID_ERROR("nativeWndParam");
                        Client.notifyErr(err);
                        return [2];
                    }
                    if (this.parentFrameHwnd) {
                        dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CALL_RESET_NATIVEWND_SIZE, this.parentFrameHwnd, nativeWndParam);
                    }
                    return [2];
                });
            });
        };
        Client.prototype.searchUserInfo = function (queryParam, callback) {
            this._eaddr.searchUserInfo(queryParam, callback);
        };
        Client.prototype.searchDeptInfo = function (deptId, callback) {
            this._eaddr.searchDeptInfo(deptId, callback);
        };
        Client.prototype.getMediaDevice = function (deviceType, callback) {
            this._device.getMediaDevice(deviceType, callback);
        };
        Client.prototype.setMediaDevice = function (deviceType, index) {
            this._device.setMediaDevice(deviceType, index);
        };
        Client.prototype.setVoiceVol = function (deviceType, value) {
            this._device.setVoiceVol(deviceType, value);
        };
        Client.prototype.getVoiceVol = function (deviceType, callback) {
            this._device.getVoiceVol(deviceType, callback);
        };
        Client.prototype.addAttendee = function (attendees) {
            this._conf.addAttendee(attendees);
        };
        Client.prototype.delAttendee = function (attendee) {
            this._conf.delAttendee(attendee);
        };
        Client.prototype.muteConference = function (mute) {
            this._conf.muteConference(mute);
        };
        Client.prototype.muteAttendee = function (attendee, mute) {
            this._conf.muteAttendee(attendee, mute);
        };
        Client.prototype.requestChairman = function (chairmanPwd) {
            this._conf.requestChairman(chairmanPwd);
        };
        Client.prototype.releaseChairman = function () {
            this._conf.releaseChairman();
        };
        Client.prototype.handup = function (attendee) {
            this._conf.handup(attendee);
        };
        Client.prototype.setConfMode = function (mode) {
            this._conf.setConfMode(mode);
        };
        Client.prototype.setConfMixedPicture = function (imageType, attendees) {
            this._conf.setConfMixedPicture(imageType, attendees);
        };
        Client.prototype.broadcastAttendee = function (isBroad, attendee) {
            this._conf.broadcastAttendee(isBroad, attendee);
        };
        Client.prototype.watchAttendee = function (attendee) {
            this._conf.watchAttendee(attendee);
        };
        Client.prototype.leaveConf = function () {
            this._conf.leaveConf();
        };
        Client.prototype.endConf = function () {
            this._conf.endConf();
        };
        Client.prototype.getAttendeeList = function (callback) {
            this._conf.getAttendeeList(callback);
        };
        Client.prototype.getConfInfo = function (callback) {
            this._conf.getConfInfo(callback);
        };
        Client.prototype.startScreenSharing = function (userid, extensions) {
            this._conf.startScreenSharing(userid, extensions);
        };
        Client.prototype.stopScreenSharing = function (userid) {
            this._conf.stopScreenSharing(userid);
        };
        Client.prototype.requestRemoteCtrl = function (privilege) {
            this._conf.requestRemoteCtrl(privilege);
        };
        Client.prototype.setRemoteCtrl = function (privilege, action, userid) {
            this._conf.setRemoteCtrl(privilege, action, userid);
        };
        Client.prototype.answerRemoteCtrl = function (userid, accept) {
            this._conf.answerRemoteCtrl(userid, accept);
        };
        Client.prototype.sendMessage = function (messageParam) {
            this._conf.sendMessage(messageParam);
        };
        Client.prototype.answerConference = function (accept) {
            this._conf.answerConference(accept);
        };
        Client.prototype.answerScreenSharing = function (accept) {
            this._conf.answerScreenSharing(accept);
        };
        Client.prototype.videoMute = function (bMute) {
            if (!this._call) {
                this._call = new call_1.default();
            }
            this._call.videoMute(bMute, this.callID);
        };
        Client.prototype.micMute = function (bMute) {
            if (!this._call) {
                this._call = new call_1.default();
            }
            this._call.micMute(bMute, this.callID);
        };
        Client.prototype.transfer2Conf = function (confParam) {
            var attendees = new Array();
            var confParamTemp;
            var callType = this._call.getCallType();
            if (util.isUndefined(confParam)) {
                var member = { number: "", name: "", smsPhone: "", email: "", autoInvite: 0, role: 0, extensions: "" };
                attendees.push(member);
                confParamTemp = {
                    topic: "",
                    isVideo: callType,
                    attendees: attendees,
                    autoRecord: 0,
                    language: 1,
                    extensions: "",
                };
            }
            else {
                confParamTemp = {
                    topic: confParam.topic ? confParam.topic : "",
                    isVideo: confParam.isVideo ? confParam.isVideo : callType,
                    attendees: confParam.attendees,
                    autoRecord: confParam.autoRecord ? confParam.autoRecord : 0,
                    language: confParam.language ? confParam.language : 1,
                    extensions: confParam.extensions ? confParam.extensions : "",
                };
            }
            var err = { cmdId: 400000000, errorCode: 400000002, errorInfo: "general error" };
            var evt = { result: false, info: err };
            var callback = function (data) {
                if (!data.result) {
                    Client.notifyErr(evt);
                }
            };
            this._call.transfer2Conf(confParamTemp, this.callID, callback);
        };
        Client.prototype.makeCall = function (calleeNumber, isVideo, callback) {
            var err = { cmdId: 200000000, errorCode: 200000003, errorInfo: "parameter error" };
            var evt = { result: false, info: err };
            this.isLogin();
            if (util.isUndefined(calleeNumber) || util.isUndefined(isVideo)) {
                Client.notifyErr(evt);
                return;
            }
            if (util.isUndefined(callback) || !util.isFunction(callback)) {
                Client.notifyErr(evt);
                return;
            }
            var call = new call_1.default();
            call.setCallee(calleeNumber);
            call.setCallStyle(1);
            var callType = isVideo ? 1 : 0;
            call.setCallType(callType);
            this._call = call;
            this._call.makeCall(calleeNumber, callType, callback);
            if (isVideo) {
                if (serverConfig_1.CloudEC_SERVERCONFIG.VIDEO_DISPLAY_MODE == 0) {
                    this.showVideo();
                }
                else {
                }
            }
        };
        Client.prototype.answerCall = function (accept, isVideo) {
            var _this = this;
            this.isLogin();
            if (util.isUndefined(accept)) {
                var err = errorCode_1.EC_SDK_ERROR.CALL_PARAM_INVALID_ERROR("accept");
                Client.notifyErr(err);
                return;
            }
            if (this.playHandle >= 0) {
                dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CALL_STOP_PLAY_MEDIA_FILE, this.playHandle, function (data) {
                    if (data.result == 0) {
                        _this.playHandle = -1;
                    }
                });
            }
            var isVideoCall = this._call.getCallType();
            if (this._call && accept) {
                if (isVideo && (isVideoCall == 1)) {
                    this._call.acceptCall(isVideo);
                    if (serverConfig_1.CloudEC_SERVERCONFIG.VIDEO_DISPLAY_MODE == 0) {
                        this.showVideo();
                    }
                    else {
                    }
                }
                else {
                    this._call.acceptCall(false);
                }
            }
            else {
                this._call.rejectCall();
            }
        };
        Client.prototype.hangup = function () {
            var _this = this;
            if (this.playHandle >= 0) {
                dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CALL_STOP_PLAY_MEDIA_FILE, this.playHandle, function (data) {
                    if (data.result == 0) {
                        _this.playHandle = -1;
                    }
                });
            }
            if (this._call) {
                this._call.rejectCall();
            }
        };
        Client.prototype.sendDTMF = function (dmtfNo) {
            var err = { cmdId: 200000000, errorCode: 200000003, errorInfo: "parameter error" };
            var evt = { result: false, info: err };
            this.isLogin();
            if (!dmtfNo || /[^0-9*#]/.test(dmtfNo)) {
                Client.notifyErr(evt);
                return;
            }
            this._call.dialDTMF(dmtfNo);
        };
        Client.prototype.switchAudioCall = function (toAudioCall) {
            var err = { cmdId: 200000000, errorCode: 200000003, errorInfo: "parameter error" };
            var evt = { result: false, info: err };
            this.isLogin();
            if (util.isUndefined(toAudioCall)) {
                Client.notifyErr(evt);
                return;
            }
            if (toAudioCall) {
                this._call.tans2Audio();
            }
            else {
                this._call.tans2Video();
                if (serverConfig_1.CloudEC_SERVERCONFIG.VIDEO_DISPLAY_MODE == 1) {
                }
            }
        };
        Client.prototype.answerSwitch = function (accept) {
            var err = { cmdId: 200000000, errorCode: 200000003, errorInfo: "parameter error" };
            var evt = { result: false, info: err };
            this.isLogin();
            if (util.isUndefined(accept)) {
                Client.notifyErr(evt);
                return;
            }
            this._call.answerSwitch(accept);
            if (accept) {
                if (serverConfig_1.CloudEC_SERVERCONFIG.VIDEO_DISPLAY_MODE == 0) {
                    this.showVideo();
                }
                else {
                }
            }
        };
        Client.prototype.setIPTService = function (type, number) {
            var err = { cmdId: 200000000, errorCode: 200000003, errorInfo: "parameter error" };
            var evt = { result: false, info: err };
            if (util.isUndefined(number) || util.isUndefined(type) || !util.isInteger(type)) {
                Client.notifyErr(evt);
                return;
            }
            if (type < 1 || (type > 4 && type < 25) || type > 32) {
                Client.notifyErr(evt);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CALL_SET_IPT_SERVICE, type, number);
        };
        Client.prototype.blindTransfer = function (transToNumber) {
            var err = { cmdId: 200000000, errorCode: 200000003, errorInfo: "parameter error" };
            var evt = { result: false, info: err };
            if (util.isUndefined(transToNumber)) {
                Client.notifyErr(evt);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CALL_BLIND_TRANSFER, this.callID, transToNumber, function (data) {
                if (!data.result) {
                    err = { cmdId: 200000000, errorCode: 290000005, errorInfo: "video call without this feature, please convert to audio call" };
                    evt.info = err;
                    Client.notifyErr(evt);
                }
            });
        };
        Client.prototype.startPlayMedia = function (loops, playFile, callback) {
            var err = { cmdId: 200000000, errorCode: 200000003, errorInfo: "parameter error" };
            var evt = { result: false, info: err };
            if (util.isUndefined(loops) || util.isUndefined(playFile) || !util.isInteger(loops)) {
                Client.notifyErr(evt);
                return;
            }
            if (util.isUndefined(callback) || !util.isFunction(callback)) {
                Client.notifyErr(evt);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CALL_START_PLAY_MEDIA_FILE, loops, playFile, function (data) {
                if (data.result == 0) {
                    evt.result = true;
                    evt.info = {
                        playHandle: data.param.play_handle,
                    };
                    callback(evt);
                }
                else {
                    evt.info = { cmdId: 200000000, errorCode: 290000003, errorInfo: "failed to start playing the file" };
                    Client.notifyErr(evt);
                }
            });
        };
        Client.prototype.stopPlayMedia = function (handle) {
            var err = { cmdId: 200000000, errorCode: 200000003, errorInfo: "parameter error" };
            var evt = { result: false, info: err };
            if (util.isUndefined(handle)) {
                Client.notifyErr(evt);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CALL_STOP_PLAY_MEDIA_FILE, handle, function (data) {
                if (data.result == 0) {
                    evt.result = true;
                    evt.info = "Stop playing the file successfully";
                }
                else {
                    evt.info = { cmdId: 200000000, errorCode: 290000004, errorInfo: "stopped playing file does not exist" };
                    Client.notifyErr(evt);
                }
            });
        };
        Client.prototype.getUserInfo = function (account, callback) {
            this.isLogin();
            this._contact.getUserInfo(account, callback);
        };
        Client.prototype.setUserInfo = function (userInfo, callback) {
            this.isLogin();
            this._contact.setUserInfo(userInfo, callback);
        };
        Client.prototype.getContactlist = function (isSyncAll, timestamp, callback) {
            this.isLogin();
            this._contact.getContactlist(isSyncAll, timestamp, callback);
        };
        Client.prototype.addFriend = function (account, groupID, displayName, callback) {
            this.isLogin();
            this._contact.addFriend(account, groupID, displayName, callback);
        };
        Client.prototype.addContact = function (contactInfo, groupID, callback) {
            this.isLogin();
            this._contact.addContact(contactInfo, groupID, callback);
        };
        Client.prototype.modContact = function (contactInfo, callback) {
            this.isLogin();
            this._contact.modContact(contactInfo, callback);
        };
        Client.prototype.delContact = function (contactID, groupID, callback) {
            this.isLogin();
            this._contact.delContact(contactID, groupID, callback);
        };
        Client.prototype.addContactGroup = function (name, index, callback) {
            this.isLogin();
            this._contact.addContactGroup(index, name, callback);
        };
        Client.prototype.modContactGroup = function (groupID, name, index, callback) {
            this.isLogin();
            this._contact.modContactGroup(groupID, index, name, callback);
        };
        Client.prototype.delContactGroup = function (groupID, callback) {
            this.isLogin();
            this._contact.delContactGroup(groupID, callback);
        };
        Client.prototype.moveContact = function (contactID, oldGroupID, newGroupID, type, callback) {
            this.isLogin();
            this._contact.moveContact(contactID, oldGroupID, newGroupID, type, callback);
        };
        Client.prototype.updateGroupListOrder = function (groupIDList, callback) {
            this.isLogin();
            this._contact.updateGroupListOrder(groupIDList, callback);
        };
        Client.prototype.addGroup = function (groupInfo, callback) {
            this.isLogin();
            this._group.addGroup(groupInfo, callback);
        };
        Client.prototype.modGroup = function (groupInfo, callback) {
            this.isLogin();
            this._group.modGroup(groupInfo, callback);
        };
        Client.prototype.delGroup = function (groupId, callback) {
            this.isLogin();
            this._group.delGroup(groupId, callback);
        };
        Client.prototype.joinGroup = function (joinGroupParam, callback) {
            this.isLogin();
            this._group.joinGroup(joinGroupParam, callback);
        };
        Client.prototype.leaveGroup = function (groupId, account, flag, callback) {
            this.isLogin();
            this._group.leaveGroup(groupId, account, flag, callback);
        };
        Client.prototype.approvalGroup = function (approvalGroupParam, callback) {
            this.isLogin();
            this._group.approvalGroup(approvalGroupParam, callback);
        };
        Client.prototype.searchGroup = function (searchGroupParam, callback) {
            this.isLogin();
            this._group.searchGroup(searchGroupParam, callback);
        };
        Client.prototype.getGroupDetail = function (groupId, callback) {
            this.isLogin();
            this._group.getGroupDetail(groupId, callback);
        };
        Client.prototype.getGroupMembers = function (groupId, isSyncAll, timestamp, callback) {
            this.isLogin();
            this._group.getGroupMembers(groupId, isSyncAll, timestamp, callback);
        };
        Client.prototype.transferGroup = function (groupId, account, callback) {
            this.isLogin();
            this._group.transferGroup(groupId, account, callback);
        };
        Client.prototype.setGroupMsgPromptPolicy = function (groupId, msgpolicyType, callback) {
            this.isLogin();
            this._group.setGroupMsgPromptPolicy(groupId, msgpolicyType, callback);
        };
        Client.prototype.setDisgroupPolicy = function (groupId, opType, callback) {
            this.isLogin();
            this._group.setDisgroupPolicy(groupId, opType, callback);
        };
        Client.prototype.publishStatus = function (status, callback) {
            this.isLogin();
            this._presence.publishStatus(status, callback);
        };
        Client.prototype.detectUserStatus = function (accountList, callback) {
            this.isLogin();
            this._presence.detectUserStatus(accountList, callback);
        };
        Client.prototype.sendIMMessage = function (messageSendParam, callback) {
            this.isLogin();
            this._message.sendIMMessage(messageSendParam, callback);
        };
        Client.prototype.notifyImInputting = function (account, type) {
            this.isLogin();
            this._message.notifyImInputting(account, type);
        };
        Client.prototype.withDrawMessage = function (messageWithDrawParam, callback) {
            this.isLogin();
            this._message.withDrawMessage(messageWithDrawParam, callback);
        };
        Client.prototype.setReadMessage = function (messageReadList, callback) {
            this.isLogin();
            this._message.setReadMessage(messageReadList, callback);
        };
        Client.prototype.deleteMessage = function (deleteMessageParam, callback) {
            this.isLogin();
            this._message.deleteMessage(deleteMessageParam, callback);
        };
        Client.prototype.queryHistoryMessage = function (queryHistoryMessageParam, callback) {
            this.isLogin();
            this._message.queryHistoryMessage(queryHistoryMessageParam, callback);
        };
        Client.prototype.getInterval = function (timeInterval, checkInterval, pcMemory) {
            var _this = this;
            var cpuUsage = 0;
            var memoryUsage = 0;
            var memoryUsageMax = 90;
            var memoryUsageMin = 55;
            var memoryPercentage = 2;
            if (pcMemory == 0) {
                util_1.default.error("client", "memory error,Please check the memory");
                return;
            }
            switch (pcMemory) {
                case 4:
                    memoryUsageMax = 90;
                    memoryUsageMin = 55;
                    memoryPercentage = 3;
                    break;
                case 8:
                    memoryUsageMax = 93;
                    memoryUsageMin = 65;
                    memoryPercentage = 2;
                    break;
                case 16:
                    memoryUsageMax = 95;
                    memoryUsageMin = 75;
                    memoryPercentage = 1;
                    break;
                case 32:
                    memoryUsageMax = 97;
                    memoryUsageMin = 80;
                    memoryPercentage = 0.5;
                    break;
                default:
                    memoryUsageMax = 90;
                    memoryUsageMin = 55;
                    memoryPercentage = 3;
            }
            util_1.default.info("client", " memoryUsageMax:" + memoryUsageMax + "  memoryUsageMin:" + memoryUsageMin + "  memoryPercentage:" + memoryPercentage);
            this.timer = setInterval(function () {
                _this.isLogin();
                dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CMPT_GET_MEMORY_USAGE, timeInterval, function (data) {
                    util_1.default.info("client", "current cpu data:" + JSON.stringify(data));
                    if (0 == data.result) {
                        memoryUsage = data.memory_usage;
                        util_1.default.info("client", "current memory usage:" + memoryUsage);
                        if (memoryUsage > memoryUsageMax && (memoryUsage - _this.preMemoryUsage) > memoryPercentage) {
                            if (_this.currentFrame <= 5) {
                                _this.currentFrame = _this.currentFrame + 1;
                                dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_SET_DROP_FRAME, _this.currentFrame);
                                util_1.default.info("client", "start dropping frame current frame rate:" + _this.currentFrame);
                            }
                            else {
                                util_1.default.warn("client", "poor machine performance, it is recommended to close the video!");
                                dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_SET_DROP_FRAME, 999999999);
                            }
                        }
                        if (memoryUsage < memoryUsageMin && _this.currentFrame >= serverConfig_1.CloudEC_SERVERCONFIG.DROP_FRAME_COUNT) {
                            _this.currentFrame = (_this.currentFrame > 5 ? 5 : _this.currentFrame) - 1;
                            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_SET_DROP_FRAME, _this.currentFrame);
                            util_1.default.info("client", "start frame current frame rate:" + _this.currentFrame);
                        }
                        _this.preMemoryUsage = data.memory_usage;
                    }
                });
            }, checkInterval);
            util_1.default.info("client", "Start timer:" + this.timer);
        };
        Client.prototype.delInterval = function () {
            if (this.timer != 0) {
                util_1.default.info("client", "Turn off the timer:" + this.timer);
                clearInterval(this.timer);
                this.timer = 0;
            }
        };
        Client.prototype.sipDeregisterAnonyConf = function () {
            var cloudEC_loginInfo = sessionStorage.cloudEC_loginInfo;
            var loginInfo = JSON.parse(cloudEC_loginInfo);
            var isTempUser = loginInfo.isTempUser;
            if (isTempUser == 1) {
                dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_SIP_DEREGISTER_ANONYCONF);
                delete this._call;
                delete this._conf;
                this._status = 0;
            }
        };
        Client._listeners = {};
        return Client;
    }());
    exports.default = Client;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SDK_ERROR_CODE = {
        LOGIN_ERR_NO_INPUT: {
            ERROR_ID: "",
            DISCRIPTION: "auth parameter is null",
            ACTION: "please input auth info"
        },
        LOGIN_ERR_GENERAL: {
            ERROR_ID: 1,
            DISCRIPTION: "LOGIN_ERR_BEGIN",
            ACTION: "How to fix it"
        }
    };
    exports.UPORTAL_LOGIN_ERROR = {
        LOGIN_ERR_BEGIN: 0,
        LOGIN_ERR_GENERAL: 1,
        LOGIN_ERR_PARAM_ERROR: 2,
        LOGIN_ERR_TIMEOUT: 3,
        LOGIN_ERR_MEM_ERROR: 4,
        LOGIN_ERR_XML_ERROR: 5,
        LOGIN_ERR_PARSE_PTKT_ERROR: 6,
        LOGIN_ERR_DNS_ERROR: 7,
        LOGIN_ERR_REQUEST_FAILED: 8,
        LOGIN_ERR_AUTH_FAILED: 9,
        LOGIN_ERR_SN_FAILED: 10,
        LOGIN_ERR_SERVICE_ERROR: 11,
        LOGIN_ERR_ACCOUNT_LOCKED: 12,
        LOGIN_ERR_TIMER_ERROR: 13,
        LOGIN_ERR_WRONG_SERVERTYPE: 14,
        LOGIN_ERR_WRONG_SERVERVERSION: 15,
        LOGIN_ERR_INVALID_URL: 16,
        LOGIN_ERR_SEARCH_SERVER_FAIL: 17,
        LOGIN_ERR_START_REFRESH_FAIL: 18
    };
    exports.EADDR_ERROR = {
        EADDR_TOKEN_INVALIED: 7
    };
    exports.ESERVER_LOGIN_ERROR = {
        IM_E_LOGING_RESULT_TIMEOUT: -100,
        IM_E_LOGING_RESULT_SERVERNOTALLOW: -2,
        IM_E_LOGING_RESULT_INTERNAL_ERROR: -1,
        IM_E_LOGING_RESULT_SUCCESS: 0,
        IM_E_LOGING_RESULT_FAILED: 1,
        IM_E_LOGING_RESULT_PASSWORD_ERROR: 2,
        IM_E_LOGING_RESULT_ACCOUNT_NOT_EXIST: 3,
        IM_E_LOGING_RESULT_ALREADY_LOGIN: 4,
        IM_E_LOGING_RESULT_ACCOUNT_LOCKED: 5,
        IM_E_LOGING_RESULT_NEED_NEW_VERSION: 6,
        IM_E_LOGING_RESULT_NOT_ACTIVE: 7,
        IM_E_LOGING_RESULT_ACCOUNT_SUSPEND: 8,
        IM_E_LOGING_RESULT_ACCOUNT_EXPIRE: 9,
        IM_E_LOGING_RESULT_DECRYPT_FAILED: 10,
        IM_E_LOGING_RESULT_CERT_DOWNLOAD_FAILED: 11,
        IM_E_LOGING_RESULT_CERT_VALIDATE_FAILED: 12,
        IM_E_LOGING_RESULT_DNS_ERROR: 13,
        IM_E_LOGING_RESULT_SYSTEM_ERROR: 14,
        IM_E_LOGING_RESULT_TICKET_EXPIRE: 15,
        IM_E_LOGING_RESULT_TICKET_NOT_EXIST: 16,
        IM_E_LOGING_RESULT_TICKET_SUSPEND: 17,
        IM_E_LOGING_RESULT_TICKET_ERROR: 18,
        IM_E_LOGING_RESULT_TICKET_FLUID_EXCEED: 19,
        IM_E_LOGING_RESULT_TICKET_FLUID_ERROR: 20,
        IM_E_LOGING_RESULT_TICKET_REDIRECT_ERROR: 21
    };
    exports.CONFERENCE_BOOK_ERROR = {};
    exports.CONFERENCE_JOIN_ERROR = {
        CONF_JOIN_ACCESSNUM_ERROR: 90000001,
    };
    exports.CONFERENCE_CTRL_ERROR = {};
    exports.DATACONF_BOOK_ERROR = {};
    exports.DATACONF_JOIN_ERROR = {};
    exports.DATACONF_CTRL_ERROR = {};
    exports.EC_SDK_ERROR = {
        WEBSOCKET_IS_CLOSED: function (name) {
            return { result: false, info: { cmdId: undefined, errorCode: 900000001, errorInfo: name + " websocket has been closed, please reopen" } };
        },
        OBJECT_INIT_FAILED: function (name) {
            return { result: false, info: { cmdId: undefined, errorCode: 900000002, errorInfo: name + " initialize failed" } };
        },
        PARAM_TYPE_ERROR: function (name) {
            return { result: false, info: { cmdId: undefined, errorCode: 900000003, errorInfo: "param " + name + " type error" } };
        },
        PARAM_INVALID_ERROR: function (name) {
            return { result: false, info: { cmdId: undefined, errorCode: 900000004, errorInfo: "param " + name + " is invalid" } };
        },
        LOGIN_STATUS_ERROR: function () {
            return { result: false, info: { cmdId: undefined, errorCode: 900000005, errorInfo: "login status error, please login first" } };
        },
        OBJECT_NOT_EXISTS: function (name) {
            return { result: false, info: { cmdId: undefined, errorCode: 900000006, errorInfo: name + " object does not exists" } };
        },
        PARAM_RANGE_ERROR: function (name, minValue, maxValue) {
            return { result: false, info: { cmdId: undefined, errorCode: 900000007, errorInfo: name + " less than " + minValue + " or bigger than " + maxValue } };
        },
        ALREADY_IN_CONF: function () {
            return { result: false, info: { cmdId: undefined, errorCode: 900000008, errorInfo: "already in conference or call" } };
        },
        USER_ROLE_ERROR: function (name) {
            return { result: false, info: { cmdId: undefined, errorCode: 900000009, errorInfo: "cannot operate \'name\' to user, due to his role." } };
        },
        CONF_STATE_ERROR: function () {
            return { result: false, info: { cmdId: undefined, errorCode: 900000010, errorInfo: "conference state error" } };
        },
        CONF_SOCKET_ERROR: function (info) {
            return { result: false, info: { cmdId: 300000000, errorCode: 390000002, errorInfo: info } };
        },
        CONF_CHAT_ERROR_INVALIDUSERID: function () {
            return { result: false, info: { cmdId: 400000000, errorCode: 400001002, errorInfo: "Invalid user" } };
        },
        DATACONF_PARAM_INVALID_ERROR: function (name) {
            return { result: false, info: { cmdId: 400000000, errorCode: 490000001, errorInfo: "param " + name + " is invalid" } };
        },
        DATACONF_PARAM_TYPE_ERROR: function (name) {
            return { result: false, info: { cmdId: 400000000, errorCode: 490000002, errorInfo: "param " + name + " type error" } };
        },
        CALL_PARAM_INVALID_ERROR: function (name) {
            return { result: false, info: { cmdId: 200000000, errorCode: 200000003, errorInfo: "param " + name + " is invalid" } };
        },
        CONF_PARAM_INVALID_ERROR: function (name) {
            return { result: false, info: { cmdId: 300000000, errorCode: 300000002, errorInfo: "param " + name + " is invalid" } };
        },
        EADDR_PARAM_INVALID_ERROR: function (name) {
            return { result: false, info: { cmdId: 600000000, errorCode: 600000002, errorInfo: "param " + name + " is invalid" } };
        },
        IM_LOGIN_ERROR: function (cmdid, errorCode) {
            return { result: false, info: { cmdId: cmdid, errorCode: errorCode, errorInfo: "im login failed" } };
        },
        IM_PARAM_INVALID_ERROR: function (cmdid, errorCode, name) {
            return { result: false, info: { cmdId: cmdid, errorCode: errorCode, errorInfo: "param " + name + " is invalid" } };
        },
    };
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__(15);
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),
/* 26 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var fails = __webpack_require__(4);

module.exports = function (method, arg) {
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call
    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);
  });
};


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, util_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Observer = (function () {
        function Observer() {
        }
        Observer.subscribe = function (topic, func) {
            if (!Observer.topics[topic]) {
                Observer.topics[topic] = [];
            }
            var token = ++Observer.subUid;
            Observer.topics[topic].push({ token: token, func: func });
            util_1.default.info("observer", 'subscribe topic = ' + JSON.stringify(topic) + ', subUid = ' + token);
            return token;
        };
        Observer.unsubscribe = function (token) {
            for (var m in Observer.topics) {
                if (Observer.topics[m]) {
                    for (var i = 0; i < Observer.topics[m].length; ++i) {
                        if (Observer.topics[m][i].token === token) {
                            Observer.topics[m].splice(i, 1);
                            return true;
                        }
                    }
                }
            }
            return false;
        };
        Observer.unsubsribleAll = function () {
            for (var m in Observer.topics) {
                if (Observer.topics[m]) {
                    for (var i = 0; i < Observer.topics[m].length; ++i) {
                        Observer.topics[m].splice(i, 1);
                    }
                }
            }
        };
        Observer.publish = function (topic) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            if (!Observer.topics[topic]) {
                return false;
            }
            for (var i = 0; i < Observer.topics[topic].length; i++) {
                (_a = Observer.topics[topic][i]).func.apply(_a, args);
            }
            return true;
            var _a;
        };
        Observer.topics = {};
        Observer.subUid = -1;
        return Observer;
    }());
    exports.default = Observer;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 29 */
/***/ (function(module, exports) {

var core = module.exports = { version: '2.5.1' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(5);
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};


/***/ }),
/* 31 */
/***/ (function(module, exports) {

// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};


/***/ }),
/* 32 */
/***/ (function(module, exports) {

// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

// most Object methods by ES6 should accept primitives
var $export = __webpack_require__(0);
var core = __webpack_require__(29);
var fails = __webpack_require__(4);
module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
};


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx = __webpack_require__(25);
var IObject = __webpack_require__(56);
var toObject = __webpack_require__(10);
var toLength = __webpack_require__(9);
var asc = __webpack_require__(92);
module.exports = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || asc;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IObject(O);
    var f = ctx(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      val = self[index];
      res = f(val, index, O);
      if (TYPE) {
        if (IS_MAP) result[index] = res;   // map
        else if (res) switch (TYPE) {
          case 3: return true;             // some
          case 5: return val;              // find
          case 6: return index;            // findIndex
          case 2: result.push(val);        // filter
        } else if (IS_EVERY) return false; // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

if (__webpack_require__(7)) {
  var LIBRARY = __webpack_require__(42);
  var global = __webpack_require__(3);
  var fails = __webpack_require__(4);
  var $export = __webpack_require__(0);
  var $typed = __webpack_require__(69);
  var $buffer = __webpack_require__(98);
  var ctx = __webpack_require__(25);
  var anInstance = __webpack_require__(48);
  var propertyDesc = __webpack_require__(40);
  var hide = __webpack_require__(17);
  var redefineAll = __webpack_require__(50);
  var toInteger = __webpack_require__(32);
  var toLength = __webpack_require__(9);
  var toIndex = __webpack_require__(126);
  var toAbsoluteIndex = __webpack_require__(44);
  var toPrimitive = __webpack_require__(30);
  var has = __webpack_require__(16);
  var classof = __webpack_require__(58);
  var isObject = __webpack_require__(5);
  var toObject = __webpack_require__(10);
  var isArrayIter = __webpack_require__(89);
  var create = __webpack_require__(45);
  var getPrototypeOf = __webpack_require__(22);
  var gOPN = __webpack_require__(46).f;
  var getIterFn = __webpack_require__(91);
  var uid = __webpack_require__(41);
  var wks = __webpack_require__(6);
  var createArrayMethod = __webpack_require__(34);
  var createArrayIncludes = __webpack_require__(60);
  var speciesConstructor = __webpack_require__(67);
  var ArrayIterators = __webpack_require__(94);
  var Iterators = __webpack_require__(54);
  var $iterDetect = __webpack_require__(64);
  var setSpecies = __webpack_require__(47);
  var arrayFill = __webpack_require__(93);
  var arrayCopyWithin = __webpack_require__(116);
  var $DP = __webpack_require__(8);
  var $GOPD = __webpack_require__(21);
  var dP = $DP.f;
  var gOPD = $GOPD.f;
  var RangeError = global.RangeError;
  var TypeError = global.TypeError;
  var Uint8Array = global.Uint8Array;
  var ARRAY_BUFFER = 'ArrayBuffer';
  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
  var PROTOTYPE = 'prototype';
  var ArrayProto = Array[PROTOTYPE];
  var $ArrayBuffer = $buffer.ArrayBuffer;
  var $DataView = $buffer.DataView;
  var arrayForEach = createArrayMethod(0);
  var arrayFilter = createArrayMethod(2);
  var arraySome = createArrayMethod(3);
  var arrayEvery = createArrayMethod(4);
  var arrayFind = createArrayMethod(5);
  var arrayFindIndex = createArrayMethod(6);
  var arrayIncludes = createArrayIncludes(true);
  var arrayIndexOf = createArrayIncludes(false);
  var arrayValues = ArrayIterators.values;
  var arrayKeys = ArrayIterators.keys;
  var arrayEntries = ArrayIterators.entries;
  var arrayLastIndexOf = ArrayProto.lastIndexOf;
  var arrayReduce = ArrayProto.reduce;
  var arrayReduceRight = ArrayProto.reduceRight;
  var arrayJoin = ArrayProto.join;
  var arraySort = ArrayProto.sort;
  var arraySlice = ArrayProto.slice;
  var arrayToString = ArrayProto.toString;
  var arrayToLocaleString = ArrayProto.toLocaleString;
  var ITERATOR = wks('iterator');
  var TAG = wks('toStringTag');
  var TYPED_CONSTRUCTOR = uid('typed_constructor');
  var DEF_CONSTRUCTOR = uid('def_constructor');
  var ALL_CONSTRUCTORS = $typed.CONSTR;
  var TYPED_ARRAY = $typed.TYPED;
  var VIEW = $typed.VIEW;
  var WRONG_LENGTH = 'Wrong length!';

  var $map = createArrayMethod(1, function (O, length) {
    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
  });

  var LITTLE_ENDIAN = fails(function () {
    // eslint-disable-next-line no-undef
    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
  });

  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
    new Uint8Array(1).set({});
  });

  var toOffset = function (it, BYTES) {
    var offset = toInteger(it);
    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
    return offset;
  };

  var validate = function (it) {
    if (isObject(it) && TYPED_ARRAY in it) return it;
    throw TypeError(it + ' is not a typed array!');
  };

  var allocate = function (C, length) {
    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
      throw TypeError('It is not a typed array constructor!');
    } return new C(length);
  };

  var speciesFromList = function (O, list) {
    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
  };

  var fromList = function (C, list) {
    var index = 0;
    var length = list.length;
    var result = allocate(C, length);
    while (length > index) result[index] = list[index++];
    return result;
  };

  var addGetter = function (it, key, internal) {
    dP(it, key, { get: function () { return this._d[internal]; } });
  };

  var $from = function from(source /* , mapfn, thisArg */) {
    var O = toObject(source);
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var iterFn = getIterFn(O);
    var i, length, values, result, step, iterator;
    if (iterFn != undefined && !isArrayIter(iterFn)) {
      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
        values.push(step.value);
      } O = values;
    }
    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);
    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
      result[i] = mapping ? mapfn(O[i], i) : O[i];
    }
    return result;
  };

  var $of = function of(/* ...items */) {
    var index = 0;
    var length = arguments.length;
    var result = allocate(this, length);
    while (length > index) result[index] = arguments[index++];
    return result;
  };

  // iOS Safari 6.x fails here
  var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });

  var $toLocaleString = function toLocaleString() {
    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
  };

  var proto = {
    copyWithin: function copyWithin(target, start /* , end */) {
      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
    },
    every: function every(callbackfn /* , thisArg */) {
      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars
      return arrayFill.apply(validate(this), arguments);
    },
    filter: function filter(callbackfn /* , thisArg */) {
      return speciesFromList(this, arrayFilter(validate(this), callbackfn,
        arguments.length > 1 ? arguments[1] : undefined));
    },
    find: function find(predicate /* , thisArg */) {
      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    findIndex: function findIndex(predicate /* , thisArg */) {
      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    forEach: function forEach(callbackfn /* , thisArg */) {
      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    indexOf: function indexOf(searchElement /* , fromIndex */) {
      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    includes: function includes(searchElement /* , fromIndex */) {
      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    join: function join(separator) { // eslint-disable-line no-unused-vars
      return arrayJoin.apply(validate(this), arguments);
    },
    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars
      return arrayLastIndexOf.apply(validate(this), arguments);
    },
    map: function map(mapfn /* , thisArg */) {
      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduce.apply(validate(this), arguments);
    },
    reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduceRight.apply(validate(this), arguments);
    },
    reverse: function reverse() {
      var that = this;
      var length = validate(that).length;
      var middle = Math.floor(length / 2);
      var index = 0;
      var value;
      while (index < middle) {
        value = that[index];
        that[index++] = that[--length];
        that[length] = value;
      } return that;
    },
    some: function some(callbackfn /* , thisArg */) {
      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    sort: function sort(comparefn) {
      return arraySort.call(validate(this), comparefn);
    },
    subarray: function subarray(begin, end) {
      var O = validate(this);
      var length = O.length;
      var $begin = toAbsoluteIndex(begin, length);
      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
        O.buffer,
        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
        toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)
      );
    }
  };

  var $slice = function slice(start, end) {
    return speciesFromList(this, arraySlice.call(validate(this), start, end));
  };

  var $set = function set(arrayLike /* , offset */) {
    validate(this);
    var offset = toOffset(arguments[1], 1);
    var length = this.length;
    var src = toObject(arrayLike);
    var len = toLength(src.length);
    var index = 0;
    if (len + offset > length) throw RangeError(WRONG_LENGTH);
    while (index < len) this[offset + index] = src[index++];
  };

  var $iterators = {
    entries: function entries() {
      return arrayEntries.call(validate(this));
    },
    keys: function keys() {
      return arrayKeys.call(validate(this));
    },
    values: function values() {
      return arrayValues.call(validate(this));
    }
  };

  var isTAIndex = function (target, key) {
    return isObject(target)
      && target[TYPED_ARRAY]
      && typeof key != 'symbol'
      && key in target
      && String(+key) == String(key);
  };
  var $getDesc = function getOwnPropertyDescriptor(target, key) {
    return isTAIndex(target, key = toPrimitive(key, true))
      ? propertyDesc(2, target[key])
      : gOPD(target, key);
  };
  var $setDesc = function defineProperty(target, key, desc) {
    if (isTAIndex(target, key = toPrimitive(key, true))
      && isObject(desc)
      && has(desc, 'value')
      && !has(desc, 'get')
      && !has(desc, 'set')
      // TODO: add validation descriptor w/o calling accessors
      && !desc.configurable
      && (!has(desc, 'writable') || desc.writable)
      && (!has(desc, 'enumerable') || desc.enumerable)
    ) {
      target[key] = desc.value;
      return target;
    } return dP(target, key, desc);
  };

  if (!ALL_CONSTRUCTORS) {
    $GOPD.f = $getDesc;
    $DP.f = $setDesc;
  }

  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
    getOwnPropertyDescriptor: $getDesc,
    defineProperty: $setDesc
  });

  if (fails(function () { arrayToString.call({}); })) {
    arrayToString = arrayToLocaleString = function toString() {
      return arrayJoin.call(this);
    };
  }

  var $TypedArrayPrototype$ = redefineAll({}, proto);
  redefineAll($TypedArrayPrototype$, $iterators);
  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
  redefineAll($TypedArrayPrototype$, {
    slice: $slice,
    set: $set,
    constructor: function () { /* noop */ },
    toString: arrayToString,
    toLocaleString: $toLocaleString
  });
  addGetter($TypedArrayPrototype$, 'buffer', 'b');
  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
  addGetter($TypedArrayPrototype$, 'length', 'e');
  dP($TypedArrayPrototype$, TAG, {
    get: function () { return this[TYPED_ARRAY]; }
  });

  // eslint-disable-next-line max-statements
  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
    CLAMPED = !!CLAMPED;
    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
    var GETTER = 'get' + KEY;
    var SETTER = 'set' + KEY;
    var TypedArray = global[NAME];
    var Base = TypedArray || {};
    var TAC = TypedArray && getPrototypeOf(TypedArray);
    var FORCED = !TypedArray || !$typed.ABV;
    var O = {};
    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
    var getter = function (that, index) {
      var data = that._d;
      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
    };
    var setter = function (that, index, value) {
      var data = that._d;
      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
    };
    var addElement = function (that, index) {
      dP(that, index, {
        get: function () {
          return getter(this, index);
        },
        set: function (value) {
          return setter(this, index, value);
        },
        enumerable: true
      });
    };
    if (FORCED) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME, '_d');
        var index = 0;
        var offset = 0;
        var buffer, byteLength, length, klass;
        if (!isObject(data)) {
          length = toIndex(data);
          byteLength = length * BYTES;
          buffer = new $ArrayBuffer(byteLength);
        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          buffer = data;
          offset = toOffset($offset, BYTES);
          var $len = data.byteLength;
          if ($length === undefined) {
            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
            byteLength = $len - offset;
            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
          }
          length = byteLength / BYTES;
        } else if (TYPED_ARRAY in data) {
          return fromList(TypedArray, data);
        } else {
          return $from.call(TypedArray, data);
        }
        hide(that, '_d', {
          b: buffer,
          o: offset,
          l: byteLength,
          e: length,
          v: new $DataView(buffer)
        });
        while (index < length) addElement(that, index++);
      });
      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
      hide(TypedArrayPrototype, 'constructor', TypedArray);
    } else if (!fails(function () {
      TypedArray(1);
    }) || !fails(function () {
      new TypedArray(-1); // eslint-disable-line no-new
    }) || !$iterDetect(function (iter) {
      new TypedArray(); // eslint-disable-line no-new
      new TypedArray(null); // eslint-disable-line no-new
      new TypedArray(1.5); // eslint-disable-line no-new
      new TypedArray(iter); // eslint-disable-line no-new
    }, true)) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME);
        var klass;
        // `ws` module bug, temporarily remove validation length for Uint8Array
        // https://github.com/websockets/ws/pull/645
        if (!isObject(data)) return new Base(toIndex(data));
        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          return $length !== undefined
            ? new Base(data, toOffset($offset, BYTES), $length)
            : $offset !== undefined
              ? new Base(data, toOffset($offset, BYTES))
              : new Base(data);
        }
        if (TYPED_ARRAY in data) return fromList(TypedArray, data);
        return $from.call(TypedArray, data);
      });
      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
      });
      TypedArray[PROTOTYPE] = TypedArrayPrototype;
      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
    }
    var $nativeIterator = TypedArrayPrototype[ITERATOR];
    var CORRECT_ITER_NAME = !!$nativeIterator
      && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
    var $iterator = $iterators.values;
    hide(TypedArray, TYPED_CONSTRUCTOR, true);
    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
    hide(TypedArrayPrototype, VIEW, true);
    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
      dP(TypedArrayPrototype, TAG, {
        get: function () { return NAME; }
      });
    }

    O[NAME] = TypedArray;

    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

    $export($export.S, NAME, {
      BYTES_PER_ELEMENT: BYTES
    });

    $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {
      from: $from,
      of: $of
    });

    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

    $export($export.P, NAME, proto);

    setSpecies(NAME);

    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });

    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;

    $export($export.P + $export.F * fails(function () {
      new TypedArray(1).slice();
    }), NAME, { slice: $slice });

    $export($export.P + $export.F * (fails(function () {
      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
    }) || !fails(function () {
      TypedArrayPrototype.toLocaleString.call([1, 2]);
    })), NAME, { toLocaleString: $toLocaleString });

    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
  };
} else module.exports = function () { /* empty */ };


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

var Map = __webpack_require__(121);
var $export = __webpack_require__(0);
var shared = __webpack_require__(59)('metadata');
var store = shared.store || (shared.store = new (__webpack_require__(124))());

var getOrCreateMetadataMap = function (target, targetKey, create) {
  var targetMetadata = store.get(target);
  if (!targetMetadata) {
    if (!create) return undefined;
    store.set(target, targetMetadata = new Map());
  }
  var keyMetadata = targetMetadata.get(targetKey);
  if (!keyMetadata) {
    if (!create) return undefined;
    targetMetadata.set(targetKey, keyMetadata = new Map());
  } return keyMetadata;
};
var ordinaryHasOwnMetadata = function (MetadataKey, O, P) {
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
};
var ordinaryGetOwnMetadata = function (MetadataKey, O, P) {
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
};
var ordinaryDefineOwnMetadata = function (MetadataKey, MetadataValue, O, P) {
  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
};
var ordinaryOwnMetadataKeys = function (target, targetKey) {
  var metadataMap = getOrCreateMetadataMap(target, targetKey, false);
  var keys = [];
  if (metadataMap) metadataMap.forEach(function (_, key) { keys.push(key); });
  return keys;
};
var toMetaKey = function (it) {
  return it === undefined || typeof it == 'symbol' ? it : String(it);
};
var exp = function (O) {
  $export($export.S, 'Reflect', O);
};

module.exports = {
  store: store,
  map: getOrCreateMetadataMap,
  has: ordinaryHasOwnMetadata,
  get: ordinaryGetOwnMetadata,
  set: ordinaryDefineOwnMetadata,
  keys: ordinaryOwnMetadataKeys,
  key: toMetaKey,
  exp: exp
};


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

var META = __webpack_require__(41)('meta');
var isObject = __webpack_require__(5);
var has = __webpack_require__(16);
var setDesc = __webpack_require__(8).f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !__webpack_require__(4)(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = __webpack_require__(6)('unscopables');
var ArrayProto = Array.prototype;
if (ArrayProto[UNSCOPABLES] == undefined) __webpack_require__(17)(ArrayProto, UNSCOPABLES, {});
module.exports = function (key) {
  ArrayProto[UNSCOPABLES][key] = true;
};


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(354), __webpack_require__(355), __webpack_require__(12), __webpack_require__(13), __webpack_require__(24), __webpack_require__(14), __webpack_require__(23), __webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, tupLogin_1, tupUniCmdSocket_1, dispatcher_1, eventInfo_1, errorCode_1, serverConfig_1, client_1, util_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tupLoginWrapper = (function () {
        function tupLoginWrapper() {
            this.count = 10;
            this.refreshToken = 10;
            if (tupLoginWrapper._instance) {
                throw new Error("Error: Instantiation failed: Use tupLoginWrapper.getInstance() instead of new.");
            }
            tupLoginWrapper._instance = this;
        }
        tupLoginWrapper.getInstance = function () {
            return tupLoginWrapper._instance;
        };
        tupLoginWrapper.prototype.build = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                var promise;
                return __generator(this, function (_a) {
                    util_1.default.info("tupLoginWrapper", "step in tupLoginWrapper to build");
                    if (tupLoginWrapper.tupUniSock && tupLoginWrapper.tupUniSock.wsocket.readyState === 1) {
                        util_1.default.info("tupLoginWrapper", "websocket is connecting");
                        return [2];
                    }
                    promise = new Promise(function (resolve, reject) {
                        _this.onLoginReady = function () {
                            resolve();
                            util_1.default.info("tupLoginWrapper", "The unified websocket is ready!");
                        };
                    });
                    tupLoginWrapper.tupUniSock = new tupUniCmdSocket_1.default({
                        svrAddr: serverConfig_1.CloudEC_SERVERCONFIG.ENTERPRISE_DOMAIN,
                        ready: this.onLoginReady,
                        close: this.onLoginClose,
                        ssl: serverConfig_1.CloudEC_SERVERCONFIG.IS_WSS,
                    });
                    tupLoginWrapper.tupLogin = new tupLogin_1.default({
                        socket: tupLoginWrapper.tupUniSock
                    });
                    return [2, promise];
                });
            });
        };
        tupLoginWrapper.prototype.onLoginClose = function () {
            util_1.default.error("tupLoginWrapper", "unisock disconnect");
            if (tupLoginWrapper._instance.count > 0) {
                if (tupLoginWrapper.tupUniSock) {
                    tupLoginWrapper.tupUniSock.closeChannel();
                }
                setTimeout(function () {
                    tupLoginWrapper.tupUniSock = new tupUniCmdSocket_1.default({
                        svrAddr: serverConfig_1.CloudEC_SERVERCONFIG.ENTERPRISE_DOMAIN,
                        ready: tupLoginWrapper._instance.onLoginReady,
                        close: tupLoginWrapper._instance.onLoginClose,
                        ssl: serverConfig_1.CloudEC_SERVERCONFIG.IS_WSS,
                    });
                    tupLoginWrapper._instance.count--;
                }, 5000);
            }
            else {
                client_1.default.notifyErr(errorCode_1.EC_SDK_ERROR.WEBSOCKET_IS_CLOSED("Login Module"));
            }
        };
        tupLoginWrapper.prototype.uniSockClose = function () {
            tupLoginWrapper._instance.count = 0;
            tupLoginWrapper.tupUniSock.wsocket.close();
        };
        tupLoginWrapper.prototype.logStart = function () {
            var callback = { response: {} };
            var promise = new Promise(function (resolve, reject) {
                callback.response = function (data) {
                    resolve();
                };
            });
            tupLoginWrapper.tupLogin.logStart(serverConfig_1.CloudEC_SERVERCONFIG.LOG_PATH, serverConfig_1.CloudEC_SERVERCONFIG.LOG_FILE_COUNT, serverConfig_1.CloudEC_SERVERCONFIG.LOG_LEVEL, serverConfig_1.CloudEC_SERVERCONFIG.LOG_FILE_SIZE, (callback));
            return promise;
        };
        tupLoginWrapper.prototype.init = function () {
            util_1.default.info("tupLoginWrapper", "tupLoginWrapper:step in init");
            var callback = { response: {} };
            var promise = new Promise(function (resolve, reject) {
                callback.response = function (data) {
                    resolve({ result: true, info: data.param });
                };
            });
            tupLoginWrapper.tupLogin.init("", 0, callback);
            return promise;
        };
        tupLoginWrapper.prototype.getBestLocalIp = function (server_addr) {
            var param = {
                "server": server_addr
            };
            util_1.default.debug("tupLoginWrapper", "tupLoginWrapper: getBestLocalIp");
            var callback = { response: {} };
            var promise = new Promise(function (resolve, reject) {
                callback.response = function (data) {
                    resolve(data);
                };
            });
            tupLoginWrapper.tupLogin.getBestLocalIp(param, callback);
            return promise;
        };
        tupLoginWrapper.prototype.loginAuthorize = function (authType, authParam, serverInfo, proxyParam) {
            var _this = this;
            var auth_data = {
                "auth_type": authType,
                "user_agent": "eSDK-Desktop",
                "user_tiket": authParam.token,
                "auth_info": {
                    "user_name": authParam.account,
                    "password": authParam.passwd
                },
                "auth_server": {
                    "server_type": 0,
                    "server_url": serverInfo.serverAddress,
                    "server_port": serverInfo.serverPort,
                    "server_version": serverConfig_1.CloudEC_SERVERCONFIG.LOGIN_SERVER_VERSION,
                    "proxy_url": proxyParam.proxyAddress,
                    "proxy_port": proxyParam.proxyPort
                }
            };
            var promise = new Promise(function (resolve, reject) {
                _this.onLoginAuthResult = function (ret) {
                    if (ret.param.result == 0) {
                        util_1.default.debug("tupLoginWrapper", "onLoginAuthResult login auth successful");
                    }
                    else {
                        util_1.default.error("tupLoginWrapper", "onLoginAuthResult login auth failed");
                    }
                    resolve(ret);
                };
            });
            tupLoginWrapper.tupLogin.authorize(auth_data, {
                onUportalAuthResult: this.onLoginAuthResult,
                onRefreshTokenResult: this.onRefreshTokenResult
            });
            authParam.token = "";
            authParam.passwd = "";
            proxyParam.proxyPassword = "";
            auth_data.auth_info.password = "";
            return promise;
        };
        tupLoginWrapper.prototype.onRefreshTokenResult = function (ret) {
            if (ret.param.result == 0) {
                this.refreshToken = 10;
                var loginInfo = JSON.parse(sessionStorage.cloudEC_loginInfo);
                loginInfo.authToken = ret.param.refresh_token_result.auth_token;
                var cloudEC_loginInfo = JSON.stringify(loginInfo);
                sessionStorage.cloudEC_loginInfo = cloudEC_loginInfo;
                util_1.default.debug("tupLoginWrapper", "refreshToken update stg info");
                dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_REFRESH_TOKEN);
                dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_EADDR_REFRESH_TOKEN);
                if (ret.param.refresh_token_result.stg_account != null && ret.param.refresh_token_result.stg_account != "") {
                    var account = ret.param.refresh_token_result.stg_account;
                    var password = ret.param.refresh_token_result.stg_pwd;
                    tupLoginWrapper.tupLogin.updatestgauthinfo({ account: account, password: password }, null);
                    var auth_info = {
                        user_name: account,
                        password: password
                    };
                    tupLoginWrapper.tupLogin.updatestgauthinfo(auth_info, {});
                    password = "";
                }
                loginInfo.authToken = "";
            }
            else {
                if (this.refreshToken > 0) {
                    var callback = {};
                    tupLoginWrapper.tupLogin.refreshToken(callback);
                }
                else {
                    util_1.default.error("tupLoginWrapper", "Token refresh failed, please login again!");
                    var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(100000000, 100000018, "Failed to start token update.");
                    client_1.default.notifyErr(err);
                }
                this.refreshToken = this.refreshToken - 1;
            }
        };
        tupLoginWrapper.prototype.buildStgTunnel = function (stgNum, stgServers, stgAccount, stgPassword, CApath) {
            var _this = this;
            var server = {
                stg_num: stgNum,
                stg_servers: stgServers,
                user_name: stgAccount,
                password: stgPassword,
                ca_path: CApath
            };
            var promise = new Promise(function (resolve, reject) {
                _this.onStgBuildTunnelResult = function (ret) {
                    resolve(ret);
                };
            });
            tupLoginWrapper.tupLogin.buildStgTunnel(server, {
                onStgBuildTunnelResult: this.onStgBuildTunnelResult
            });
            stgPassword = "";
            server.password = "";
            return promise;
        };
        tupLoginWrapper.prototype.fireWallDetect = function (serverNum, serverList) {
            var _this = this;
            var detectServer = {
                server_num: serverNum,
                servers: serverList
            };
            var promise = new Promise(function (resolve, reject) {
                _this.onFirewallDetectResult = function (ret) {
                    resolve(ret.param);
                };
            });
            tupLoginWrapper.tupLogin.firewallDetect(detectServer, {
                onFirewallDetectResult: this.onFirewallDetectResult
            });
            return promise;
        };
        tupLoginWrapper.prototype.destroyStgTunnel = function () {
            var _this = this;
            var promise = new Promise(function (resolve, reject) {
                _this.onStgDestoryTunnelResult = function (ret) {
                    resolve(ret.param);
                };
            });
            tupLoginWrapper.tupLogin.destoryStgTunnel({ onStgDestoryTunnelResult: this.onStgDestoryTunnelResult });
            return promise;
        };
        tupLoginWrapper.prototype.setProxy = function (proxyParam) {
            var proxy_param = {
                server_port: proxyParam.proxyPort,
                server_uri: proxyParam.proxyAddress,
                user_name: proxyParam.proxyAccount,
                password: proxyParam.proxyPassword
            };
            var callback = { response: {} };
            var promise = new Promise(function (resolve, reject) {
                callback.response = function (data) {
                    util_1.default.debug("tupLoginWrapper", data);
                    resolve(data);
                };
            });
            tupLoginWrapper.tupLogin.setProxy(proxy_param, callback);
            proxy_param.password = "";
            return promise;
        };
        tupLoginWrapper.prototype.getTempUserInfo = function (anonymousConfParam, serverInfo) {
            var _this = this;
            var confinfo_param = {
                server_url: serverInfo.serverAddress,
                server_port: serverInfo.serverPort,
                conf_id: anonymousConfParam.confId,
                conf_pwd: anonymousConfParam.confPasswd,
                client_type: 0,
                registe: 1
            };
            var promise = new Promise(function (resolve, reject) {
                _this.onGetTempUserResult = function (ret) {
                    if (ret.param.result == 0) {
                        util_1.default.debug("tupLoginWrapper", "onGetTempUserInfoResult login auth successful");
                    }
                    else {
                        util_1.default.error("tupLoginWrapper", "onGetTempUserInfoResult login auth failed");
                    }
                    resolve(ret);
                };
            });
            util_1.default.debug("tupLoginWrapper", "getTempUserInfoParam");
            tupLoginWrapper.tupLogin.getTempUserInfo(confinfo_param, { onGetTempUserResult: this.onGetTempUserResult });
            anonymousConfParam.confPasswd = "";
            confinfo_param.conf_pwd = "";
            return promise;
        };
        tupLoginWrapper.prototype.uninit = function () {
            var callbacks = {};
            tupLoginWrapper.tupLogin.uninit(callbacks);
        };
        tupLoginWrapper._instance = new tupLoginWrapper();
        return tupLoginWrapper;
    }());
    exports.default = tupLoginWrapper;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 40 */
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),
/* 41 */
/***/ (function(module, exports) {

var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};


/***/ }),
/* 42 */
/***/ (function(module, exports) {

module.exports = false;


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = __webpack_require__(102);
var enumBugKeys = __webpack_require__(76);

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(32);
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = __webpack_require__(2);
var dPs = __webpack_require__(103);
var enumBugKeys = __webpack_require__(76);
var IE_PROTO = __webpack_require__(75)('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = __webpack_require__(73)('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  __webpack_require__(77).appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = __webpack_require__(102);
var hiddenKeys = __webpack_require__(76).concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(3);
var dP = __webpack_require__(8);
var DESCRIPTORS = __webpack_require__(7);
var SPECIES = __webpack_require__(6)('species');

module.exports = function (KEY) {
  var C = global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function () { return this; }
  });
};


/***/ }),
/* 48 */
/***/ (function(module, exports) {

module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(25);
var call = __webpack_require__(114);
var isArrayIter = __webpack_require__(89);
var anObject = __webpack_require__(2);
var toLength = __webpack_require__(9);
var getIterFn = __webpack_require__(91);
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

var redefine = __webpack_require__(18);
module.exports = function (target, src, safe) {
  for (var key in src) redefine(target, key, src[key], safe);
  return target;
};


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(359), __webpack_require__(39), __webpack_require__(24), __webpack_require__(28), __webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, tupCall_1, tupLoginWrapper_1, errorCode_1, observer_1, util_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tupCallWrapper = (function () {
        function tupCallWrapper() {
            if (tupCallWrapper._instance) {
                throw new Error("Error: Instantiation failed: Use tupCallWrapper.getInstance() instead of new.");
            }
            tupCallWrapper._instance = this;
        }
        tupCallWrapper.getInstance = function () {
            return tupCallWrapper._instance;
        };
        tupCallWrapper.prototype.build = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    util_1.default.info("tupCallWrapper", "step in tupCallWrapper to build");
                    if (!tupCallWrapper.tupCall) {
                        tupCallWrapper.tupCall = new tupCall_1.default({
                            socket: tupLoginWrapper_1.default.tupUniSock
                        });
                    }
                    return [2];
                });
            });
        };
        tupCallWrapper.prototype.onCallClose = function () {
            sessionStorage.removeItem("callKey");
        };
        tupCallWrapper.prototype.setHMELog = function () {
            tupCallWrapper.tupCall.setHMELog();
        };
        tupCallWrapper.prototype.config = function (params) {
            var callback = { response: {} };
            var promise = new Promise(function (resolve, reject) {
                callback.response = function () {
                    resolve();
                };
            });
            tupCallWrapper.tupCall.config(params, callback);
            return promise;
        };
        tupCallWrapper.prototype.register = function (sipImpi, sipAccount, sipPassword) {
            var _this = this;
            var promise = new Promise(function (resolve, reject) {
                _this.onRegStatusUpdate = function (ret) {
                    var userNumber = ret.param.user_number;
                    var state = ["unregister", "registering", "deregistering", "registered", "deregistered"];
                    var reason = ret.param.reason_code;
                    if (reason == 403) {
                        util_1.default.error("tupCallWrapper", "403:forbidden");
                    }
                    if (reason == 408) {
                        util_1.default.error("tupCallWrapper", "408:request overtime");
                    }
                    var currentState = state[ret.param.register_state];
                    util_1.default.debug("tupCallWrapper", "step in onRegStatusUpdate,state =" + currentState);
                    util_1.default.debug("tupCallWrapper", "register reason =" + reason);
                    var data = { result: reason, notify: 0x10002 };
                    if (reason == 0) {
                        if (currentState == "registered") {
                            resolve(data);
                            return;
                        }
                    }
                    else {
                        resolve(data);
                        return;
                    }
                    setTimeout(function () { data.result = 90000001; resolve(data); }, 60000);
                };
                _this.onForceUnReg = function (ret) {
                    _this.deRegister(sipImpi);
                    observer_1.default.publish('onForceUnReg', { result: true, info: "force unregister event received." });
                    var data = { result: 10000002 };
                    resolve(data);
                };
            });
            tupCallWrapper.tupCall.register(sipImpi, sipAccount, sipPassword, {
                onRegStatusUpdate: this.onRegStatusUpdate,
                onForceUnReg: this.onForceUnReg
            });
            sipPassword = "";
            return promise;
        };
        tupCallWrapper.prototype.deRegister = function (sipImpi) {
            util_1.default.debug("tupCallWrapper", "step in deRegister");
            var callback = { response: {} };
            var promise = new Promise(function (resolve, reject) {
                callback.response = function () {
                    resolve();
                };
            });
            tupCallWrapper.tupCall.deRegister(sipImpi, callback);
            return promise;
        };
        tupCallWrapper.prototype.stopLocalServer = function () {
            tupCallWrapper.tupCall.stopLocalServer();
        };
        tupCallWrapper.prototype.startCall = function (calleeNum, isVideo) {
            var callbacks = { response: {} };
            var promise = new Promise(function (resolve, reject) {
                callbacks.response = function (ret) {
                    if (ret.param.result == 0) {
                        util_1.default.debug("tupCallWrapper", "startCall is Successful");
                    }
                    resolve(ret);
                };
            });
            tupCallWrapper.tupCall.startCall(calleeNum, isVideo, callbacks);
            return promise;
        };
        tupCallWrapper.prototype.alertingCall = function (callid) {
            tupCallWrapper.tupCall.alertingCall(callid, function (data) { });
        };
        tupCallWrapper.prototype.accessReservedConf = function (callType, confId, accessCode, confPaswd) {
            var callbacks = { response: {} };
            var callId = 0;
            var pstconfparam = {
                "confid": confId,
                "access_code": accessCode,
                "conf_paswd": confPaswd
            };
            var promise = new Promise(function (resolve, reject) {
                var data;
                var token = observer_1.default.subscribe("ConfConnected", function (ret) {
                    clearTimeout(id);
                    observer_1.default.unsubscribe(token);
                    resolve(data);
                });
                callbacks.response = function (ret) {
                    data = ret;
                    if (ret.result == 0) {
                        util_1.default.debug("tupCallWrapper", "access is Successful");
                        resolve(ret);
                    }
                    else {
                        clearTimeout(id);
                        observer_1.default.unsubscribe(token);
                        resolve(ret);
                    }
                };
                var id = setTimeout(function () {
                    util_1.default.error("tupCallWrapper", "accessReservedConf time out ");
                    var ret = {};
                    ret.result = errorCode_1.CONFERENCE_JOIN_ERROR.CONF_JOIN_ACCESSNUM_ERROR;
                    ret.rsp = data.rsp;
                    observer_1.default.unsubscribe(token);
                    resolve(ret);
                }, 60000);
            });
            tupCallWrapper.tupCall.accessReservedConfEx(callId, callType, pstconfparam, callbacks);
            return promise;
        };
        tupCallWrapper.prototype.registerCallEvent = function (callbacks) {
            tupCallWrapper.tupCall.setBasicCallEvent(callbacks);
        };
        tupCallWrapper.prototype.registerVideoEvent = function (callbacks) {
            tupCallWrapper.tupCall.setVideoCallEvent(callbacks);
        };
        tupCallWrapper.prototype.acceptCall = function (callid, is_video_call) {
            var callbacks = { response: {} };
            var promise = new Promise(function (resolve, reject) {
                callbacks.response = function (ret) {
                    resolve(ret);
                };
            });
            tupCallWrapper.tupCall.acceptCall(callid, is_video_call, callbacks);
            return promise;
        };
        tupCallWrapper.prototype.endCall = function (callid) {
            var callbacks = { response: {} };
            var promise = new Promise(function (resolve, reject) {
                callbacks.response = function (ret) {
                    resolve(ret);
                };
            });
            tupCallWrapper.tupCall.endCall(callid, callbacks);
            return promise;
        };
        tupCallWrapper.prototype.startPlayMediaFile = function (path, loop_times) {
            var callbacks = { response: {} };
            var promise = new Promise(function (resolve, reject) {
                callbacks.response = function (ret) {
                    if (ret.result == 0) {
                        util_1.default.debug("tupCallWrapper", "startPlayMediaFile is successful");
                    }
                    else {
                        util_1.default.debug("tupCallWrapper", "startPlayMediaFile is failing");
                    }
                    resolve(ret);
                };
            });
            tupCallWrapper.tupCall.startPlayMediaFile(path, loop_times, callbacks);
            return promise;
        };
        tupCallWrapper.prototype.stopPlayMediaFile = function (play_handle) {
            var callbacks = { response: {} };
            var promise = new Promise(function (resolve, reject) {
                callbacks.response = function (ret) {
                    if (ret.result == 0) {
                        util_1.default.debug("tupCallWrapper", "stopPlayMediaFile is successful");
                    }
                    else {
                        util_1.default.debug("tupCallWrapper", "stopPlayMediaFile is failing");
                    }
                    resolve(ret);
                };
            });
            tupCallWrapper.tupCall.stopPlayMediaFile(play_handle, callbacks);
            return promise;
        };
        tupCallWrapper.prototype.holdCall = function (call_id) {
            var callbacks = { response: {} };
            var promise = new Promise(function (resolve, reject) {
                callbacks.response = function (ret) {
                    if (ret.result == 0) {
                        util_1.default.debug("tupCallWrapper", "holdCall is Successful");
                    }
                    resolve(ret);
                };
            });
            tupCallWrapper.tupCall.holdCall(call_id, callbacks);
            return promise;
        };
        tupCallWrapper.prototype.unholdCall = function (call_id) {
            var callbacks = { response: {} };
            var promise = new Promise(function (resolve, reject) {
                callbacks.response = function (ret) {
                    if (ret.result == 0) {
                        util_1.default.debug("tupCallWrapper", "unholdCall is Successful");
                    }
                    resolve(ret);
                };
            });
            tupCallWrapper.tupCall.unholdCall(call_id, callbacks);
            return promise;
        };
        tupCallWrapper.prototype.divertCall = function (call_id, divert_number) {
            var callbacks = { response: {} };
            var promise = new Promise(function (resolve, reject) {
                callbacks.response = function (ret) {
                    if (ret.param.result == 0) {
                        util_1.default.debug("tupCallWrapper", "divertCall is Successful");
                    }
                    resolve(ret);
                };
            });
            tupCallWrapper.tupCall.divertCall(call_id, divert_number, callbacks);
            return promise;
        };
        tupCallWrapper.prototype.blindTransfer = function (call_id, transto_number) {
            var callbacks = { response: {} };
            var promise = new Promise(function (resolve, reject) {
                callbacks.response = function (ret) {
                    if (ret.result == 0) {
                        util_1.default.debug("tupCallWrapper", "blindTransfer is Successful");
                    }
                    resolve(ret);
                };
            });
            tupCallWrapper.tupCall.blindTransfer(call_id, transto_number, callbacks);
            return promise;
        };
        tupCallWrapper.prototype.consultTransfer = function (call_id, transto_number) {
            var callbacks = { response: {} };
            var promise = new Promise(function (resolve, reject) {
                callbacks.response = function (ret) {
                    if (ret.param.result == 0) {
                        util_1.default.debug("tupCallWrapper", "consultTransfer is Successful");
                    }
                    resolve(ret);
                };
            });
            tupCallWrapper.tupCall.consultTransfer(call_id, transto_number, callbacks);
            return promise;
        };
        tupCallWrapper.prototype.addVideo = function (call_id) {
            var callbacks = { response: {} };
            var promise = new Promise(function (resolve, reject) {
                callbacks.response = function (ret) {
                    if (ret.result == 0) {
                        util_1.default.debug("tupCallWrapper", "addVideo is Successful");
                    }
                    resolve(ret);
                };
            });
            tupCallWrapper.tupCall.addVideo(call_id, callbacks);
            return promise;
        };
        tupCallWrapper.prototype.delVideo = function (call_id) {
            var callbacks = { response: {} };
            var promise = new Promise(function (resolve, reject) {
                callbacks.response = function (ret) {
                    if (ret.result == 0) {
                        util_1.default.debug("tupCallWrapper", "delVideo is Successful");
                    }
                    resolve(ret);
                };
            });
            tupCallWrapper.tupCall.delVideo(call_id, callbacks);
            return promise;
        };
        tupCallWrapper.prototype.replyAddVideo = function (call_id, is_accept) {
            var callbacks = { response: {} };
            var promise = new Promise(function (resolve, reject) {
                callbacks.response = function (ret) {
                    if (ret.result == 0) {
                        util_1.default.debug("tupCallWrapper", "replyAddVideo is Successful");
                    }
                    resolve(ret);
                };
            });
            tupCallWrapper.tupCall.replyAddVideo(call_id, is_accept, callbacks);
            return promise;
        };
        tupCallWrapper.prototype.setVideoRender = function (localView, remoteView) {
            tupCallWrapper.tupCall.setVideoRender(localView, remoteView);
        };
        tupCallWrapper.prototype.setLocalViewWH = function (width, height) {
            tupCallWrapper.tupCall.setLocalViewWH(width, height);
        };
        tupCallWrapper.prototype.setRemoteViewWH = function (width, height) {
            tupCallWrapper.tupCall.setRemoteViewWH(width, height);
        };
        tupCallWrapper.prototype.dtmf = function (call_id, dtmfNo) {
            var callbacks = { response: {} };
            var promise = new Promise(function (resolve, reject) {
                callbacks.response = function (ret) {
                    if (ret.result == 0) {
                        util_1.default.debug("tupCallWrapper", "dtmf is Successful");
                    }
                    resolve(ret);
                };
            });
            tupCallWrapper.tupCall.dtmf(call_id, dtmfNo, callbacks);
        };
        tupCallWrapper.prototype.getMediaDeviceType = function (mediaDevice) {
            return __awaiter(this, void 0, void 0, function () {
                var devicePromise, callbacks;
                return __generator(this, function (_a) {
                    devicePromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result === 0) {
                                devicePromise.resolve({ result: true, info: data.param.array });
                            }
                            else {
                                devicePromise.reject({ result: false, info: data });
                            }
                        }
                    };
                    tupCallWrapper.tupCall.getMediaDevices(mediaDevice, callbacks);
                    return [2, devicePromise.promise];
                });
            });
        };
        tupCallWrapper.prototype.getMicrophoneVolume = function () {
            return __awaiter(this, void 0, void 0, function () {
                var micVolPromise, callbacks;
                return __generator(this, function (_a) {
                    micVolPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result === 0) {
                                micVolPromise.resolve({ result: true, info: data.param.volume });
                            }
                            else {
                                micVolPromise.reject({ result: false, info: data });
                            }
                        }
                    };
                    tupCallWrapper.tupCall.getMicVol(callbacks);
                    return [2, micVolPromise.promise];
                });
            });
        };
        tupCallWrapper.prototype.getSpeakVolume = function () {
            return __awaiter(this, void 0, void 0, function () {
                var spkVolPromise, callbacks;
                return __generator(this, function (_a) {
                    spkVolPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result === 0) {
                                spkVolPromise.resolve({ result: true, info: data.param.volume });
                            }
                            else {
                                spkVolPromise.reject({ result: false, info: data });
                            }
                        }
                    };
                    tupCallWrapper.tupCall.getSpkVol(callbacks);
                    return [2, spkVolPromise.promise];
                });
            });
        };
        tupCallWrapper.prototype.setMicIndex = function (index) {
            return __awaiter(this, void 0, void 0, function () {
                var setMicPromise, callbacks;
                return __generator(this, function (_a) {
                    setMicPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result === 0) {
                                setMicPromise.resolve({ result: true, info: index });
                            }
                            else {
                                setMicPromise.reject({ result: false, info: data });
                            }
                        }
                    };
                    tupCallWrapper.tupCall.setMicIndex(index, callbacks);
                    return [2, setMicPromise.promise];
                });
            });
        };
        tupCallWrapper.prototype.setSpeakIndex = function (index) {
            return __awaiter(this, void 0, void 0, function () {
                var setSpeakPromise, callbacks;
                return __generator(this, function (_a) {
                    setSpeakPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result === 0) {
                                setSpeakPromise.resolve({ result: true, info: index });
                            }
                            else {
                                setSpeakPromise.reject({ result: false, info: data });
                            }
                        }
                    };
                    tupCallWrapper.tupCall.setSpeakIndex(index, callbacks);
                    return [2, setSpeakPromise.promise];
                });
            });
        };
        tupCallWrapper.prototype.setVideoIndex = function (index) {
            return __awaiter(this, void 0, void 0, function () {
                var setVideoPromise, callbacks;
                return __generator(this, function (_a) {
                    setVideoPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result === 0) {
                                setVideoPromise.resolve({ result: true, info: index });
                            }
                            else {
                                setVideoPromise.reject({ result: false, info: data });
                            }
                        }
                    };
                    tupCallWrapper.tupCall.setVideoIdx(index, callbacks);
                    return [2, setVideoPromise.promise];
                });
            });
        };
        tupCallWrapper.prototype.setMicVol = function (volume) {
            return __awaiter(this, void 0, void 0, function () {
                var setMicVolPromise, callbacks;
                return __generator(this, function (_a) {
                    setMicVolPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result === 0) {
                                setMicVolPromise.resolve({ result: true, info: "" });
                            }
                            else {
                                setMicVolPromise.reject({ result: false, info: data });
                            }
                        }
                    };
                    tupCallWrapper.tupCall.setMicVol(volume, null, callbacks);
                    return [2, setMicVolPromise.promise];
                });
            });
        };
        tupCallWrapper.prototype.setSpkVol = function (volume) {
            return __awaiter(this, void 0, void 0, function () {
                var setSpkVolPromise, callbacks;
                return __generator(this, function (_a) {
                    setSpkVolPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result === 0) {
                                setSpkVolPromise.resolve({ result: true, info: "" });
                            }
                            else {
                                setSpkVolPromise.reject({ result: false, info: data });
                            }
                        }
                    };
                    tupCallWrapper.tupCall.setSpkVol(volume, null, callbacks);
                    return [2, setSpkVolPromise.promise];
                });
            });
        };
        tupCallWrapper.prototype.setForwardIPTService = function (type, forward_num) {
            return __awaiter(this, void 0, void 0, function () {
                var setForwardPromise, callbacks;
                return __generator(this, function (_a) {
                    setForwardPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result === 0) {
                                setForwardPromise.resolve({ result: true, info: "" });
                            }
                            else {
                                setForwardPromise.reject({ result: false, info: data });
                            }
                        }
                    };
                    tupCallWrapper.tupCall.setForwardIPTService(type, forward_num, callbacks);
                    return [2, setForwardPromise.promise];
                });
            });
        };
        tupCallWrapper.prototype.setVideoWindow = function (frameHwndList, callid) {
            return __awaiter(this, void 0, void 0, function () {
                var setVideoWindowPromise, callbacks, count, callWindows, i, videoWndType;
                return __generator(this, function (_a) {
                    setVideoWindowPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result === 0) {
                                setVideoWindowPromise.resolve({ result: true, info: "" });
                            }
                            else {
                                setVideoWindowPromise.reject({ result: false, info: data });
                            }
                        }
                    };
                    count = frameHwndList.length;
                    callWindows = new Array();
                    for (i = 0; i < count; i++) {
                        videoWndType = i === 0 ? 0 : 1;
                        callWindows[i] = {
                            video_wnd_type: videoWndType,
                            render: frameHwndList[i].hwnd,
                            index: i,
                            startimage: ""
                        };
                    }
                    tupCallWrapper.tupCall.setVideoWindow(count, callWindows, callid, callbacks);
                    return [2, setVideoWindowPromise.promise];
                });
            });
        };
        tupCallWrapper.prototype.videoControl = function (callid, toShowVideo) {
            return __awaiter(this, void 0, void 0, function () {
                var videoControlPromise, callbacks;
                return __generator(this, function (_a) {
                    videoControlPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result === 0) {
                                videoControlPromise.resolve({ result: true, info: "" });
                            }
                            else {
                                videoControlPromise.reject({ result: false, info: data });
                            }
                        }
                    };
                    if (toShowVideo == 0) {
                        tupCallWrapper.tupCall.videoControl(false, callid, 4, 8, callbacks);
                    }
                    else {
                        tupCallWrapper.tupCall.videoControl(false, callid, 4, 4, callbacks);
                    }
                    return [2, videoControlPromise.promise];
                });
            });
        };
        tupCallWrapper.prototype.operateMic = function (callid, toMute) {
            return __awaiter(this, void 0, void 0, function () {
                var operateMicPromise, callbacks;
                return __generator(this, function (_a) {
                    operateMicPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result === 0) {
                                operateMicPromise.resolve({ result: true, info: "" });
                            }
                            else {
                                operateMicPromise.reject({ result: false, info: data });
                            }
                        }
                    };
                    tupCallWrapper.tupCall.operateMic(callid, toMute, callbacks);
                    return [2, operateMicPromise.promise];
                });
            });
        };
        tupCallWrapper.prototype.getPromise = function () {
            var p = {};
            p.promise = new Promise(function (resolve, reject) {
                p.resolve = resolve;
                p.reject = reject;
            });
            return p;
        };
        tupCallWrapper.prototype.getCallMediaInfo = function () {
            return __awaiter(this, void 0, void 0, function () {
                var mediaInfo, mediaInfoPromise, callbacks;
                return __generator(this, function (_a) {
                    mediaInfo = {};
                    mediaInfoPromise = this.getPromise();
                    callbacks = {
                        response: function (res) {
                            if (0 === res.result) {
                                mediaInfo = {
                                    audio: {
                                        send: {
                                            encodeProtocol: res.param.audio_stream_info.encode_protocol,
                                            lost: res.param.audio_stream_info.send_loss_fraction,
                                            srtp: res.param.audio_stream_info.is_srtp
                                        },
                                        recv: {
                                            decodeProtocol: res.param.audio_stream_info.decode_protocol,
                                            lost: res.param.audio_stream_info.recv_loss_fraction,
                                            srtp: res.param.audio_stream_info.is_srtp
                                        }
                                    },
                                    video: {
                                        send: {
                                            encodeProtocol: res.param.video_stream_info.encode_name + ' ' + res.param.video_stream_info.encoder_profile,
                                            bitRate: res.param.video_stream_info.video_send_bit_rate / 1000,
                                            frameSize: res.param.video_stream_info.encoder_size,
                                            frameRate: res.param.video_stream_info.send_fram_rate,
                                            lost: res.param.video_stream_info.send_loss_fraction,
                                            delay: res.param.video_stream_info.send_delay,
                                            jitter: res.param.video_stream_info.send_jitter,
                                            srtp: res.param.video_stream_info.is_srtp
                                        },
                                        recv: {
                                            decodeProtocol: res.param.video_stream_info.decode_name + ' ' + res.param.video_stream_info.decoder_profile,
                                            bitRate: res.param.video_stream_info.video_recv_bit_rate / 1000,
                                            frameSize: res.param.video_stream_info.decoder_size,
                                            frameRate: res.param.video_stream_info.recv_fram_rate,
                                            lost: res.param.video_stream_info.recv_loss_fraction,
                                            delay: res.param.video_stream_info.recv_delay,
                                            jitter: res.param.video_stream_info.recv_jitter,
                                            srtp: res.param.video_stream_info.is_srtp
                                        }
                                    },
                                    data: {
                                        send: {
                                            encodeProtocol: res.param.data_stream_info.encode_name + ' ' + res.param.data_stream_info.encoder_profile,
                                            bitRate: res.param.data_stream_info.video_send_bit_rate / 1000,
                                            frameSize: res.param.data_stream_info.encoder_size,
                                            frameRate: res.param.data_stream_info.send_fram_rate,
                                            lost: res.param.data_stream_info.send_loss_fraction,
                                            delay: res.param.data_stream_info.send_delay,
                                            jitter: res.param.data_stream_info.send_jitter,
                                            srtp: res.param.data_stream_info.is_srtp
                                        },
                                        recv: {
                                            decodeProtocol: res.param.data_stream_info.decode_name + ' ' + res.param.data_stream_info.decoder_profile,
                                            bitRate: res.param.data_stream_info.video_recv_bit_rate / 1000,
                                            frameSize: res.param.data_stream_info.decoder_size,
                                            frameRate: res.param.data_stream_info.recv_fram_rate,
                                            lost: res.param.data_stream_info.recv_loss_fraction,
                                            delay: res.param.data_stream_info.recv_delay,
                                            jitter: res.param.data_stream_info.recv_jitter,
                                            srtp: res.param.data_stream_info.is_srtp
                                        }
                                    }
                                };
                                util_1.default.debug("tupCallWrapper", 'getCallMediaParams success, mediaInfo = ' + JSON.stringify(mediaInfo));
                                mediaInfoPromise.resolve({ result: true, info: mediaInfo });
                            }
                            else {
                                util_1.default.error("tupCallWrapper", 'getCallMediaParams failed, result = ' + res.result);
                                mediaInfoPromise.reject({ result: false, info: res });
                            }
                        }
                    };
                    tupCallWrapper.tupCall.getCallMediaParams(mediaInfo, callbacks);
                    return [2, mediaInfoPromise.promise];
                });
            });
        };
        tupCallWrapper.prototype.videoRenderCtrl = function (enableFlag) {
            tupCallWrapper.tupCall.remoteR.setRenderEnableFlag(enableFlag);
            tupCallWrapper.tupCall.localR.setRenderEnableFlag(enableFlag);
        };
        tupCallWrapper.prototype.setDropFrame = function (count) {
            tupCallWrapper.tupCall.remoteR.setDropFrame(count);
            tupCallWrapper.tupCall.localR.setDropFrame(count);
        };
        tupCallWrapper._instance = new tupCallWrapper();
        return tupCallWrapper;
    }());
    exports.default = tupCallWrapper;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

var def = __webpack_require__(8).f;
var has = __webpack_require__(16);
var TAG = __webpack_require__(6)('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var defined = __webpack_require__(31);
var fails = __webpack_require__(4);
var spaces = __webpack_require__(79);
var space = '[' + spaces + ']';
var non = '\u200b\u0085';
var ltrim = RegExp('^' + space + space + '*');
var rtrim = RegExp(space + space + '*$');

var exporter = function (KEY, exec, ALIAS) {
  var exp = {};
  var FORCE = fails(function () {
    return !!spaces[KEY]() || non[KEY]() != non;
  });
  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
  if (ALIAS) exp[ALIAS] = fn;
  $export($export.P + $export.F * FORCE, 'String', exp);
};

// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
var trim = exporter.trim = function (string, TYPE) {
  string = String(defined(string));
  if (TYPE & 1) string = string.replace(ltrim, '');
  if (TYPE & 2) string = string.replace(rtrim, '');
  return string;
};

module.exports = exporter;


/***/ }),
/* 54 */
/***/ (function(module, exports) {

module.exports = {};


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(5);
module.exports = function (it, TYPE) {
  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
  return it;
};


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = __webpack_require__(26);
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};


/***/ }),
/* 57 */
/***/ (function(module, exports) {

exports.f = {}.propertyIsEnumerable;


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = __webpack_require__(26);
var TAG = __webpack_require__(6)('toStringTag');
// ES3 wrong here
var ARG = cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(3);
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});
module.exports = function (key) {
  return store[key] || (store[key] = {});
};


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

// false -> Array#indexOf
// true  -> Array#includes
var toIObject = __webpack_require__(20);
var toLength = __webpack_require__(9);
var toAbsoluteIndex = __webpack_require__(44);
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};


/***/ }),
/* 61 */
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.2 IsArray(argument)
var cof = __webpack_require__(26);
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.8 IsRegExp(argument)
var isObject = __webpack_require__(5);
var cof = __webpack_require__(26);
var MATCH = __webpack_require__(6)('match');
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
};


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

var ITERATOR = __webpack_require__(6)('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function () { SAFE_CLOSING = true; };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () { throw 2; });
} catch (e) { /* empty */ }

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR]();
    iter.next = function () { return { done: safe = true }; };
    arr[ITERATOR] = function () { return iter; };
    exec(arr);
  } catch (e) { /* empty */ }
  return safe;
};


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 21.2.5.3 get RegExp.prototype.flags
var anObject = __webpack_require__(2);
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var hide = __webpack_require__(17);
var redefine = __webpack_require__(18);
var fails = __webpack_require__(4);
var defined = __webpack_require__(31);
var wks = __webpack_require__(6);

module.exports = function (KEY, length, exec) {
  var SYMBOL = wks(KEY);
  var fns = exec(defined, SYMBOL, ''[KEY]);
  var strfn = fns[0];
  var rxfn = fns[1];
  if (fails(function () {
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) != 7;
  })) {
    redefine(String.prototype, KEY, strfn);
    hide(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function (string, arg) { return rxfn.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function (string) { return rxfn.call(string, this); }
    );
  }
};


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = __webpack_require__(2);
var aFunction = __webpack_require__(15);
var SPECIES = __webpack_require__(6)('species');
module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(3);
var $export = __webpack_require__(0);
var redefine = __webpack_require__(18);
var redefineAll = __webpack_require__(50);
var meta = __webpack_require__(37);
var forOf = __webpack_require__(49);
var anInstance = __webpack_require__(48);
var isObject = __webpack_require__(5);
var fails = __webpack_require__(4);
var $iterDetect = __webpack_require__(64);
var setToStringTag = __webpack_require__(52);
var inheritIfRequired = __webpack_require__(80);

module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
  var Base = global[NAME];
  var C = Base;
  var ADDER = IS_MAP ? 'set' : 'add';
  var proto = C && C.prototype;
  var O = {};
  var fixMethod = function (KEY) {
    var fn = proto[KEY];
    redefine(proto, KEY,
      KEY == 'delete' ? function (a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'has' ? function has(a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'get' ? function get(a) {
        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }
        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }
    );
  };
  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
    new C().entries().next();
  }))) {
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    var instance = new C();
    // early implementations not supports chaining
    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
    // most early implementations doesn't supports iterables, most modern - not close it correctly
    var ACCEPT_ITERABLES = $iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new
    // for early implementations -0 and +0 not the same
    var BUGGY_ZERO = !IS_WEAK && fails(function () {
      // V8 ~ Chromium 42- fails only with 5+ elements
      var $instance = new C();
      var index = 5;
      while (index--) $instance[ADDER](index, index);
      return !$instance.has(-0);
    });
    if (!ACCEPT_ITERABLES) {
      C = wrapper(function (target, iterable) {
        anInstance(target, C, NAME);
        var that = inheritIfRequired(new Base(), target, C);
        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }
    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }
    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
    // weak collections should not contains .clear method
    if (IS_WEAK && proto.clear) delete proto.clear;
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F * (C != Base), O);

  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

  return C;
};


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(3);
var hide = __webpack_require__(17);
var uid = __webpack_require__(41);
var TYPED = uid('typed_array');
var VIEW = uid('view');
var ABV = !!(global.ArrayBuffer && global.DataView);
var CONSTR = ABV;
var i = 0;
var l = 9;
var Typed;

var TypedArrayConstructors = (
  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
).split(',');

while (i < l) {
  if (Typed = global[TypedArrayConstructors[i++]]) {
    hide(Typed.prototype, TYPED, true);
    hide(Typed.prototype, VIEW, true);
  } else CONSTR = false;
}

module.exports = {
  ABV: ABV,
  CONSTR: CONSTR,
  TYPED: TYPED,
  VIEW: VIEW
};


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Forced replacement prototype accessors methods
module.exports = __webpack_require__(42) || !__webpack_require__(4)(function () {
  var K = Math.random();
  // In FF throws only define methods
  // eslint-disable-next-line no-undef, no-useless-call
  __defineSetter__.call(null, K, function () { /* empty */ });
  delete __webpack_require__(3)[K];
});


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-setmap-offrom/
var $export = __webpack_require__(0);

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { of: function of() {
    var length = arguments.length;
    var A = Array(length);
    while (length--) A[length] = arguments[length];
    return new this(A);
  } });
};


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-setmap-offrom/
var $export = __webpack_require__(0);
var aFunction = __webpack_require__(15);
var ctx = __webpack_require__(25);
var forOf = __webpack_require__(49);

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { from: function from(source /* , mapFn, thisArg */) {
    var mapFn = arguments[1];
    var mapping, A, n, cb;
    aFunction(this);
    mapping = mapFn !== undefined;
    if (mapping) aFunction(mapFn);
    if (source == undefined) return new this();
    A = [];
    if (mapping) {
      n = 0;
      cb = ctx(mapFn, arguments[2], 2);
      forOf(source, false, function (nextItem) {
        A.push(cb(nextItem, n++));
      });
    } else {
      forOf(source, false, A.push, A);
    }
    return new this(A);
  } });
};


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(5);
var document = __webpack_require__(3).document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(3);
var core = __webpack_require__(29);
var LIBRARY = __webpack_require__(42);
var wksExt = __webpack_require__(101);
var defineProperty = __webpack_require__(8).f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__(59)('keys');
var uid = __webpack_require__(41);
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};


/***/ }),
/* 76 */
/***/ (function(module, exports) {

// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

var document = __webpack_require__(3).document;
module.exports = document && document.documentElement;


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = __webpack_require__(5);
var anObject = __webpack_require__(2);
var check = function (O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = __webpack_require__(25)(Function.call, __webpack_require__(21).f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) { buggy = true; }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};


/***/ }),
/* 79 */
/***/ (function(module, exports) {

module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(5);
var setPrototypeOf = __webpack_require__(78).set;
module.exports = function (that, target, C) {
  var S = target.constructor;
  var P;
  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
    setPrototypeOf(that, P);
  } return that;
};


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var toInteger = __webpack_require__(32);
var defined = __webpack_require__(31);

module.exports = function repeat(count) {
  var str = String(defined(this));
  var res = '';
  var n = toInteger(count);
  if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;
  return res;
};


/***/ }),
/* 82 */
/***/ (function(module, exports) {

// 20.2.2.28 Math.sign(x)
module.exports = Math.sign || function sign(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};


/***/ }),
/* 83 */
/***/ (function(module, exports) {

// 20.2.2.14 Math.expm1(x)
var $expm1 = Math.expm1;
module.exports = (!$expm1
  // Old FF bug
  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
  // Tor Browser bug
  || $expm1(-2e-17) != -2e-17
) ? function expm1(x) {
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
} : $expm1;


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(32);
var defined = __webpack_require__(31);
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(42);
var $export = __webpack_require__(0);
var redefine = __webpack_require__(18);
var hide = __webpack_require__(17);
var has = __webpack_require__(16);
var Iterators = __webpack_require__(54);
var $iterCreate = __webpack_require__(86);
var setToStringTag = __webpack_require__(52);
var getPrototypeOf = __webpack_require__(22);
var ITERATOR = __webpack_require__(6)('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var create = __webpack_require__(45);
var descriptor = __webpack_require__(40);
var setToStringTag = __webpack_require__(52);
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
__webpack_require__(17)(IteratorPrototype, __webpack_require__(6)('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

// helper for String#{startsWith, endsWith, includes}
var isRegExp = __webpack_require__(63);
var defined = __webpack_require__(31);

module.exports = function (that, searchString, NAME) {
  if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(defined(that));
};


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

var MATCH = __webpack_require__(6)('match');
module.exports = function (KEY) {
  var re = /./;
  try {
    '/./'[KEY](re);
  } catch (e) {
    try {
      re[MATCH] = false;
      return !'/./'[KEY](re);
    } catch (f) { /* empty */ }
  } return true;
};


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

// check on default Array iterator
var Iterators = __webpack_require__(54);
var ITERATOR = __webpack_require__(6)('iterator');
var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $defineProperty = __webpack_require__(8);
var createDesc = __webpack_require__(40);

module.exports = function (object, index, value) {
  if (index in object) $defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__(58);
var ITERATOR = __webpack_require__(6)('iterator');
var Iterators = __webpack_require__(54);
module.exports = __webpack_require__(29).getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = __webpack_require__(237);

module.exports = function (original, length) {
  return new (speciesConstructor(original))(length);
};


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)

var toObject = __webpack_require__(10);
var toAbsoluteIndex = __webpack_require__(44);
var toLength = __webpack_require__(9);
module.exports = function fill(value /* , start = 0, end = @length */) {
  var O = toObject(this);
  var length = toLength(O.length);
  var aLen = arguments.length;
  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
  var end = aLen > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
  while (endPos > index) O[index++] = value;
  return O;
};


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var addToUnscopables = __webpack_require__(38);
var step = __webpack_require__(117);
var Iterators = __webpack_require__(54);
var toIObject = __webpack_require__(20);

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = __webpack_require__(85)(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(25);
var invoke = __webpack_require__(107);
var html = __webpack_require__(77);
var cel = __webpack_require__(73);
var global = __webpack_require__(3);
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (__webpack_require__(26)(process) == 'process') {
    defer = function (id) {
      process.nextTick(ctx(run, id, 1));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function (id) {
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function (id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set: setTask,
  clear: clearTask
};


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(3);
var macrotask = __webpack_require__(95).set;
var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = __webpack_require__(26)(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function () {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver
  } else if (Observer) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    var promise = Promise.resolve();
    notify = function () {
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    } last = task;
  };
};


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 25.4.1.5 NewPromiseCapability(C)
var aFunction = __webpack_require__(15);

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(3);
var DESCRIPTORS = __webpack_require__(7);
var LIBRARY = __webpack_require__(42);
var $typed = __webpack_require__(69);
var hide = __webpack_require__(17);
var redefineAll = __webpack_require__(50);
var fails = __webpack_require__(4);
var anInstance = __webpack_require__(48);
var toInteger = __webpack_require__(32);
var toLength = __webpack_require__(9);
var toIndex = __webpack_require__(126);
var gOPN = __webpack_require__(46).f;
var dP = __webpack_require__(8).f;
var arrayFill = __webpack_require__(93);
var setToStringTag = __webpack_require__(52);
var ARRAY_BUFFER = 'ArrayBuffer';
var DATA_VIEW = 'DataView';
var PROTOTYPE = 'prototype';
var WRONG_LENGTH = 'Wrong length!';
var WRONG_INDEX = 'Wrong index!';
var $ArrayBuffer = global[ARRAY_BUFFER];
var $DataView = global[DATA_VIEW];
var Math = global.Math;
var RangeError = global.RangeError;
// eslint-disable-next-line no-shadow-restricted-names
var Infinity = global.Infinity;
var BaseBuffer = $ArrayBuffer;
var abs = Math.abs;
var pow = Math.pow;
var floor = Math.floor;
var log = Math.log;
var LN2 = Math.LN2;
var BUFFER = 'buffer';
var BYTE_LENGTH = 'byteLength';
var BYTE_OFFSET = 'byteOffset';
var $BUFFER = DESCRIPTORS ? '_b' : BUFFER;
var $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;
var $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;

// IEEE754 conversions based on https://github.com/feross/ieee754
function packIEEE754(value, mLen, nBytes) {
  var buffer = Array(nBytes);
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
  var i = 0;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  var e, m, c;
  value = abs(value);
  // eslint-disable-next-line no-self-compare
  if (value != value || value === Infinity) {
    // eslint-disable-next-line no-self-compare
    m = value != value ? 1 : 0;
    e = eMax;
  } else {
    e = floor(log(value) / LN2);
    if (value * (c = pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }
    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * pow(2, eBias - 1) * pow(2, mLen);
      e = 0;
    }
  }
  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
  buffer[--i] |= s * 128;
  return buffer;
}
function unpackIEEE754(buffer, mLen, nBytes) {
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = eLen - 7;
  var i = nBytes - 1;
  var s = buffer[i--];
  var e = s & 127;
  var m;
  s >>= 7;
  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : s ? -Infinity : Infinity;
  } else {
    m = m + pow(2, mLen);
    e = e - eBias;
  } return (s ? -1 : 1) * m * pow(2, e - mLen);
}

function unpackI32(bytes) {
  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
}
function packI8(it) {
  return [it & 0xff];
}
function packI16(it) {
  return [it & 0xff, it >> 8 & 0xff];
}
function packI32(it) {
  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
}
function packF64(it) {
  return packIEEE754(it, 52, 8);
}
function packF32(it) {
  return packIEEE754(it, 23, 4);
}

function addGetter(C, key, internal) {
  dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });
}

function get(view, bytes, index, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = store.slice(start, start + bytes);
  return isLittleEndian ? pack : pack.reverse();
}
function set(view, bytes, index, conversion, value, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = conversion(+value);
  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
}

if (!$typed.ABV) {
  $ArrayBuffer = function ArrayBuffer(length) {
    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
    var byteLength = toIndex(length);
    this._b = arrayFill.call(Array(byteLength), 0);
    this[$LENGTH] = byteLength;
  };

  $DataView = function DataView(buffer, byteOffset, byteLength) {
    anInstance(this, $DataView, DATA_VIEW);
    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
    var bufferLength = buffer[$LENGTH];
    var offset = toInteger(byteOffset);
    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
    this[$BUFFER] = buffer;
    this[$OFFSET] = offset;
    this[$LENGTH] = byteLength;
  };

  if (DESCRIPTORS) {
    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
    addGetter($DataView, BUFFER, '_b');
    addGetter($DataView, BYTE_LENGTH, '_l');
    addGetter($DataView, BYTE_OFFSET, '_o');
  }

  redefineAll($DataView[PROTOTYPE], {
    getInt8: function getInt8(byteOffset) {
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset) {
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1]));
    },
    getUint32: function getUint32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
    },
    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
    },
    setInt8: function setInt8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setUint8: function setUint8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packF32, value, arguments[2]);
    },
    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
      set(this, 8, byteOffset, packF64, value, arguments[2]);
    }
  });
} else {
  if (!fails(function () {
    $ArrayBuffer(1);
  }) || !fails(function () {
    new $ArrayBuffer(-1); // eslint-disable-line no-new
  }) || fails(function () {
    new $ArrayBuffer(); // eslint-disable-line no-new
    new $ArrayBuffer(1.5); // eslint-disable-line no-new
    new $ArrayBuffer(NaN); // eslint-disable-line no-new
    return $ArrayBuffer.name != ARRAY_BUFFER;
  })) {
    $ArrayBuffer = function ArrayBuffer(length) {
      anInstance(this, $ArrayBuffer);
      return new BaseBuffer(toIndex(length));
    };
    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);
    }
    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;
  }
  // iOS Safari 7.x bug
  var view = new $DataView(new $ArrayBuffer(2));
  var $setInt8 = $DataView[PROTOTYPE].setInt8;
  view.setInt8(0, 2147483648);
  view.setInt8(1, 2147483649);
  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
    setInt8: function setInt8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    }
  }, true);
}
setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);
hide($DataView[PROTOTYPE], $typed.VIEW, true);
exports[ARRAY_BUFFER] = $ArrayBuffer;
exports[DATA_VIEW] = $DataView;


/***/ }),
/* 99 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__(7) && !__webpack_require__(4)(function () {
  return Object.defineProperty(__webpack_require__(73)('div'), 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

exports.f = __webpack_require__(6);


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__(16);
var toIObject = __webpack_require__(20);
var arrayIndexOf = __webpack_require__(60)(false);
var IE_PROTO = __webpack_require__(75)('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(8);
var anObject = __webpack_require__(2);
var getKeys = __webpack_require__(43);

module.exports = __webpack_require__(7) ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = __webpack_require__(20);
var gOPN = __webpack_require__(46).f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.2.1 Object.assign(target, source, ...)
var getKeys = __webpack_require__(43);
var gOPS = __webpack_require__(61);
var pIE = __webpack_require__(57);
var toObject = __webpack_require__(10);
var IObject = __webpack_require__(56);
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || __webpack_require__(4)(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
  } return T;
} : $assign;


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var aFunction = __webpack_require__(15);
var isObject = __webpack_require__(5);
var invoke = __webpack_require__(107);
var arraySlice = [].slice;
var factories = {};

var construct = function (F, len, args) {
  if (!(len in factories)) {
    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';
    // eslint-disable-next-line no-new-func
    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  } return factories[len](F, args);
};

module.exports = Function.bind || function bind(that /* , ...args */) {
  var fn = aFunction(this);
  var partArgs = arraySlice.call(arguments, 1);
  var bound = function (/* args... */) {
    var args = partArgs.concat(arraySlice.call(arguments));
    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
  };
  if (isObject(fn.prototype)) bound.prototype = fn.prototype;
  return bound;
};


/***/ }),
/* 107 */
/***/ (function(module, exports) {

// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return fn.apply(that, args);
};


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

var $parseInt = __webpack_require__(3).parseInt;
var $trim = __webpack_require__(53).trim;
var ws = __webpack_require__(79);
var hex = /^[-+]?0[xX]/;

module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
  var string = $trim(String(str), 3);
  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
} : $parseInt;


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

var $parseFloat = __webpack_require__(3).parseFloat;
var $trim = __webpack_require__(53).trim;

module.exports = 1 / $parseFloat(__webpack_require__(79) + '-0') !== -Infinity ? function parseFloat(str) {
  var string = $trim(String(str), 3);
  var result = $parseFloat(string);
  return result === 0 && string.charAt(0) == '-' ? -0 : result;
} : $parseFloat;


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

var cof = __webpack_require__(26);
module.exports = function (it, msg) {
  if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);
  return +it;
};


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.3 Number.isInteger(number)
var isObject = __webpack_require__(5);
var floor = Math.floor;
module.exports = function isInteger(it) {
  return !isObject(it) && isFinite(it) && floor(it) === it;
};


/***/ }),
/* 112 */
/***/ (function(module, exports) {

// 20.2.2.20 Math.log1p(x)
module.exports = Math.log1p || function log1p(x) {
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
};


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.16 Math.fround(x)
var sign = __webpack_require__(82);
var pow = Math.pow;
var EPSILON = pow(2, -52);
var EPSILON32 = pow(2, -23);
var MAX32 = pow(2, 127) * (2 - EPSILON32);
var MIN32 = pow(2, -126);

var roundTiesToEven = function (n) {
  return n + 1 / EPSILON - 1 / EPSILON;
};

module.exports = Math.fround || function fround(x) {
  var $abs = Math.abs(x);
  var $sign = sign(x);
  var a, result;
  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
  a = (1 + EPSILON32 / EPSILON) * $abs;
  result = a - (a - $abs);
  // eslint-disable-next-line no-self-compare
  if (result > MAX32 || result != result) return $sign * Infinity;
  return $sign * result;
};


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

// call something on iterator step with safe closing on error
var anObject = __webpack_require__(2);
module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

var aFunction = __webpack_require__(15);
var toObject = __webpack_require__(10);
var IObject = __webpack_require__(56);
var toLength = __webpack_require__(9);

module.exports = function (that, callbackfn, aLen, memo, isRight) {
  aFunction(callbackfn);
  var O = toObject(that);
  var self = IObject(O);
  var length = toLength(O.length);
  var index = isRight ? length - 1 : 0;
  var i = isRight ? -1 : 1;
  if (aLen < 2) for (;;) {
    if (index in self) {
      memo = self[index];
      index += i;
      break;
    }
    index += i;
    if (isRight ? index < 0 : length <= index) {
      throw TypeError('Reduce of empty array with no initial value');
    }
  }
  for (;isRight ? index >= 0 : length > index; index += i) if (index in self) {
    memo = callbackfn(memo, self[index], index, O);
  }
  return memo;
};


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)

var toObject = __webpack_require__(10);
var toAbsoluteIndex = __webpack_require__(44);
var toLength = __webpack_require__(9);

module.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
  var O = toObject(this);
  var len = toLength(O.length);
  var to = toAbsoluteIndex(target, len);
  var from = toAbsoluteIndex(start, len);
  var end = arguments.length > 2 ? arguments[2] : undefined;
  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
  var inc = 1;
  if (from < to && to < from + count) {
    inc = -1;
    from += count - 1;
    to += count - 1;
  }
  while (count-- > 0) {
    if (from in O) O[to] = O[from];
    else delete O[to];
    to += inc;
    from += inc;
  } return O;
};


/***/ }),
/* 117 */
/***/ (function(module, exports) {

module.exports = function (done, value) {
  return { value: value, done: !!done };
};


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

// 21.2.5.3 get RegExp.prototype.flags()
if (__webpack_require__(7) && /./g.flags != 'g') __webpack_require__(8).f(RegExp.prototype, 'flags', {
  configurable: true,
  get: __webpack_require__(65)
});


/***/ }),
/* 119 */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(2);
var isObject = __webpack_require__(5);
var newPromiseCapability = __webpack_require__(97);

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var strong = __webpack_require__(122);
var validate = __webpack_require__(55);
var MAP = 'Map';

// 23.1 Map Objects
module.exports = __webpack_require__(68)(MAP, function (get) {
  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key) {
    var entry = strong.getEntry(validate(this, MAP), key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value) {
    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
  }
}, strong, true);


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var dP = __webpack_require__(8).f;
var create = __webpack_require__(45);
var redefineAll = __webpack_require__(50);
var ctx = __webpack_require__(25);
var anInstance = __webpack_require__(48);
var forOf = __webpack_require__(49);
var $iterDefine = __webpack_require__(85);
var step = __webpack_require__(117);
var setSpecies = __webpack_require__(47);
var DESCRIPTORS = __webpack_require__(7);
var fastKey = __webpack_require__(37).fastKey;
var validate = __webpack_require__(55);
var SIZE = DESCRIPTORS ? '_s' : 'size';

var getEntry = function (that, key) {
  // fast case
  var index = fastKey(key);
  var entry;
  if (index !== 'F') return that._i[index];
  // frozen object case
  for (entry = that._f; entry; entry = entry.n) {
    if (entry.k == key) return entry;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;         // collection type
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
          entry.r = true;
          if (entry.p) entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function (key) {
        var that = validate(this, NAME);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.n;
          var prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if (prev) prev.n = next;
          if (next) next.p = prev;
          if (that._f == entry) that._f = next;
          if (that._l == entry) that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /* , that = undefined */) {
        validate(this, NAME);
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;
        while (entry = entry ? entry.n : this._f) {
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while (entry && entry.r) entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(validate(this, NAME), key);
      }
    });
    if (DESCRIPTORS) dP(C.prototype, 'size', {
      get: function () {
        return validate(this, NAME)[SIZE];
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var entry = getEntry(that, key);
    var prev, index;
    // change existing entry
    if (entry) {
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if (!that._f) that._f = entry;
      if (prev) prev.n = entry;
      that[SIZE]++;
      // add to index
      if (index !== 'F') that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function (C, NAME, IS_MAP) {
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function (iterated, kind) {
      this._t = validate(iterated, NAME); // target
      this._k = kind;                     // kind
      this._l = undefined;                // previous
    }, function () {
      var that = this;
      var kind = that._k;
      var entry = that._l;
      // revert to the last existing entry
      while (entry && entry.r) entry = entry.p;
      // get next entry
      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if (kind == 'keys') return step(0, entry.k);
      if (kind == 'values') return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var strong = __webpack_require__(122);
var validate = __webpack_require__(55);
var SET = 'Set';

// 23.2 Set Objects
module.exports = __webpack_require__(68)(SET, function (get) {
  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value) {
    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
  }
}, strong);


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var each = __webpack_require__(34)(0);
var redefine = __webpack_require__(18);
var meta = __webpack_require__(37);
var assign = __webpack_require__(105);
var weak = __webpack_require__(125);
var isObject = __webpack_require__(5);
var fails = __webpack_require__(4);
var validate = __webpack_require__(55);
var WEAK_MAP = 'WeakMap';
var getWeak = meta.getWeak;
var isExtensible = Object.isExtensible;
var uncaughtFrozenStore = weak.ufstore;
var tmp = {};
var InternalMap;

var wrapper = function (get) {
  return function WeakMap() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
};

var methods = {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key) {
    if (isObject(key)) {
      var data = getWeak(key);
      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
      return data ? data[this._i] : undefined;
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value) {
    return weak.def(validate(this, WEAK_MAP), key, value);
  }
};

// 23.3 WeakMap Objects
var $WeakMap = module.exports = __webpack_require__(68)(WEAK_MAP, wrapper, methods, weak, true, true);

// IE11 WeakMap frozen keys fix
if (fails(function () { return new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7; })) {
  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
  assign(InternalMap.prototype, methods);
  meta.NEED = true;
  each(['delete', 'has', 'get', 'set'], function (key) {
    var proto = $WeakMap.prototype;
    var method = proto[key];
    redefine(proto, key, function (a, b) {
      // store frozen objects on internal weakmap shim
      if (isObject(a) && !isExtensible(a)) {
        if (!this._f) this._f = new InternalMap();
        var result = this._f[key](a, b);
        return key == 'set' ? this : result;
      // store all the rest on native weakmap
      } return method.call(this, a, b);
    });
  });
}


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var redefineAll = __webpack_require__(50);
var getWeak = __webpack_require__(37).getWeak;
var anObject = __webpack_require__(2);
var isObject = __webpack_require__(5);
var anInstance = __webpack_require__(48);
var forOf = __webpack_require__(49);
var createArrayMethod = __webpack_require__(34);
var $has = __webpack_require__(16);
var validate = __webpack_require__(55);
var arrayFind = createArrayMethod(5);
var arrayFindIndex = createArrayMethod(6);
var id = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function (that) {
  return that._l || (that._l = new UncaughtFrozenStore());
};
var UncaughtFrozenStore = function () {
  this.a = [];
};
var findUncaughtFrozen = function (store, key) {
  return arrayFind(store.a, function (it) {
    return it[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function (key) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) return entry[1];
  },
  has: function (key) {
    return !!findUncaughtFrozen(this, key);
  },
  set: function (key, value) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) entry[1] = value;
    else this.a.push([key, value]);
  },
  'delete': function (key) {
    var index = arrayFindIndex(this.a, function (it) {
      return it[0] === key;
    });
    if (~index) this.a.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;      // collection type
      that._i = id++;      // collection id
      that._l = undefined; // leak store for uncaught frozen objects
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function (key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
        return data && $has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
        return data && $has(data, this._i);
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var data = getWeak(anObject(key), true);
    if (data === true) uncaughtFrozenStore(that).set(key, value);
    else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};


/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/ecma262/#sec-toindex
var toInteger = __webpack_require__(32);
var toLength = __webpack_require__(9);
module.exports = function (it) {
  if (it === undefined) return 0;
  var number = toInteger(it);
  var length = toLength(number);
  if (number !== length) throw RangeError('Wrong length!');
  return length;
};


/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

// all object keys, includes non-enumerable and symbols
var gOPN = __webpack_require__(46);
var gOPS = __webpack_require__(61);
var anObject = __webpack_require__(2);
var Reflect = __webpack_require__(3).Reflect;
module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
  var keys = gOPN.f(anObject(it));
  var getSymbols = gOPS.f;
  return getSymbols ? keys.concat(getSymbols(it)) : keys;
};


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
var isArray = __webpack_require__(62);
var isObject = __webpack_require__(5);
var toLength = __webpack_require__(9);
var ctx = __webpack_require__(25);
var IS_CONCAT_SPREADABLE = __webpack_require__(6)('isConcatSpreadable');

function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
  var targetIndex = start;
  var sourceIndex = 0;
  var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;
  var element, spreadable;

  while (sourceIndex < sourceLen) {
    if (sourceIndex in source) {
      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

      spreadable = false;
      if (isObject(element)) {
        spreadable = element[IS_CONCAT_SPREADABLE];
        spreadable = spreadable !== undefined ? !!spreadable : isArray(element);
      }

      if (spreadable && depth > 0) {
        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
      } else {
        if (targetIndex >= 0x1fffffffffffff) throw TypeError();
        target[targetIndex] = element;
      }

      targetIndex++;
    }
    sourceIndex++;
  }
  return targetIndex;
}

module.exports = flattenIntoArray;


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-string-pad-start-end
var toLength = __webpack_require__(9);
var repeat = __webpack_require__(81);
var defined = __webpack_require__(31);

module.exports = function (that, maxLength, fillString, left) {
  var S = String(defined(that));
  var stringLength = S.length;
  var fillStr = fillString === undefined ? ' ' : String(fillString);
  var intMaxLength = toLength(maxLength);
  if (intMaxLength <= stringLength || fillStr == '') return S;
  var fillLen = intMaxLength - stringLength;
  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
  return left ? stringFiller + S : S + stringFiller;
};


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

var getKeys = __webpack_require__(43);
var toIObject = __webpack_require__(20);
var isEnum = __webpack_require__(57).f;
module.exports = function (isEntries) {
  return function (it) {
    var O = toIObject(it);
    var keys = getKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;
    while (length > i) if (isEnum.call(O, key = keys[i++])) {
      result.push(isEntries ? [key, O[key]] : O[key]);
    } return result;
  };
};


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var classof = __webpack_require__(58);
var from = __webpack_require__(132);
module.exports = function (NAME) {
  return function toJSON() {
    if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
    return from(this);
  };
};


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

var forOf = __webpack_require__(49);

module.exports = function (iter, ITERATOR) {
  var result = [];
  forOf(iter, false, result.push, result, ITERATOR);
  return result;
};


/***/ }),
/* 133 */
/***/ (function(module, exports) {

// https://rwaldron.github.io/proposal-math-extensions/
module.exports = Math.scale || function scale(x, inLow, inHigh, outLow, outHigh) {
  if (
    arguments.length === 0
      // eslint-disable-next-line no-self-compare
      || x != x
      // eslint-disable-next-line no-self-compare
      || inLow != inLow
      // eslint-disable-next-line no-self-compare
      || inHigh != inHigh
      // eslint-disable-next-line no-self-compare
      || outLow != outLow
      // eslint-disable-next-line no-self-compare
      || outHigh != outHigh
  ) return NaN;
  if (x === Infinity || x === -Infinity) return x;
  return (x - inLow) * (outHigh - outLow) / (inHigh - inLow) + outLow;
};


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(352), __webpack_require__(12), __webpack_require__(13)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, tupCmptWrapper_1, dispatcher_1, eventInfo_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var CmptManager = (function () {
        function CmptManager() {
            if (CmptManager._instance) {
                throw new Error("Error: Instantiation failed: Use CmptManager.getInstance() instead of new.");
            }
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CMPT_GET_CPU_USAGE, this.getcpuUsage, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CMPT_GET_MEMORY_USAGE, this.getMemoryUsage, this);
        }
        CmptManager.getInstance = function () {
            return CmptManager._instance;
        };
        CmptManager.prototype.do_action = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.tupCmptWrapper = tupCmptWrapper_1.default.getInstance();
                            return [4, this.tupCmptWrapper.build()];
                        case 1:
                            _a.sent();
                            return [4, this.tupCmptWrapper.logStart()];
                        case 2:
                            _a.sent();
                            return [2, { result: true }];
                    }
                });
            });
        };
        CmptManager.prototype.getcpuUsage = function (eventType, timeInterval, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.tupCmptWrapper.getcpuUsage(timeInterval)];
                        case 1:
                            data = _a.sent();
                            callback(data);
                            return [2];
                    }
                });
            });
        };
        CmptManager.prototype.getMemoryUsage = function (eventType, timeInterval, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.tupCmptWrapper.getMemoryUsage(timeInterval)];
                        case 1:
                            data = _a.sent();
                            callback(data);
                            return [2];
                    }
                });
            });
        };
        CmptManager._instance = new CmptManager();
        return CmptManager;
    }());
    exports.default = CmptManager;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CloudEC_CLIENTCONFIG = {
        USE_ESERVER: true,
        URL_NONAME: '',
        ISMOBILE: false,
        USE_MEETING: true,
        USE_IM: false,
        USE_CALL: true,
        LOGIN_FORGET_PASSWORD: true,
        TUP_PORT: 7683,
        TUP_ENABLE_JSON_LOG: 1,
        LOGIN_PROXY_BACKUP1_ADDR: "",
        LOGIN_PROXY_BACKUP1_PORT: "",
        LOGIN_PROXY_BACKUP2_ADDR: "",
        LOGIN_PROXY_BACKUP2_PORT: "",
        LOGIN_PROXY_BACKUP3_ADDR: "",
        LOGIN_PROXY_BACKUP3_PORT: "",
        LOGIN_SERVER_MORE: true,
        LOGIN_USERINFO_NUM: 10,
        LOGIN_RECONNECT_TIMER: 4000,
        CALL_DND: false,
        CALL_FORWORD: true,
        CALL_WAIT: true,
        VIDEO_CALL: true,
        INTELLIGENT_ROUTE: false,
        VIDEO_CONFIG_MEDIA_LEVEL: 32,
        VIDEO_CONFIG_MEDIA_MAX_BR: 0,
        VIDEO_CONFIG_MEDIA_MAX_MBPS: 0,
        VIDEO_CONFIG_MEDIA_MAX_FS: 0,
        VIDEO_CONFIG_MEDIA_CLARITY_FLUENCY_ENABLE: 0,
        VIDEO_CONFIG_MEDIA_VIDEO_TATIC: 1,
        VIDEO_CONFIG_MEDIA_H264_FORCE_SINGLE_PT: 1,
        VIDEO_CONFIG_MEDIA_SEC_VERSION: 1,
        VIDEO_CONFIG_MEDIA_VIDEO_ERRORCORRECTING: 1,
        "Device.ComCfg.Media.VideoArq": "0",
        "Device.ComCfg.Media.VideoHarq": "1",
        "Device.ComCfg.Media.EcPktInRtp": "1",
        "Device.ComCfg.Media.VideoNetRat": "0",
        "Device.ComCfg.Media.VideoKeyFrameIntervalNetRat": "150",
        DATA_CONFIG_MEDIA_LEVEL: 31,
        DATA_CONFIG_MEDIA_MAX_BR: 0,
        DATA_CONFIG_MEDIA_MAX_MBPS: 0,
        DATA_CONFIG_MEDIA_MAX_FS: 0,
        DATA_CONFIG_MEDIA_DATA_ERRORCORRECTING: 1,
        "Device.ComCfg.Media.DataArq": "0",
        "Device.ComCfg.Media.DataHarq": "1",
        "Device.ComCfg.Media.DataNetRat": "5",
        "Device.ComCfg.Media.DataKeyFrameIntervalNetRat": "0",
        IS_DEBUG: 1,
        "Device.ComCfg.Media.TmmbrControl": "1",
        "Device.ComCfg.Media.TotalBandwidth": "1024",
        "Device.ComCfg.Media.VideoARS": "1",
        "Device.ComCfg.Media.VideoARSFrameSize": "1",
        "Device.ComCfg.Media.VideoARSFrameRate": "1",
        "Device.ComCfg.Media.VideoARSBitRate": "1",
        "Device.ComCfg.Media.VideoArsFec": "1",
        "Device.ComCfg.Media.VideoShaping": "1",
        "Device.ComCfg.Media.DataARS": "1",
        "Device.ComCfg.Media.DataARSFrameSize": "0",
        "Device.ComCfg.Media.DataARSFrameRate": "1",
        "Device.ComCfg.Media.DataARSBitRate": "1",
        "Device.ComCfg.Media.DataArsFec": "1",
        "Device.ComCfg.Media.DataShaping": "1",
        "Device.ComCfg.Media.BFCPMode": "1",
        "Device.ComCfg.Media.VideoCfg.sec": "0",
        "Device.ComCfg.Media.StreamAutomaticallyHangUp": "0",
        "Device.ComCfg.Media.BandwidthLimit": "0",
        "Device.ComCfg.Media.priorityRtp": "1",
        "Device.ComCfg.Media.EncryptCalloutUseMKI": "0",
        "Device.ComCfg.Sip.TransferMode": "0",
        "Device.ComCfg.Sip.sipDSCP": "",
        "Device.ComCfg.Sip.RegistSendPeriods": "",
        "Device.ComCfg.Sip.LocalPort": "5060",
        "Device.ComCfg.Sip.enableSessionTimer": "1",
        "Device.ComCfg.Sip.SessionTime": "180",
        "Device.ComCfg.Sip.enableRegistStatusSubscribe": "",
        "Device.ComCfg.Sip.RejectCallType": "",
        DEFAULT_MENU: "recent",
        MENU_LIST: ["recent", "contactGroups", "conference", "call", "webCollection"],
        MOBILE_DEFAULT_MENU: "recent",
        debug: 0,
        height: 720,
        width: 1280,
        DONT_SHOWMESSAGE_NOTIFICATION: false,
        CONTACT_ASYNC_UPDATE_TIMESTAMP: 19000000000000,
        FIXEDGROUPMEMBER_ASYNC_UPDATE_TIMESTAMP: 19000000000000,
        SERVICEPROFILE_ASYNC_UPDATE_TIMESTAMP: 19000000000000,
        DEFAULT_INLINE_STYLE: {
            fontFamily: "Microsoft YaHei",
            fontSize: "14",
            color: "#000000",
            fontWeight: "normal",
            fontStyle: "normal",
            textDecoration: "none"
        },
        DEFAULT_LANGUAGE: "2052",
        EMOJI_COUNT: 89,
        MIC_GAIN: 1,
        SPK_GAIN: 1,
        is_use_vchosting: 0,
        vc_sip_server: "",
        vc_sip_server_port: "",
        vc_sip_num: "",
        vc_sip_password: "",
        vc_sip_pwdtype: "",
        user_agent: "",
        sip_domain: "",
        cur_camera: "",
        LOG_MAX_UPLOAD_SIZE: 50,
        ACS_PERIODICINFORMENABLE_NAME: 'Device.ManagementServer.PeriodicInformEnable',
        ACS_PERIODICINFORMENABLE_VALUE: 1,
        ACS_PERIODICINFORMENABLE_TYPE: 'unsignedInt',
        ACS_PERIODICINFORMINTERVAL_NAME: 'Device.ManagementServer.PeriodicInformInterval',
        ACS_PERIODICINFORMINTERVAL_VALUE: 180,
        ACS_PERIODICINFORMINTERVAL_TYPE: 'unsignedInt',
        ACS_CONNECTIONREQUESTURL_NAME: 'Device.ManagementServer.ConnectionRequestURL',
        ACS_CONNECTIONREQUESTURL_VALUE: '',
        ACS_CONNECTIONREQUESTURL_TYPE: 'string',
        ACS_CONNECTIONREQUESTUSERNAME_NAME: 'Device.ManagementServer.ConnectionRequestUsername',
        ACS_CONNECTIONREQUESTUSERNAME_VALUE: '',
        ACS_CONNECTIONREQUESTUSERNAME_TYPE: 'string',
        ACS_CONNECTIONREQUESTPASSWORD_NAME: 'Device.ManagementServer.ConnectionRequestPassword',
        ACS_CONNECTIONREQUESTPASSWORD_VALUE: '',
        ACS_CONNECTIONREQUESTPASSWORD_TYPE: 'string',
        ACS_MANUFACTURER_NAME: 'Device.DeviceInfo.Manufacturer',
        ACS_MANUFACTURER_VALUE: 'HUAWEI',
        ACS_MANUFACTURER_TYPE: 'string',
        ACS_MANUFACTUREROUI_NAME: 'Device.DeviceInfo.ManufacturerOUI',
        ACS_MANUFACTUREROUI_VALUE: 'WeLink',
        ACS_MANUFACTUREROUI_TYPE: 'string',
        ACS_SOFTWAREVERSION_NAME: 'Device.DeviceInfo.SoftwareVersion',
        ACS_SOFTWAREVERSION_VALUE: '3.0.3.9',
        ACS_SOFTWAREVERSION_TYPE: 'string',
        UPDATE_DOWNLOAD_TIMEOUT: 300,
        ACS_HTTP_CONN_LISTEN_PORT: 8085,
        ACS_CONNECTIONSTUNSERVER_ADDRESS_NAME: 'Device.ManagementServer.STUNServerAddress',
        ACS_CONNECTIONSTUNSERVER_ADDRESS_VALUE: '',
        ACS_CONNECTIONSTUNSERVER_ADDRESS_TYPE: 'string',
        ACS_CONNECTIONSTUNSERVER_PORT_NAME: 'Device.ManagementServer.STUNServerPort',
        ACS_CONNECTIONSTUNSERVER_PORT_VALUE: '',
        ACS_CONNECTIONSTUNSERVER_PORT_TYPE: 'string',
        ACS_CONNECTIONSTUNUSERNAME_NAME: 'Device.ManagementServer.STUNUsername',
        ACS_CONNECTIONSTUNUSERNAME_VALUE: '',
        ACS_CONNECTIONSTUNUSERNAME_TYPE: 'string',
        ACS_CONNECTIONSTUNPASSWORD_NAME: 'Device.ManagementServer.STUNPassword',
        ACS_CONNECTIONSTUNPASSWORD_VALUE: '',
        ACS_CONNECTIONSTUNPASSWORD_TYPE: 'string',
        ACS_CONNECTIONSTUN_MIN_ALIVEPERIOD_NAME: 'Device.ManagementServer.STUNMinimumKeepAlivePeriod',
        ACS_CONNECTIONSTUN_MIN_ALIVEPERIOD_VALUE: '',
        ACS_CONNECTIONSTUN_MIN_ALIVEPERIOD_TYPE: 'string',
        ACS_CONNECTIONSTUN_MAX_ALIVEPERIOD_NAME: 'Device.ManagementServer.STUNMaximumKeepAlivePeriod',
        ACS_CONNECTIONSTUN_MAX_ALIVEPERIOD_VALUE: '',
        ACS_CONNECTIONSTUN_MAX_ALIVEPERIOD_TYPE: 'string',
        ACS_CONNECTIONSTUN_STG_SERVER_ADDRESS_NAME: 'Device.ManagementServer.STUNSTGServerAddress',
        ACS_CONNECTIONSTUN_STG_SERVER_ADDRESS_VALUE: '',
        ACS_CONNECTIONSTUN_STG_SERVER_ADDRESS_TYPE: 'string',
        ACS_CONNECTIONSTUN_STG_SERVER_PORT_NAME: 'Device.ManagementServer.STUNSTGServerPort',
        ACS_CONNECTIONSTUN_STG_SERVER_PORT_VALUE: '',
        ACS_CONNECTIONSTUN_STG_SERVER_PORT_TYPE: 'string',
        ACS_CONNECTIONSTUN_ENABLE: 'Device.ManagementServer.STUNEnable',
        MAX_IMAGE_COUNT: 5,
        MESSAGE_LIST_PAGE_SIZE: 15,
        MOBILE_MESSAGE_LIST_PAGE_SIZE: 15,
        "Device.ComCfg.IM.LimitText": "1000",
        "Device.ComCfg.IM.limitpic": "2048",
        "Device.ComCfg.IM.limitscreenshot": "1000",
        "Device.ComCfg.IM.forbidFileExt": "bat;c;js",
        "Device.ComCfg.IM.perFragmentsize": "5",
        "Device.ComCfg.IM.limitBody": "2560",
        "Device.ComCfg.IM.MaxContact": "250",
        "Device.ComCfg.IM.offlineFileDisable": "7",
        "Device.ComCfg.IM.fileTransferSize": "1024",
        "Device.ComCfg.IM.msgReadReportTime": "60",
        "Device.ComCfg.IM.customFacesize": "2048",
        "Device.ComCfg.IM.archiveExpireDay": "30",
        "Device.ComCfg.IM.archiveTimingHour": "5",
        "Device.ComCfg.IM.archiveMaxDBsize": "30",
        "Device.ComCfg.CHR.enableCHR": "FLASE",
        "Device.ComCfg.CHR.CHRAddress": "",
        "Device.ComCfg.CHR.CHRName": "",
        "Device.ComCfg.CHR.CHRPas": "",
        "Device.ComCfg.CHR.CHRPer": "300",
        "Device.ComCfg.CHR.CHRColPer": "60",
        CLOUDEC_FOR_PUBLISH_SERVER: "cloudec.huaweicloud.com",
        CLOUDEC_FOR_PUBLISH_PORT: "8443",
        MESSAGE_NOTIFY_TIMEOUT: 8000,
        GROUP_NOTIFY_TIMEOUT: 8000,
        MESSAGE_TOAST_TIMEOUT: 3000,
        GROUP_NAME_NUM_LIMIT: 50,
        GROUP_MANIFESTO_NUM_LIMIT: 199,
    };
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, util_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var YUVCanvas = (function () {
        function YUVCanvas(parOptions) {
            var _this = this;
            this.width = 0;
            this.height = 0;
            this.isWebGL = function () {
                return _this.contextGL;
            };
            this.changeCanvasSize = function (width, height) {
                _this.width = width;
                _this.height = height;
                _this.canvasElement.width = width;
                _this.canvasElement.height = height;
                _this.canvasElement.style.width = width;
                _this.canvasElement.style.height = height;
            };
            this.initContextGL = function () {
                var canvas = _this.canvasElement;
                var gl = null;
                var validContextNames = ["webgl", "experimental-webgl", "moz-webgl", "webkit-3d"];
                var nameIndex = 0;
                while (!gl && nameIndex < validContextNames.length) {
                    var contextName = validContextNames[nameIndex];
                    try {
                        if (_this.contextOptions) {
                            gl = canvas.getContext(contextName, _this.contextOptions);
                        }
                        else {
                            gl = canvas.getContext(contextName);
                        }
                        ;
                    }
                    catch (e) {
                        gl = null;
                    }
                    if (!gl || typeof gl.getParameter !== "function") {
                        gl = null;
                    }
                    ++nameIndex;
                }
                ;
                _this.contextGL = gl;
            };
            this.initProgram = function () {
                var gl = _this.contextGL;
                var vertexShaderScript;
                var fragmentShaderScript;
                if (_this.type === "yuv420") {
                    vertexShaderScript = [
                        'attribute vec4 vertexPos;',
                        'attribute vec4 texturePos;',
                        'attribute vec4 uTexturePos;',
                        'attribute vec4 vTexturePos;',
                        'varying vec2 textureCoord;',
                        'varying vec2 uTextureCoord;',
                        'varying vec2 vTextureCoord;',
                        'void main()',
                        '{',
                        '  gl_Position = vertexPos;',
                        '  textureCoord = texturePos.xy;',
                        '  uTextureCoord = uTexturePos.xy;',
                        '  vTextureCoord = vTexturePos.xy;',
                        '}'
                    ].join('\n');
                    fragmentShaderScript = [
                        'precision highp float;',
                        'varying highp vec2 textureCoord;',
                        'varying highp vec2 uTextureCoord;',
                        'varying highp vec2 vTextureCoord;',
                        'uniform sampler2D ySampler;',
                        'uniform sampler2D uSampler;',
                        'uniform sampler2D vSampler;',
                        'uniform mat4 YUV2RGB;',
                        'void main(void) {',
                        '  highp float y = texture2D(ySampler,  textureCoord).r;',
                        '  highp float u = texture2D(uSampler,  uTextureCoord).r;',
                        '  highp float v = texture2D(vSampler,  vTextureCoord).r;',
                        '  gl_FragColor = vec4(y, u, v, 1) * YUV2RGB;',
                        '}'
                    ].join('\n');
                }
                else if (_this.type === "yuv422") {
                    vertexShaderScript = [
                        'attribute vec4 vertexPos;',
                        'attribute vec4 texturePos;',
                        'varying vec2 textureCoord;',
                        'void main()',
                        '{',
                        '  gl_Position = vertexPos;',
                        '  textureCoord = texturePos.xy;',
                        '}'
                    ].join('\n');
                    fragmentShaderScript = [
                        'precision highp float;',
                        'varying highp vec2 textureCoord;',
                        'uniform sampler2D sampler;',
                        'uniform highp vec2 resolution;',
                        'uniform mat4 YUV2RGB;',
                        'void main(void) {',
                        '  highp float texPixX = 1.0 / resolution.x;',
                        '  highp float logPixX = 2.0 / resolution.x;',
                        '  highp float logHalfPixX = 4.0 / resolution.x;',
                        '  highp float steps = floor(textureCoord.x / logPixX);',
                        '  highp float uvSteps = floor(textureCoord.x / logHalfPixX);',
                        '  highp float y = texture2D(sampler, vec2((logPixX * steps) + texPixX, textureCoord.y)).r;',
                        '  highp float u = texture2D(sampler, vec2((logHalfPixX * uvSteps), textureCoord.y)).r;',
                        '  highp float v = texture2D(sampler, vec2((logHalfPixX * uvSteps) + texPixX + texPixX, textureCoord.y)).r;',
                        '  gl_FragColor = vec4(y, u, v, 1.0) * YUV2RGB;',
                        '}'
                    ].join('\n');
                }
                ;
                var YUV2RGB = [];
                if (_this.conversionType == "rec709") {
                    YUV2RGB = [
                        1.16438, 0.00000, 1.79274, -0.97295,
                        1.16438, -0.21325, -0.53291, 0.30148,
                        1.16438, 2.11240, 0.00000, -1.13340,
                        0, 0, 0, 1,
                    ];
                }
                else {
                    YUV2RGB = [
                        1.16438, 0.00000, 1.59603, -0.87079,
                        1.16438, -0.39176, -0.81297, 0.52959,
                        1.16438, 2.01723, 0.00000, -1.08139,
                        0, 0, 0, 1
                    ];
                }
                ;
                var vertexShader = gl.createShader(gl.VERTEX_SHADER);
                gl.shaderSource(vertexShader, vertexShaderScript);
                gl.compileShader(vertexShader);
                if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {
                    util_1.default.info("YUVCanvas", 'Vertex shader failed to compile: ' + JSON.stringify(gl.getShaderInfoLog(vertexShader)));
                }
                var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
                gl.shaderSource(fragmentShader, fragmentShaderScript);
                gl.compileShader(fragmentShader);
                if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
                    util_1.default.info("YUVCanvas", 'Fragment shader failed to compile: ' + JSON.stringify(gl.getShaderInfoLog(fragmentShader)));
                }
                var program = gl.createProgram();
                gl.attachShader(program, vertexShader);
                gl.attachShader(program, fragmentShader);
                gl.linkProgram(program);
                if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
                    util_1.default.info("YUVCanvas", 'Program failed to compile: ' + JSON.stringify(gl.getProgramInfoLog(program)));
                }
                gl.useProgram(program);
                var YUV2RGBRef = gl.getUniformLocation(program, 'YUV2RGB');
                gl.uniformMatrix4fv(YUV2RGBRef, false, YUV2RGB);
                _this.shaderProgram = program;
            };
            this.initBuffers = function () {
                var gl = _this.contextGL;
                var program = _this.shaderProgram;
                var vertexPosBuffer = gl.createBuffer();
                gl.bindBuffer(gl.ARRAY_BUFFER, vertexPosBuffer);
                gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([1, 1, -1, 1, 1, -1, -1, -1]), gl.STATIC_DRAW);
                var vertexPosRef = gl.getAttribLocation(program, 'vertexPos');
                gl.enableVertexAttribArray(vertexPosRef);
                gl.vertexAttribPointer(vertexPosRef, 2, gl.FLOAT, false, 0, 0);
                if (_this.animationTime) {
                    var animationTime = _this.animationTime;
                    var timePassed = 0;
                    var stepTime = 15;
                    var aniFun = function () {
                        timePassed += stepTime;
                        var mul = (1 * timePassed) / animationTime;
                        if (timePassed >= animationTime) {
                            mul = 1;
                        }
                        else {
                            setTimeout(aniFun, stepTime);
                        }
                        ;
                        var neg = -1 * mul;
                        var pos = 1 * mul;
                        var vertexPosBuffer = gl.createBuffer();
                        gl.bindBuffer(gl.ARRAY_BUFFER, vertexPosBuffer);
                        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([pos, pos, neg, pos, pos, neg, neg, neg]), gl.STATIC_DRAW);
                        var vertexPosRef = gl.getAttribLocation(program, 'vertexPos');
                        gl.enableVertexAttribArray(vertexPosRef);
                        gl.vertexAttribPointer(vertexPosRef, 2, gl.FLOAT, false, 0, 0);
                        try {
                            gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
                        }
                        catch (e) { }
                        ;
                    };
                    aniFun();
                }
                ;
                var texturePosBuffer = gl.createBuffer();
                gl.bindBuffer(gl.ARRAY_BUFFER, texturePosBuffer);
                gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([1, 0, 0, 0, 1, 1, 0, 1]), gl.STATIC_DRAW);
                var texturePosRef = gl.getAttribLocation(program, 'texturePos');
                gl.enableVertexAttribArray(texturePosRef);
                gl.vertexAttribPointer(texturePosRef, 2, gl.FLOAT, false, 0, 0);
                _this.texturePosBuffer = texturePosBuffer;
                if (_this.type === "yuv420") {
                    var uTexturePosBuffer = gl.createBuffer();
                    gl.bindBuffer(gl.ARRAY_BUFFER, uTexturePosBuffer);
                    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([1, 0, 0, 0, 1, 1, 0, 1]), gl.STATIC_DRAW);
                    var uTexturePosRef = gl.getAttribLocation(program, 'uTexturePos');
                    gl.enableVertexAttribArray(uTexturePosRef);
                    gl.vertexAttribPointer(uTexturePosRef, 2, gl.FLOAT, false, 0, 0);
                    _this.uTexturePosBuffer = uTexturePosBuffer;
                    var vTexturePosBuffer = gl.createBuffer();
                    gl.bindBuffer(gl.ARRAY_BUFFER, vTexturePosBuffer);
                    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([1, 0, 0, 0, 1, 1, 0, 1]), gl.STATIC_DRAW);
                    var vTexturePosRef = gl.getAttribLocation(program, 'vTexturePos');
                    gl.enableVertexAttribArray(vTexturePosRef);
                    gl.vertexAttribPointer(vTexturePosRef, 2, gl.FLOAT, false, 0, 0);
                    _this.vTexturePosBuffer = vTexturePosBuffer;
                }
                ;
            };
            this.initTextures = function () {
                var gl = _this.contextGL;
                var program = _this.shaderProgram;
                if (_this.type === "yuv420") {
                    var yTextureRef = _this.initTexture();
                    var ySamplerRef = gl.getUniformLocation(program, 'ySampler');
                    gl.uniform1i(ySamplerRef, 0);
                    _this.yTextureRef = yTextureRef;
                    var uTextureRef = _this.initTexture();
                    var uSamplerRef = gl.getUniformLocation(program, 'uSampler');
                    gl.uniform1i(uSamplerRef, 1);
                    _this.uTextureRef = uTextureRef;
                    var vTextureRef = _this.initTexture();
                    var vSamplerRef = gl.getUniformLocation(program, 'vSampler');
                    gl.uniform1i(vSamplerRef, 2);
                    _this.vTextureRef = vTextureRef;
                }
                else if (_this.type === "yuv422") {
                    var textureRef = _this.initTexture();
                    var samplerRef = gl.getUniformLocation(program, 'sampler');
                    gl.uniform1i(samplerRef, 0);
                    _this.textureRef = textureRef;
                }
                ;
            };
            this.initTexture = function () {
                var gl = _this.contextGL;
                var textureRef = gl.createTexture();
                gl.bindTexture(gl.TEXTURE_2D, textureRef);
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
                gl.bindTexture(gl.TEXTURE_2D, null);
                return textureRef;
            };
            this.drawNextOutputPicture = function (width, height, croppingParams, data) {
                var gl = _this.contextGL;
                if (gl) {
                    _this.drawNextOuptutPictureGL(width, height, croppingParams, data);
                }
                else {
                    _this.drawNextOuptutPictureRGBA(width, height, croppingParams, data);
                }
            };
            this.drawNextOuptutPictureRGBA = function (width, height, croppingParams, data) {
                var canvas = _this.canvasElement;
                var croppingParams = null;
                var argbData = data;
                var ctx = canvas.getContext('2d');
                var imageData = ctx.getImageData(0, 0, width, height);
                imageData.data.set(argbData);
                if (croppingParams === null) {
                    ctx.putImageData(imageData, 0, 0);
                }
                else {
                    ctx.putImageData(imageData, -croppingParams.left, -croppingParams.top, 0, 0, croppingParams.width, croppingParams.height);
                }
            };
            parOptions = parOptions || {};
            this.canvasElement = parOptions.canvas || document.createElement("canvas");
            this.contextOptions = parOptions.contextOptions;
            this.type = parOptions.type || "yuv420";
            this.customYUV444 = parOptions.customYUV444;
            this.conversionType = parOptions.conversionType || "rec601";
            this.width = parOptions.width || 640;
            this.height = parOptions.height || 480;
            this.animationTime = parOptions.animationTime || 0;
            this.canvasElement.width = this.width;
            this.canvasElement.height = this.height;
            this.initContextGL();
            if (this.contextGL) {
                this.initProgram();
                this.initBuffers();
                this.initTextures();
            }
            ;
            if (this.type === "yuv420") {
                this.drawNextOuptutPictureGL = function (par) {
                    var gl = _this.contextGL;
                    var texturePosBuffer = _this.texturePosBuffer;
                    var uTexturePosBuffer = _this.uTexturePosBuffer;
                    var vTexturePosBuffer = _this.vTexturePosBuffer;
                    var yTextureRef = _this.yTextureRef;
                    var uTextureRef = _this.uTextureRef;
                    var vTextureRef = _this.vTextureRef;
                    var yData = par.yData;
                    var uData = par.uData;
                    var vData = par.vData;
                    var width = _this.width;
                    var height = _this.height;
                    var yDataPerRow = par.yDataPerRow || width;
                    var yRowCnt = par.yRowCnt || height;
                    var uDataPerRow = par.uDataPerRow || (width / 2);
                    var uRowCnt = par.uRowCnt || (height / 2);
                    var vDataPerRow = par.vDataPerRow || uDataPerRow;
                    var vRowCnt = par.vRowCnt || uRowCnt;
                    gl.viewport(0, 0, width, height);
                    var tTop = 0;
                    var tLeft = 0;
                    var tBottom = 1;
                    var tRight = 1;
                    if (width / height > yDataPerRow / yRowCnt) {
                        var adjStep = (yRowCnt * width - height * yDataPerRow) / (yRowCnt * width * 2);
                        tTop += adjStep;
                        tBottom -= adjStep;
                    }
                    else if ((width / height < yDataPerRow / yRowCnt)) {
                        var adjStep = (yDataPerRow * height - width * yRowCnt) / (yDataPerRow * height * 2);
                        tLeft += adjStep;
                        tRight -= adjStep;
                    }
                    var texturePosValues = new Float32Array([tRight, tTop, tLeft, tTop, tRight, tBottom, tLeft, tBottom]);
                    gl.bindBuffer(gl.ARRAY_BUFFER, texturePosBuffer);
                    gl.bufferData(gl.ARRAY_BUFFER, texturePosValues, gl.DYNAMIC_DRAW);
                    var uTexturePosValues = new Float32Array([tRight, tTop, tLeft, tTop, tRight, tBottom, tLeft, tBottom]);
                    gl.bindBuffer(gl.ARRAY_BUFFER, uTexturePosBuffer);
                    gl.bufferData(gl.ARRAY_BUFFER, uTexturePosValues, gl.DYNAMIC_DRAW);
                    var vTexturePosValues = new Float32Array([tRight, tTop, tLeft, tTop, tRight, tBottom, tLeft, tBottom]);
                    gl.bindBuffer(gl.ARRAY_BUFFER, vTexturePosBuffer);
                    gl.bufferData(gl.ARRAY_BUFFER, vTexturePosValues, gl.DYNAMIC_DRAW);
                    gl.activeTexture(gl.TEXTURE0);
                    gl.bindTexture(gl.TEXTURE_2D, yTextureRef);
                    gl.texImage2D(gl.TEXTURE_2D, 0, gl.LUMINANCE, yDataPerRow, yRowCnt, 0, gl.LUMINANCE, gl.UNSIGNED_BYTE, yData);
                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
                    gl.activeTexture(gl.TEXTURE1);
                    gl.bindTexture(gl.TEXTURE_2D, uTextureRef);
                    gl.texImage2D(gl.TEXTURE_2D, 0, gl.LUMINANCE, uDataPerRow, uRowCnt, 0, gl.LUMINANCE, gl.UNSIGNED_BYTE, uData);
                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
                    gl.activeTexture(gl.TEXTURE2);
                    gl.bindTexture(gl.TEXTURE_2D, vTextureRef);
                    gl.texImage2D(gl.TEXTURE_2D, 0, gl.LUMINANCE, vDataPerRow, vRowCnt, 0, gl.LUMINANCE, gl.UNSIGNED_BYTE, vData);
                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
                    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
                };
            }
            else if (this.type === "yuv422") {
                this.drawNextOuptutPictureGL = function (par) {
                    var gl = _this.contextGL;
                    var texturePosBuffer = _this.texturePosBuffer;
                    var textureRef = _this.textureRef;
                    var data = par.data;
                    var width = _this.width;
                    var height = _this.height;
                    var dataPerRow = par.dataPerRow || (width * 2);
                    var rowCnt = par.rowCnt || height;
                    gl.viewport(0, 0, width, height);
                    var tTop = 0;
                    var tLeft = 0;
                    var tBottom = height / rowCnt;
                    var tRight = width / (dataPerRow / 2);
                    var texturePosValues = new Float32Array([tRight, tTop, tLeft, tTop, tRight, tBottom, tLeft, tBottom]);
                    gl.bindBuffer(gl.ARRAY_BUFFER, texturePosBuffer);
                    gl.bufferData(gl.ARRAY_BUFFER, texturePosValues, gl.DYNAMIC_DRAW);
                    gl.uniform2f(gl.getUniformLocation(_this.shaderProgram, 'resolution'), dataPerRow, height);
                    gl.activeTexture(gl.TEXTURE0);
                    gl.bindTexture(gl.TEXTURE_2D, textureRef);
                    gl.texImage2D(gl.TEXTURE_2D, 0, gl.LUMINANCE, dataPerRow, rowCnt, 0, gl.LUMINANCE, gl.UNSIGNED_BYTE, data);
                    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
                };
            }
            ;
        }
        ;
        return YUVCanvas;
    }());
    exports.default = YUVCanvas;
    ;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(361), __webpack_require__(362), __webpack_require__(51), __webpack_require__(363), __webpack_require__(28), __webpack_require__(12), __webpack_require__(13), __webpack_require__(11), __webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, audioCallService_1, videoCallService_1, tupCallWrapper_1, tupNativeWndWrapper_1, observer_1, dispatcher_1, eventInfo_1, enum_1, util_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var CallManager = (function () {
        function CallManager() {
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CALL_START_CALL, this.startCall, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CALL_ACCEPT_CALL, this.acceptCall, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CALL_REJECT_CALL, this.endCall, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CALL_HOLD_CALL, this.holdCall, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CALL_UNHOLD_CALL, this.unHoldCall, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CALL_SEND_DTMF, this.dialDTMF, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CALL_SET_VIDEO_RENDER, this.setVideoRender, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CALL_SET_LOCAL_VIDEOWH, this.setLocalVideoWH, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CALL_SET_REMOTE_VIDEOWH, this.setRemoteVideoWH, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_DEVC_GET_MEDIA_DEVICE, this.getMediaDeviceType, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_DEVC_SET_MEDIA_DEVICE, this.setMediaDevice, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_DEVC_GET_VOICE, this.getVoiceVol, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_DEVC_SET_VOICE, this.setVoiceVol, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_VIDEO_SWITCH, this.videoSwitch, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_MIC_SWITCH, this.micSwitch, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CALL_START_PLAY_MEDIA_FILE, this.startPlayMediaFile, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CALL_STOP_PLAY_MEDIA_FILE, this.stopPlayMediaFile, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CALL_ADD_VIDEO, this.addVideo, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CALL_DEL_VIDEO, this.delVideo, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CALL_REPLY_ADD_VIDEO, this.replyAddVideo, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CALL_SET_IPT_SERVICE, this.setIPTService, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CALL_BLIND_TRANSFER, this.blindTransfer, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CALL_NATIVEWND_INIT, this.nativewndInit, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CALL_NATIVEWND_CREATE_WINDOW, this.nativewdCreateWindow, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CALL_NATIVEWND_DESTROY_WINDOW, this.nativewdDestroyWindow, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CALL_NATIVEWND_UNINIT, this.nativewndUninit, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CALL_SET_VIDEO_WINDOW, this.setVideoWindow, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CALL_RESET_NATIVEWND_SIZE, this.resetNativewndSize, this);
        }
        CallManager.prototype.startCall = function (event, callee, isVideo, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var callInfo, call, res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            callInfo = { tel_num: callee, call_type: isVideo };
                            call = CallManager.getCallObject(callInfo, isVideo);
                            return [4, call.startCall(callInfo, isVideo)];
                        case 1:
                            res = _a.sent();
                            if (res) {
                                CallManager.CallList[call.callInfo.callId] = call;
                                util_1.default.info("callManager", 'start call success');
                            }
                            else {
                                util_1.default.debug("callManager", 'start call failed');
                            }
                            callback(res);
                            return [2];
                    }
                });
            });
        };
        CallManager.prototype.acceptCall = function (event, callId, isVideo) {
            return __awaiter(this, void 0, void 0, function () {
                var call, callInfo, callAudio;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            call = CallManager.CallList[callId];
                            if (!isVideo) return [3, 2];
                            return [4, call.acceptCall()];
                        case 1:
                            _a.sent();
                            return [3, 3];
                        case 2:
                            callInfo = call.callInfo;
                            callInfo.isVideo = false;
                            callAudio = CallManager.getCallObject({ tel_num: callInfo.callNo }, 0);
                            callAudio.callInfo = callInfo;
                            CallManager.CallList[call.callInfo.callId] = callAudio;
                            callAudio.acceptCall();
                            _a.label = 3;
                        case 3: return [2];
                    }
                });
            });
        };
        CallManager.prototype.endCall = function (event, callId) {
            return __awaiter(this, void 0, void 0, function () {
                var call, res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            call = CallManager.CallList[callId];
                            return [4, call.endCall()];
                        case 1:
                            res = _a.sent();
                            if (0 === res.result) {
                                util_1.default.info("callManager", 'end call success');
                            }
                            else {
                                util_1.default.debug("callManager", 'end call failed');
                            }
                            return [2];
                    }
                });
            });
        };
        CallManager.prototype.dialDTMF = function (event, callId, dtmfNo, isSave) {
            if (isSave === void 0) { isSave = false; }
            return __awaiter(this, void 0, void 0, function () {
                var call;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            call = CallManager.CallList[callId];
                            util_1.default.debug("callManager", 'call dialDTMF, dtmfNo = ' + dtmfNo);
                            if (!dtmfNo) {
                                return [2];
                            }
                            return [4, call.dialDTMF(dtmfNo, isSave)];
                        case 1:
                            _a.sent();
                            return [2];
                    }
                });
            });
        };
        CallManager.prototype.setVideoRender = function (event, localView, remoteView) {
            var wrapper = tupCallWrapper_1.default.getInstance();
            return wrapper.setVideoRender(localView, remoteView);
        };
        CallManager.prototype.setLocalVideoWH = function (event, width, height) {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper;
                return __generator(this, function (_a) {
                    wrapper = tupCallWrapper_1.default.getInstance();
                    wrapper.setLocalViewWH(width, height);
                    return [2];
                });
            });
        };
        CallManager.prototype.setRemoteVideoWH = function (event, width, height) {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper;
                return __generator(this, function (_a) {
                    wrapper = tupCallWrapper_1.default.getInstance();
                    wrapper.setRemoteViewWH(width, height);
                    return [2];
                });
            });
        };
        CallManager.prototype.getMediaDeviceType = function (event, mediaDevice, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper, ret;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            wrapper = tupCallWrapper_1.default.getInstance();
                            return [4, wrapper.getMediaDeviceType(mediaDevice)];
                        case 1:
                            ret = _a.sent();
                            callback(ret);
                            return [2];
                    }
                });
            });
        };
        CallManager.nativewndBuild = function () {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper;
                return __generator(this, function (_a) {
                    wrapper = tupNativeWndWrapper_1.default.getInstance();
                    wrapper.build();
                    return [2];
                });
            });
        };
        CallManager.prototype.nativewndInit = function (event, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper, ret;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            wrapper = tupNativeWndWrapper_1.default.getInstance();
                            return [4, wrapper.nativeWndInit()];
                        case 1:
                            ret = _a.sent();
                            callback(ret);
                            return [2];
                    }
                });
            });
        };
        CallManager.prototype.nativewdCreateWindow = function (event, count, parentFrameHwnd, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper, ret;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            wrapper = tupNativeWndWrapper_1.default.getInstance();
                            return [4, wrapper.createWindow(count, parentFrameHwnd)];
                        case 1:
                            ret = _a.sent();
                            callback(ret);
                            return [2];
                    }
                });
            });
        };
        CallManager.prototype.setVideoWindow = function (event, callID, frameHwndList) {
            var wrapper = tupCallWrapper_1.default.getInstance();
            return wrapper.setVideoWindow(frameHwndList, callID);
        };
        CallManager.prototype.nativewdDestroyWindow = function (event, parentFrameHwnd, frameHwndList) {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper;
                return __generator(this, function (_a) {
                    wrapper = tupNativeWndWrapper_1.default.getInstance();
                    wrapper.destroyWindow(parentFrameHwnd, frameHwndList);
                    return [2];
                });
            });
        };
        CallManager.prototype.nativewndUninit = function (event, parentFrameHwnd) {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper;
                return __generator(this, function (_a) {
                    wrapper = tupNativeWndWrapper_1.default.getInstance();
                    wrapper.uninit(parentFrameHwnd);
                    return [2];
                });
            });
        };
        CallManager.prototype.resetNativewndSize = function (event, parentFrameHwnd, nativeWndParam) {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper;
                return __generator(this, function (_a) {
                    wrapper = tupNativeWndWrapper_1.default.getInstance();
                    wrapper.attachByName(parentFrameHwnd, nativeWndParam);
                    return [2];
                });
            });
        };
        CallManager.prototype.setMediaDevice = function (event, mediaDevice, index, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper, ret, ret, ret;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            wrapper = tupCallWrapper_1.default.getInstance();
                            if (!(mediaDevice == enum_1.MediaDevice.MICROPHONE)) return [3, 2];
                            return [4, wrapper.setMicIndex(index)];
                        case 1:
                            ret = _a.sent();
                            callback(ret);
                            return [2];
                        case 2:
                            if (!(mediaDevice == enum_1.MediaDevice.SPEAKER)) return [3, 4];
                            return [4, wrapper.setSpeakIndex(index)];
                        case 3:
                            ret = _a.sent();
                            callback(ret);
                            return [2];
                        case 4:
                            if (!(mediaDevice == enum_1.MediaDevice.CAMERA)) return [3, 6];
                            return [4, wrapper.setVideoIndex(index)];
                        case 5:
                            ret = _a.sent();
                            callback(ret);
                            return [2];
                        case 6: return [2];
                    }
                });
            });
        };
        CallManager.prototype.getVoiceVol = function (event, mediaDevice, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper, ret, ret;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            wrapper = tupCallWrapper_1.default.getInstance();
                            if (!(mediaDevice == enum_1.MediaDevice.MICROPHONE)) return [3, 2];
                            return [4, wrapper.getMicrophoneVolume()];
                        case 1:
                            ret = _a.sent();
                            callback(ret);
                            return [2];
                        case 2:
                            if (!(mediaDevice == enum_1.MediaDevice.SPEAKER)) return [3, 4];
                            return [4, wrapper.getSpeakVolume()];
                        case 3:
                            ret = _a.sent();
                            callback(ret);
                            return [2];
                        case 4: return [2];
                    }
                });
            });
        };
        CallManager.prototype.setVoiceVol = function (event, deviceType, value) {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper;
                return __generator(this, function (_a) {
                    wrapper = tupCallWrapper_1.default.getInstance();
                    if (deviceType == enum_1.MediaDevice.MICROPHONE) {
                        wrapper.setMicVol(value);
                        return [2];
                    }
                    if (deviceType == enum_1.MediaDevice.SPEAKER) {
                        wrapper.setSpkVol(value);
                        return [2];
                    }
                    return [2];
                });
            });
        };
        CallManager.prototype.videoSwitch = function (event, callid, toShowVideo, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper, ret;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            wrapper = tupCallWrapper_1.default.getInstance();
                            return [4, wrapper.videoControl(callid, toShowVideo)];
                        case 1:
                            ret = _a.sent();
                            callback(ret);
                            return [2];
                    }
                });
            });
        };
        CallManager.prototype.micSwitch = function (event, callid, toMuteMic, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper, ret;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            wrapper = tupCallWrapper_1.default.getInstance();
                            return [4, wrapper.operateMic(callid, toMuteMic)];
                        case 1:
                            ret = _a.sent();
                            callback(ret);
                            return [2];
                    }
                });
            });
        };
        CallManager.prototype.startPlayMediaFile = function (event, loop_times, src, callback) {
            if (loop_times === void 0) { loop_times = 0; }
            return __awaiter(this, void 0, void 0, function () {
                var wrapper, res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            wrapper = tupCallWrapper_1.default.getInstance();
                            return [4, wrapper.startPlayMediaFile(src, loop_times)];
                        case 1:
                            res = _a.sent();
                            callback(res);
                            return [2];
                    }
                });
            });
        };
        CallManager.prototype.stopPlayMediaFile = function (event, playHandle, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper, res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            wrapper = tupCallWrapper_1.default.getInstance();
                            return [4, wrapper.stopPlayMediaFile(playHandle)];
                        case 1:
                            res = _a.sent();
                            callback(res);
                            return [2];
                    }
                });
            });
        };
        CallManager.prototype.setIPTService = function (event, type, number) {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper, ret;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            wrapper = tupCallWrapper_1.default.getInstance();
                            return [4, wrapper.setForwardIPTService(type, number)];
                        case 1:
                            ret = _a.sent();
                            return [2];
                    }
                });
            });
        };
        CallManager.prototype.addVideo = function (event, callId) {
            return __awaiter(this, void 0, void 0, function () {
                var call;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            call = CallManager.CallList[callId];
                            util_1.default.debug("callManager", 'addVideo  callId= ' + callId);
                            return [4, call.addVideo()];
                        case 1:
                            _a.sent();
                            return [2];
                    }
                });
            });
        };
        CallManager.prototype.delVideo = function (event, callId) {
            return __awaiter(this, void 0, void 0, function () {
                var call;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            call = CallManager.CallList[callId];
                            util_1.default.debug("callManager", 'delVideo  callId= ' + callId);
                            return [4, call.delVideo()];
                        case 1:
                            _a.sent();
                            return [2];
                    }
                });
            });
        };
        CallManager.prototype.replyAddVideo = function (event, callId, isAccept) {
            return __awaiter(this, void 0, void 0, function () {
                var call;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            call = CallManager.CallList[callId];
                            util_1.default.debug("callManager", 'replyAddVideo  callId= ' + callId);
                            return [4, call.replyAddVideo(isAccept)];
                        case 1:
                            _a.sent();
                            return [2];
                    }
                });
            });
        };
        CallManager.registerCallEvent = function () {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper;
                return __generator(this, function (_a) {
                    wrapper = tupCallWrapper_1.default.getInstance();
                    util_1.default.debug("callManager", "registerCallEvent");
                    wrapper.registerCallEvent({
                        onCallIncoming: CallManager.handleCallIncomming,
                        onCallRingBack: CallManager.handleCallRingBack,
                        onCallConnected: CallManager.handleCallConnected,
                        onCallEnded: CallManager.handleCallEnded,
                        onCallDestroy: CallManager.handleCallDestroy,
                        onCallRtpCreated: CallManager.handleCallRTPCreated,
                        onSessionModified: CallManager.handleCallSessionModify,
                        onNewServiceRight: CallManager.handNewServiceRight,
                        onSetIptServiceSuccess: CallManager.handSetIptServiceSuccess,
                        onSetIptServiceFailed: CallManager.handSetIptServiceFailed,
                        onCallBldTransferRecvSucRsp: CallManager.handCallBldTransferRecvSucRsp,
                        onCallBldTransferFailed: CallManager.handCallBldTransferFailed,
                        onCallBldTransferSuccess: CallManager.handCallBldTransferSuccess,
                    });
                    wrapper.registerVideoEvent({
                        onCallAddVideo: CallManager.handleCallAddVideo,
                        onCallDelVideo: CallManager.handleCallDelVideo,
                        onCallModifyVideoResult: CallManager.handleCallModifyVideoResult
                    });
                    return [2];
                });
            });
        };
        CallManager.handleCallDestroy = function (callInfo) {
            util_1.default.debug("callManager", 'callManager got handleCallDestroy');
            observer_1.default.publish('CallDestroy', callInfo);
        };
        CallManager.handleCallEnded = function (callInfo) {
            var call = CallManager.CallList[callInfo.param.call_id];
            if (call) {
                call.handleCallEnded(callInfo);
                delete CallManager.CallList[callInfo.param.call_id];
                util_1.default.debug("callManager", 'handleCallEnded found call by call_id = ' + callInfo.param.call_id);
                observer_1.default.publish('CallEnded', true);
            }
            else {
                util_1.default.debug("callManager", 'handleCallEnded no found call by call_id = ' + callInfo.param.call_id);
                observer_1.default.publish('CallEnded', false);
            }
        };
        CallManager.handleCallRingBack = function (callInfo) {
            var call = CallManager.CallList[callInfo.param.call_id];
            if (call) {
                call.handleCallRingBack(callInfo);
                util_1.default.debug("callManager", 'handleCallRingBack found call by call_id = ' + callInfo.param.call_id);
            }
            else {
                util_1.default.debug("callManager", 'handleCallRingBack no found call by call_id = ' + callInfo.param.call_id);
            }
        };
        CallManager.handleCallIncomming = function (callInfo) {
            var call = CallManager.getCallObject(callInfo.param, callInfo.param.call_type);
            call.callInfo.callType = callInfo.param.call_type;
            CallManager.CallList[call.callInfo.callId] = call;
            call.handleCallIncomming(callInfo);
            var wrapper = tupCallWrapper_1.default.getInstance();
            var ret = wrapper.alertingCall(callInfo.param.call_id);
            util_1.default.debug("callManager", 'handleCallIncomming, call_id= ' + callInfo.param.call_id);
        };
        CallManager.handleCallConnected = function (callInfo) {
            var call = CallManager.CallList[callInfo.param.call_id];
            if (call) {
                call.handleCallConnected(callInfo);
                util_1.default.debug("callManager", 'handleCallConnected found call by call_id = ' + callInfo.param.call_id);
            }
            else {
                util_1.default.debug("callManager", 'handleCallConnected no found call by call_id = ' + callInfo.param.call_id);
            }
        };
        CallManager.handleCallRTPCreated = function (callInfo) {
            var call = CallManager.CallList[callInfo.param.call_id];
            if (call) {
                call.handleCallRTPCreated(callInfo);
                util_1.default.debug("callManager", 'handleCallRTPCreated found call by call_id = ' + callInfo.param.call_id);
            }
            else {
                util_1.default.debug("callManager", 'handleCallRTPCreated no found call by call_id = ' + callInfo.param.call_id);
            }
        };
        CallManager.handleCallHoldSuccess = function (callInfo) {
            var call = CallManager.CallList[callInfo.param.call_id];
            if (call) {
                call.handleCallHoldSuccess(callInfo);
                util_1.default.debug("callManager", 'handleCallHoldSuccess found call by call_id = ' + callInfo.param.call_id);
            }
            else {
                util_1.default.debug("callManager", 'handleCallHoldSuccess no found call by call_id = ' + callInfo.param.call_id);
            }
        };
        CallManager.handleCallHoldFailed = function (callInfo) {
            var call = CallManager.CallList[callInfo.param.call_id];
            if (call) {
                call.handleCallHoldFailed(callInfo);
                util_1.default.debug("callManager", 'handleCallHoldFailed found call by call_id = ' + callInfo.param.call_id);
            }
            else {
                util_1.default.debug("callManager", 'handleCallHoldFailed no found call by call_id = ' + callInfo.param.call_id);
            }
        };
        CallManager.handleCallUnHoldSuccess = function (callInfo) {
            var call = CallManager.CallList[callInfo.param.call_id];
            if (call) {
                call.handleCallUnHoldSuccess(callInfo);
                util_1.default.debug("callManager", 'handleCallUnHoldSuccess found call by call_id = ' + callInfo.param.call_id);
            }
            else {
                util_1.default.debug("callManager", 'handleCallUnHoldSuccess no found call by call_id = ' + callInfo.param.call_id);
            }
        };
        CallManager.handleCallUnHoldFailed = function (callInfo) {
            var call = CallManager.CallList[callInfo.param.call_id];
            if (call) {
                call.handleCallUnHoldFailed(callInfo);
                util_1.default.debug("callManager", 'handleCallUnHoldFailed found call by call_id = ' + callInfo.param.call_id);
            }
            else {
                util_1.default.debug("callManager", 'handleCallUnHoldFailed no found call by call_id = ' + callInfo.param.call_id);
            }
        };
        CallManager.handleCallDivertFailed = function (callInfo) {
            var call = CallManager.CallList[callInfo.param.call_id];
            if (call) {
                call.handleCallDivertFailed(callInfo);
                util_1.default.debug("callManager", 'handleCallDivertFailed found call by call_id = ' + callInfo.param.call_id);
            }
            else {
                util_1.default.debug("callManager", 'handleCallDivertFailed no found call by call_id = ' + callInfo.param.call_id);
            }
        };
        CallManager.handleCallBldTransferFailed = function (callInfo) {
            var call = CallManager.CallList[callInfo.param.call_id];
            if (call) {
                call.handleCallBldTransferFailed(callInfo);
                util_1.default.debug("callManager", 'handleCallBldTransferFailed found call by call_id = ' + callInfo.param.call_id);
            }
            else {
                util_1.default.debug("callManager", 'handleCallBldTransferFailed no found call by call_id = ' + callInfo.param.call_id);
            }
        };
        CallManager.handleCallSessionModify = function (result) {
            var oldCall = CallManager.CallList[result.param.call_id];
            if (oldCall) {
                var nowIsVideoCall = 0;
                if (result.param.video_send_mode === 4 && oldCall.callInfo.callType === 0) {
                    nowIsVideoCall = 1;
                }
                else if (result.param.video_send_mode === 0 && oldCall.callInfo.callType === 1) {
                    nowIsVideoCall = 0;
                }
                else {
                    if (result.param.video_send_mode === 4) {
                        result.param.nowIsVideoCall = 1;
                        oldCall.handleCallSessionModify(result);
                    }
                    else if (result.param.video_send_mode === 0) {
                        result.param.nowIsVideoCall = 0;
                        oldCall.handleCallSessionModify(result);
                    }
                    util_1.default.debug("callManager", 'handleCallSessionModify, not update to video, return, video_send_mode =' + result.param.video_send_mode + 'oldCallType = ' + oldCall.callInfo.callType);
                    return;
                }
                var newCallInfo = {
                    call_id: result.param.call_id,
                    tel_num: oldCall.callInfo.callNo,
                    callType: nowIsVideoCall,
                    callState: oldCall.callInfo.callState
                };
                delete CallManager.CallList[oldCall.callInfo.callId];
                var newCall = CallManager.getCallObject(newCallInfo, nowIsVideoCall);
                CallManager.CallList[newCall.callInfo.callId] = newCall;
                result.param.nowIsVideoCall = nowIsVideoCall;
                newCall.handleCallSessionModify(result);
                util_1.default.debug("callManager", 'handleCallSessionModify found call by call_id = ' + result.param.call_id + ",oldCall=" + JSON.stringify(oldCall.callInfo.callId));
            }
            else {
                util_1.default.debug("callManager", 'handleCallSessionModify no found call by call_id = ' + result.param.call_id);
            }
        };
        CallManager.handNewServiceRight = function (result) {
            var newServiceRight;
            var serviceInfoArr = result.param.service_info_array;
            newServiceRight = {
                dnd: { register: serviceInfoArr[13].register, hasRight: serviceInfoArr[13].right },
                callWait: { register: serviceInfoArr[39].register, hasRight: serviceInfoArr[39].right },
                cfu: { register: serviceInfoArr[15].register, hasRight: serviceInfoArr[15].right },
                cfb: { register: serviceInfoArr[16].register, hasRight: serviceInfoArr[16].right },
                cfn: { register: serviceInfoArr[17].register, hasRight: serviceInfoArr[17].right },
                cfo: { register: serviceInfoArr[18].register, hasRight: serviceInfoArr[18].right },
            };
            observer_1.default.publish('NewServiceRight', newServiceRight);
        };
        CallManager.handSetIptServiceSuccess = function (result) {
            observer_1.default.publish('SetIptServiceSuccess', result);
        };
        CallManager.handSetIptServiceFailed = function (result) {
            observer_1.default.publish('SetIptServiceFailed', result);
        };
        CallManager.handCallBldTransferRecvSucRsp = function (result) {
            observer_1.default.publish('CallBldTransferRecvSucRsp', result);
        };
        CallManager.handCallBldTransferFailed = function (result) {
            observer_1.default.publish('CallBldTransferFailed', result);
            util_1.default.debug("callManager", 'handCallBldTransferFailed');
            if (result.param.call_id != "") {
                var call = CallManager.CallList[result.param.call_id];
                util_1.default.debug("callManager", 'unHoldCall  callId= ' + result.param.call_id);
                call.unHoldCall();
            }
        };
        CallManager.handCallBldTransferSuccess = function (result) {
            observer_1.default.publish('CallBldTransferSuccess', result);
        };
        CallManager.handleMicVolChange = function (result) {
            observer_1.default.publish('CallMicVolChange', result);
        };
        CallManager.handleSpkVolChange = function (result) {
            observer_1.default.publish('CallSpkVolChange', result);
        };
        CallManager.handleCallAddVideo = function (callInfo) {
            var call = CallManager.CallList[callInfo.param.call_id];
            if (call) {
                call.handleCallAddVideo(callInfo);
                util_1.default.debug("callManager", 'handleCallAddVideo found call by call_id = ' + callInfo.param.call_id);
            }
            else {
                util_1.default.debug("callManager", 'handleCallAddVideo no found call by call_id = ' + callInfo.param.call_id);
            }
        };
        CallManager.handleCallDelVideo = function (callInfo) {
            var oldCall = CallManager.CallList[callInfo.param.call_id];
            if (oldCall) {
                util_1.default.debug("callManager", 'handleCallDelVideo found call by call_id = ' + callInfo.param.call_id);
            }
            else {
                util_1.default.debug("callManager", 'handleCallDelVideo no found call by call_id = ' + callInfo.param.call_id);
            }
        };
        CallManager.handleCallModifyVideoResult = function (result) {
            var oldCall = CallManager.CallList[result.param.call_id];
            if (oldCall) {
                var newCallInfo = {
                    call_id: result.param.call_id,
                    tel_num: oldCall.callInfo.callNo,
                    callType: result.param.is_video,
                    callState: oldCall.callInfo.callState
                };
                delete CallManager.CallList[oldCall.callInfo.callId];
                var newCall = CallManager.getCallObject(newCallInfo, result.param.is_video);
                CallManager.CallList[newCall.callInfo.callId] = newCall;
                newCall.handleCallModifyVideoResult(result);
                util_1.default.debug("callManager", 'handleCallModifyVideoResult found call by call_id = ' + result.param.call_id + ",oldCall=" + JSON.stringify(oldCall));
            }
            else {
                util_1.default.debug("callManager", 'handleCallModifyVideoResult no found call by call_id = ' + result.param.call_id);
            }
        };
        CallManager.handleVideoRefreshView = function (data) {
            util_1.default.debug("callManager", "<video> handleVideoRefreshView");
            observer_1.default.publish('VideoRefreshView', data.param);
        };
        CallManager.handleVideoDecodeSuccess = function (data) {
            var call = CallManager.CallList[data.param.call_id];
            if (call) {
                if (data.param.media_type === 2) {
                    call.handleVideoDecodeSuccess(data);
                }
                else if (data.param.media_type === 3) {
                    call.handleBfcpDecodeSuccess(data.param.call_id);
                }
                util_1.default.debug("callManager", 'handleVideoDecodeSuccess found call by call_id = ' + data.param.call_id);
            }
            else {
                util_1.default.debug("callManager", 'handleVideoDecodeSuccess no found call by call_id = ' + data.param.call_id);
            }
        };
        CallManager.handleMobileRouteChange = function (data) {
            observer_1.default.publish('MobileRouteChange', data.param);
        };
        CallManager.handleCallAtdTransferSuccess = function (data) {
            observer_1.default.publish('CallAtdTransferSuccess', data.param);
        };
        CallManager.handleCallAtdTransferFailed = function (data) {
            observer_1.default.publish('CallAtdTransferFailed', data.param);
        };
        CallManager.getCallObject = function (callInfo, isVideo) {
            if (isVideo) {
                util_1.default.debug("callManager", 'getCallObject is Video');
                return new videoCallService_1.default(callInfo);
            }
            else {
                util_1.default.debug("callManager", 'getCallObject is audio');
                return new audioCallService_1.default(callInfo);
            }
        };
        CallManager.prototype.holdCall = function (event, callId) {
            return __awaiter(this, void 0, void 0, function () {
                var call;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            call = CallManager.CallList[callId];
                            util_1.default.debug("callManager", 'holdCall = ' + callId);
                            return [4, call.holdCall()];
                        case 1:
                            _a.sent();
                            return [2];
                    }
                });
            });
        };
        CallManager.prototype.unHoldCall = function (event, callId) {
            return __awaiter(this, void 0, void 0, function () {
                var call;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            call = CallManager.CallList[callId];
                            util_1.default.debug("callManager", 'unHoldCall = ' + callId);
                            return [4, call.unHoldCall()];
                        case 1:
                            _a.sent();
                            return [2];
                    }
                });
            });
        };
        CallManager.prototype.divertCall = function (callId, divertNumber) {
            return __awaiter(this, void 0, void 0, function () {
                var call;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            call = CallManager.CallList[callId];
                            return [4, call.divertCall(divertNumber)];
                        case 1:
                            _a.sent();
                            return [2];
                    }
                });
            });
        };
        CallManager.prototype.blindTransfer = function (event, callId, transtoNumber, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var call;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            call = CallManager.CallList[callId];
                            if (call.callInfo.isVideo) {
                                callback({ result: false, info: "call is video" });
                                return [2];
                            }
                            return [4, call.blindTransfer(transtoNumber)];
                        case 1:
                            _a.sent();
                            return [2];
                    }
                });
            });
        };
        CallManager.prototype.consultTransfer = function (callId, transtoCallId) {
            return __awaiter(this, void 0, void 0, function () {
                var call;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            call = CallManager.CallList[callId];
                            util_1.default.debug("callManager", 'consultTransfer  transtoCallId = ' + transtoCallId);
                            return [4, call.consultTransfer(transtoCallId)];
                        case 1:
                            _a.sent();
                            return [2];
                    }
                });
            });
        };
        CallManager.prototype.getCallCount = function () {
            var count = 0;
            for (var callid in CallManager.CallList) {
                count++;
            }
            util_1.default.debug("callManager", 'getCallCount, result = ' + count);
            return count;
        };
        CallManager.prototype.newCallObject = function (callId, isVideoCall) {
            var call = CallManager.CallList[callId];
            if (!call) {
                var newCall = CallManager.getCallObject({ call_id: callId, call_type: isVideoCall }, isVideoCall);
                if (newCall) {
                    CallManager.CallList[callId] = newCall;
                }
                util_1.default.debug("callManager", 'newCallObject, callId = ' + callId);
            }
            else {
                util_1.default.debug("callManager", 'already exist call object, callId = ' + callId);
            }
        };
        CallManager.prototype.deleteAudioCallObject = function (callId) {
            var call = CallManager.CallList[callId];
            if (call) {
                delete CallManager.CallList[callId];
            }
            util_1.default.debug("callManager", 'deleteAudioCallObject, callId = ' + callId);
        };
        CallManager.CallList = {};
        return CallManager;
    }());
    exports.default = CallManager;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(51), __webpack_require__(28), __webpack_require__(1), __webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, tupCallWrapper_1, observer_1, util, util_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var CallService = (function () {
        function CallService(data) {
            var _this = this;
            this.handleCallIncomming = function (callInfo) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    observer_1.default.publish('CallIncomming', this.callInfo);
                    return [2];
                });
            }); };
            var milltime = new Date().getTime();
            var callDate = util.formatDateYYYYMMDDHHMM(milltime);
            var ucaccount = 'undefined' + data.tel_num;
            this.callInfo = {
                callNo: data.tel_num,
                callId: data.call_id,
                callType: data.callType,
                callState: data.callState,
                callee: this.getCallee(data.tel_num, ucaccount),
                milltime: milltime,
                ucaccount: ucaccount,
                startTime: callDate.time,
                date: callDate.date,
                callUserInfo: "",
                isVideo: (data.call_type == 1),
                dtmfNo: ""
            };
        }
        CallService.prototype.getCallee = function (callNo, ucaccount) {
            util_1.default.debug("callService", "call service");
            return {
                name: callNo,
                mobile: callNo,
                contactAvatar: "./bin/img/contacts/Avatar_" + (callNo % 12 || 0) + ".png",
                ucaccount: ucaccount
            };
        };
        CallService.prototype.startCall = function (callInfo, isVideo) {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper, outGoingPromise, callback, res, newCallInfo;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            util_1.default.debug("callService", 'begin tup start call');
                            wrapper = tupCallWrapper_1.default.getInstance();
                            outGoingPromise = CallService.getPromise();
                            callback = { onCallOutGoing: function (data) {
                                    outGoingPromise.resolve(data);
                                } };
                            tupCallWrapper_1.default.tupCall.setBasicCallEvent(callback);
                            return [4, wrapper.startCall(callInfo.tel_num, isVideo)];
                        case 1:
                            res = _a.sent();
                            if (0 === res.result) {
                                this.callInfo.callId = res.param.call_id;
                            }
                            else {
                                util_1.default.debug("callService", 'start call failed, result = ' + res.result);
                                return [2];
                            }
                            return [4, outGoingPromise.promise];
                        case 2:
                            newCallInfo = _a.sent();
                            this.callInfo.callType = newCallInfo.param.call_type;
                            this.callInfo.callState = newCallInfo.param.call_state;
                            util_1.default.debug("callService", 'end tup start call');
                            return [2, this.callInfo];
                    }
                });
            });
        };
        CallService.prototype.endCall = function () {
            return __awaiter(this, void 0, void 0, function () {
                var hwTupSdk;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            util_1.default.debug("callService", "call service ,callId = " + this.callInfo.callId);
                            return [4, tupCallWrapper_1.default.getInstance()];
                        case 1:
                            hwTupSdk = _a.sent();
                            return [2, hwTupSdk.endCall(this.callInfo.callId)];
                    }
                });
            });
        };
        CallService.prototype.dialDTMF = function (dtmfNo, isSave) {
            if (isSave) {
                this.callInfo.dtmfNo = dtmfNo;
                return;
            }
            if (!dtmfNo || /[^0-9*#]/.test(dtmfNo)) {
                return this.callInfo.dtmfNo;
            }
            this.callInfo.dtmfNo = this.callInfo.dtmfNo + dtmfNo;
            if ("*" === dtmfNo) {
                dtmfNo = '10';
            }
            else if ("#" === dtmfNo) {
                dtmfNo = '11';
            }
            this.callTupSendDTMF(dtmfNo);
            util_1.default.debug("callService", 'DTMF dial！no = ' + dtmfNo);
            util_1.default.debug("callService", "call service ,dialDTMF = " + this.callInfo.dtmfNo);
            return this.callInfo.dtmfNo;
        };
        CallService.prototype.callTupSendDTMF = function (dtmfNo) {
            return __awaiter(this, void 0, void 0, function () {
                var hwTupSdk;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, tupCallWrapper_1.default.getInstance()];
                        case 1:
                            hwTupSdk = _a.sent();
                            hwTupSdk.dtmf(this.callInfo.callId, dtmfNo);
                            util_1.default.debug("callService", "call service ,dialDTMF = " + dtmfNo);
                            return [2];
                    }
                });
            });
        };
        CallService.prototype.setCaptureFile = function (file_name) {
            return __awaiter(this, void 0, void 0, function () {
                var hwTupCallSdk;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, tupCallWrapper_1.default.getInstance()];
                        case 1:
                            hwTupCallSdk = _a.sent();
                            return [2];
                    }
                });
            });
        };
        CallService.prototype.operateMic = function (to_mute) {
            return __awaiter(this, void 0, void 0, function () {
                var hwTupCallSdk;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, tupCallWrapper_1.default.getInstance()];
                        case 1:
                            hwTupCallSdk = _a.sent();
                            return [2];
                    }
                });
            });
        };
        CallService.prototype.operateSpk = function (to_mute) {
            return __awaiter(this, void 0, void 0, function () {
                var hwTupCallSdk;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, tupCallWrapper_1.default.getInstance()];
                        case 1:
                            hwTupCallSdk = _a.sent();
                            return [2];
                    }
                });
            });
        };
        CallService.prototype.handleCallEnded = function (callInfo) {
            this.callInfo.callState = callInfo.param.call_state;
            observer_1.default.publish('CallEnded', this.callInfo);
        };
        CallService.prototype.handleCallRingBack = function (callInfo) {
            this.callInfo.callState = callInfo.param.call_state;
            observer_1.default.publish('CallRingBack', callInfo.param);
        };
        CallService.prototype.handleCallConnected = function (callInfo) {
            this.callInfo.callState = callInfo.param.call_state;
            observer_1.default.publish('CallConnected', callInfo.param);
        };
        CallService.prototype.handleCallAddVideo = function (callInfo) {
            observer_1.default.publish('AddVideoRequest', callInfo.param);
        };
        CallService.prototype.handleCallDelVideo = function (callInfo) {
            observer_1.default.publish('DelVideoRequest', callInfo.param);
        };
        CallService.prototype.handleCallRTPCreated = function (callInfo) {
            observer_1.default.publish('CallRTPCreated', callInfo.param);
        };
        CallService.prototype.handleCallModifyVideoResult = function (result) {
            observer_1.default.publish('CallModifyVideoResult', result.param);
        };
        CallService.prototype.handleCallSessionModify = function (result) {
            observer_1.default.publish('CallSessionModify', result.param);
        };
        CallService.getPromise = function () {
            var p = {};
            p.promise = new Promise(function (resolve, reject) {
                p.resolve = resolve;
                p.reject = reject;
            });
            return p;
        };
        return CallService;
    }());
    exports.default = CallService;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(365), __webpack_require__(367), __webpack_require__(140), __webpack_require__(12), __webpack_require__(28), __webpack_require__(13), __webpack_require__(24), __webpack_require__(371), __webpack_require__(51), __webpack_require__(1), __webpack_require__(23), __webpack_require__(14), __webpack_require__(11), __webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, tupConfctrlWrapper_1, tupDataConfWrapper_1, tupEaddrWrapper_1, dispatcher_1, observer_1, eventInfo_1, errorCode_1, confAttendeeList_1, tupCallWrapper_1, util, client_1, serverConfig_1, enum_1, util_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var confInfo = {
        callid: 0,
        subject: "",
        mediaType: 0,
        confHandle: 0,
        dataConfHandle: 0,
        confId: "",
        hostKey: "",
    };
    var ConfManager = (function () {
        function ConfManager() {
            if (ConfManager._instance) {
                throw new Error("Error: Instantiation failed: Use ConfService.getInstance() instead of new.");
            }
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_BOOK_RESVCONF, this.createResvConf, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_JOIN_INSTCONF, this.createInstConf, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_REFRESH_TOKEN, this.refreshToken, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_GET_CONFLIST, this.getConfList, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_GET_CONFINFO, this.getConfInfo, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_ACCESS_RESVCONF, this.accessReservedConf, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_ACCEPT_CONF, this.acceptConf, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_REJECT_CONF, this.rejectConf, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_ADD_ATTENDEE, this.addAttendee, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_DEL_ATTENDEE, this.removeAttendee, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_MUTE_CONF, this.muteConf, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_AS_SET_OWNER, this.asSetOwner, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_AS_SET_SHARE_TYPE, this.asSetShareType, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_AS_START, this.asStart, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_AS_STOP, this.asStop, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_WB_CREATE, this.createWhiteBoard, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_WB_DELETE, this.deleleWhiteBorad, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_WB_PAGE_CREATE, this.wbPageCreate, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_WB_PAGE_DELETE, this.wbPageDelete, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_WB_SET_CURR_PAGE, this.wbSetCurrentPage, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_MUTE_ATTENDEE, this.muteAttendee, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_RELEASE_CHAIRMAN, this.releaseChairman, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_REQUEST_CHAIRMAN, this.requestChairman, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_HAND_UP, this.handup, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_LEAVE_CONF, this.leaveConf, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_END_CONF, this.endConf, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_SET_CONFMODE, this.setConfMode, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_SET_CONF_MIXED_PICTURE, this.setConfMixedPicture, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_BROADCAST_ATTENDEE, this.broadcastAttendee, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_WATCH_ATTENDEE, this.watchAttendee, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_SEND_MSG, this.sendMessage, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_ENABLE_RENDER, this.videoRenderCtrl, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_SET_DATA_RENDER, this.setDataRender, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_SET_WB_DATA_RENDER, this.setWBDataRender, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_SET_CANVAS_SIZE, this.setCanvasSize, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_SET_DROP_FRAME, this.setDropFrame, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_VIDEO_RECONNECT, this.videoReconnect, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_REQUEST_PRIVILEGE, this.requestRemoteCtrl, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_SET_PRIVILEGE, this.setRemoteCtrl, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_KEYBOARD_INPUT, this.keyboardInput, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_AT_CREATE_START, this.annotationCreateStart, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_AT_CUSTOMER_UPDATE, this.annotationCreateCustomerUpdate, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_AT_DRAWING_UPDATE, this.annotationCreateDrawingUpdate, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_AT_CREATE_DONE, this.annotationCreateDone, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_AT_SET_SELECT, this.annotationSetselect, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_AT_DELETE, this.annotationDelete, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_AT_EDIT_START, this.annotationEditStart, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_AT_EDIT_UPDATE, this.annotationEditUpdate, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_AT_EDIT_DONE, this.annotationEditDone, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_AT_TEXT_CREATE, this.annotationTextCreate, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_AT_TEXT_UPDATE, this.annotationTextUpdate, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_AT_TEXT_GETINFO, this.annotationTextGetinfo, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_AT_HITTEST, this.annotationHittest, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_AT_HITTEST_RECT, this.annotationHittestRect, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_AT_LASERPOINTER_START, this.annotationLaserpointerStart, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_AT_LASERPOINTER_MOVETO, this.annotationLaserpointerMoveto, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_AT_LASERPOINTER_STOP, this.annotationLaserpointerStop, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_P2P_TRANSFER_TO_CONF, this.p2pTransferToConf, this);
            ConfManager._instance = this;
        }
        ConfManager.getInstance = function () {
            return ConfManager._instance;
        };
        ConfManager.prototype.getInfo = function () {
            return confInfo;
        };
        ConfManager.prototype.do_action = function () {
            return __awaiter(this, void 0, void 0, function () {
                var confCtrlWrapper, buildret, dataConfWrapper;
                return __generator(this, function (_a) {
                    confCtrlWrapper = tupConfctrlWrapper_1.default.getInstance();
                    buildret = confCtrlWrapper.build();
                    dataConfWrapper = tupDataConfWrapper_1.default.getInstance();
                    dataConfWrapper.build().catch(function () {
                        util_1.default.error("confManager", errorCode_1.EC_SDK_ERROR.OBJECT_INIT_FAILED("TupMeeting"));
                        client_1.default.notifyErr(errorCode_1.EC_SDK_ERROR.OBJECT_INIT_FAILED("TupMeeting"));
                    });
                    if (buildret) {
                        ConfManager.registerConfEvent();
                    }
                    return [2, { result: true }];
                });
            });
        };
        ConfManager.prototype.createResvConf = function (event, bookConferenceParam, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var subject, startTime, startTime_str, duration, attendees, autoRecord, language, cycle, assMedia, mediaType, phoneNumber, eaddrWrapper, configedAttendees, i, data, attendeeParam, confCtrlWrapper;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            subject = bookConferenceParam.topic;
                            startTime = bookConferenceParam.startTime;
                            startTime_str = "";
                            if (startTime != null) {
                                startTime_str = startTime.year + "-" + startTime.month + "-" + startTime.date + " " + startTime.hours + ":" + startTime.minutes;
                            }
                            duration = bookConferenceParam.duration;
                            attendees = bookConferenceParam.attendees;
                            autoRecord = 0;
                            if (bookConferenceParam.autoRecord == 1) {
                                autoRecord = 1;
                            }
                            language = 0;
                            if (bookConferenceParam.language == 1) {
                                language = 1;
                            }
                            cycle = { start_data: 0, end_data: 0, frequency: 0, appointed_type: 0, interval: 0, point_num: 0, point_list: 0, cycle_count: 0 };
                            assMedia = { mpi: 1, type: 1, code: 1, bandwidth: 1, size: 1 };
                            mediaType = 19;
                            switch (bookConferenceParam.isVideo) {
                                case 0:
                                    mediaType = 1;
                                    break;
                                case 1:
                                    mediaType = 3;
                                    break;
                                case 2:
                                    mediaType = 17;
                                    break;
                                default:
                                    mediaType = 19;
                            }
                            phoneNumber = this.getPhoneNumber();
                            eaddrWrapper = tupEaddrWrapper_1.default.getInstance();
                            configedAttendees = new Array();
                            i = 0;
                            _a.label = 1;
                        case 1:
                            if (!(i < attendees.length)) return [3, 4];
                            return [4, eaddrWrapper.searchUserInfo(i + 1, { condition: attendees[i].number, pageIndex: 1, searchType: 0 })];
                        case 2:
                            data = _a.sent();
                            if (0 == data.param.result && 1 == data.param.TotalNum) {
                                attendeeParam = data.param.entry[0];
                                configedAttendees[i] = {
                                    acount_id: attendeeParam.ucaccount,
                                    number: attendeeParam.espacenumber,
                                    name: attendeeParam.name,
                                    sms: attendeeParam.mobile,
                                    email: attendeeParam.email,
                                    role: attendees[i].role,
                                    is_auto_invite: attendees[i].autoInvite,
                                    display_name: attendeeParam.name,
                                };
                            }
                            else {
                                configedAttendees[i] = {
                                    acount_id: "",
                                    number: attendees[i].number,
                                    name: attendees[i].name,
                                    sms: attendees[i].smsPhone,
                                    email: attendees[i].email,
                                    role: attendees[i].role,
                                    is_auto_invite: attendees[i].autoInvite,
                                    display_name: attendees[i].number,
                                };
                            }
                            _a.label = 3;
                        case 3:
                            i++;
                            return [3, 1];
                        case 4:
                            confCtrlWrapper = tupConfctrlWrapper_1.default.getInstance();
                            confCtrlWrapper.bookConf(mediaType, subject, startTime_str, duration, configedAttendees, autoRecord, cycle, assMedia, language)
                                .then(function (ret) {
                                var evt = { result: true, info: ret };
                                callback(evt);
                            })
                                .catch(function (ret) {
                                var evt = { result: false, info: util.getErrResult(ret.notify, ret.param.ret, "") };
                                callback(evt);
                            });
                            return [2];
                    }
                });
            });
        };
        ConfManager.prototype.createInstConf = function (event, instanceConfParam, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var attendees, autoRecord, cloudEC_loginInfo, loginInfo, deployMode, userAccount, assMedia, language, mediaType, confSubject, confCtrlWrap, phoneNumber, configedAttendees, attendeeIndex, eaddrWrapper, i, number, data, attendeeParam, attendeeTemp;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            util_1.default.debug("confManager", "step in createInstConf,event=" + event);
                            attendees = instanceConfParam.attendees;
                            autoRecord = instanceConfParam.autoRecord ? instanceConfParam.autoRecord : 0;
                            cloudEC_loginInfo = sessionStorage.cloudEC_loginInfo;
                            loginInfo = JSON.parse(cloudEC_loginInfo);
                            deployMode = loginInfo.deployMode;
                            userAccount = loginInfo.userAccount;
                            assMedia = { mpi: 1, type: 1, code: 1, bandwidth: 1, size: 1 };
                            language = 0;
                            if (instanceConfParam.language == 1) {
                                language = 1;
                            }
                            mediaType = 19;
                            switch (instanceConfParam.isVideo) {
                                case 0:
                                    mediaType = 1;
                                    break;
                                case 1:
                                    mediaType = 3;
                                    break;
                                case 2:
                                    mediaType = 17;
                                    break;
                                default:
                                    mediaType = 19;
                            }
                            confInfo.mediaType = mediaType;
                            confSubject = userAccount + "_Meeting";
                            if (instanceConfParam.topic) {
                                confSubject = instanceConfParam.topic;
                            }
                            confInfo.subject = confSubject;
                            confCtrlWrap = tupConfctrlWrapper_1.default.getInstance();
                            phoneNumber = this.getPhoneNumber();
                            configedAttendees = new Array();
                            attendeeIndex = 0;
                            eaddrWrapper = tupEaddrWrapper_1.default.getInstance();
                            i = 0;
                            _a.label = 1;
                        case 1:
                            if (!(i < attendees.length)) return [3, 4];
                            number = attendees[i].number.split("@")[0];
                            if (phoneNumber.endsWith(number)) {
                                return [3, 3];
                            }
                            return [4, eaddrWrapper.searchUserInfo(i + 1, { condition: attendees[i].number, pageIndex: 1, searchType: 0 })];
                        case 2:
                            data = _a.sent();
                            if (0 == data.param.result && 1 == data.param.TotalNum) {
                                attendeeParam = data.param.entry[0];
                                configedAttendees[i] = {
                                    acount_id: attendeeParam.ucaccount,
                                    number: attendeeParam.espacenumber,
                                    name: attendeeParam.name,
                                    sms: attendeeParam.mobile,
                                    email: attendeeParam.email,
                                    role: 0,
                                    is_auto_invite: 1,
                                    display_name: attendeeParam.name,
                                };
                            }
                            else {
                                configedAttendees[attendeeIndex] = {
                                    acount_id: "",
                                    number: attendees[i].number,
                                    name: attendees[i].number,
                                    sms: attendees[i].smsPhone,
                                    email: attendees[i].email,
                                    role: 0,
                                    is_auto_invite: 1,
                                    display_name: attendees[i].number,
                                };
                            }
                            attendeeIndex++;
                            _a.label = 3;
                        case 3:
                            i++;
                            return [3, 1];
                        case 4:
                            attendeeTemp = {
                                acount_id: "",
                                number: phoneNumber,
                                name: userAccount,
                                sms: "",
                                email: "",
                                role: 1,
                                is_auto_invite: 0,
                                display_name: userAccount,
                            };
                            configedAttendees.unshift(attendeeTemp);
                            confCtrlWrap.createConf(confSubject, mediaType, configedAttendees, assMedia, language, autoRecord)
                                .then(function (ret) {
                                var evt = { result: true, info: confInfo };
                                callback(evt);
                            }).catch(function (ret) {
                                var err = { cmdId: 0, errorCode: -1, errorInfo: "create instance conference failed" };
                                Object.assign(err, util.getErrCode(ret.notify, ret.param.ret));
                                var evt = { result: false, info: err };
                                callback(evt);
                            });
                            return [2];
                    }
                });
            });
        };
        ConfManager.prototype.getConfList = function (event, pageIndex, pageSize, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var confCtrlWrapper;
                return __generator(this, function (_a) {
                    confCtrlWrapper = tupConfctrlWrapper_1.default.getInstance();
                    confCtrlWrapper.getConfList(pageIndex, pageSize)
                        .then(function (data) {
                        callback({ result: true, info: data });
                    }).catch(function (data) {
                        if (data.description === "tup_confctrl_get_conf_list") {
                            callback({ result: false, info: util.getErrCode(data.rsp, data.result) });
                        }
                        else {
                            callback({ result: false, info: util.getErrCode(data.notify, data.param.result) });
                        }
                    });
                    return [2];
                });
            });
        };
        ConfManager.prototype.getConfInfo = function (event, confId, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var confCtrlWrapper;
                return __generator(this, function (_a) {
                    confCtrlWrapper = tupConfctrlWrapper_1.default.getInstance();
                    if (util.isUndefined(confId) || confId === "") {
                        client_1.default.notifyErr(errorCode_1.EC_SDK_ERROR.CONF_PARAM_INVALID_ERROR("confId"));
                        return [2];
                    }
                    confCtrlWrapper.getConfInfo(confId)
                        .then(function (data) {
                        callback(data);
                    }).catch(function (data) {
                        var retInfo = util.getErrResult(data.info.notify, data.info.param.result, "Meeting does not exist");
                        util_1.default.error("confManager", "getConfinfo failed " + JSON.stringify(retInfo));
                        callback(data);
                    });
                    return [2];
                });
            });
        };
        ConfManager.prototype.getAttendeeList = function (eventType, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.confAttendeeList = new confAttendeeList_1.default();
                            return [4, this.confAttendeeList.showAttendeeTb()];
                        case 1:
                            data = _a.sent();
                            callback(data);
                            return [2];
                    }
                });
            });
        };
        ConfManager.prototype.setAttendee = function (eventType, attendee, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.confAttendeeList = new confAttendeeList_1.default();
                            return [4, this.confAttendeeList.addAttendeeTb(attendee)];
                        case 1:
                            data = _a.sent();
                            callback(data);
                            return [2];
                    }
                });
            });
        };
        ConfManager.prototype.refreshToken = function (event) {
            return __awaiter(this, void 0, void 0, function () {
                var confCtrlWrapper, info;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            confCtrlWrapper = tupConfctrlWrapper_1.default.getInstance();
                            return [4, confCtrlWrapper.setToken()];
                        case 1:
                            info = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ConfManager.prototype.getPromise = function () {
            var p = {};
            p.promise = new Promise(function (resolve, reject) {
                p.resolve = resolve;
                p.reject = reject;
            });
            return p;
        };
        ConfManager.prototype.accessReservedConf = function (event, joinConfParam, mediaType, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var cloudEC_loginInfo, loginInfo, deployMode, wrapper, callNum, ret, err, ret, err;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            cloudEC_loginInfo = sessionStorage.cloudEC_loginInfo;
                            loginInfo = JSON.parse(cloudEC_loginInfo);
                            deployMode = loginInfo.deployMode;
                            wrapper = tupCallWrapper_1.default.getInstance();
                            if (!(deployMode == enum_1.CLOUDEC_LOGIN_E_DEPLOY_MODE.LOGIN_E_DEPLOY_ENTERPRISE_CC)) return [3, 2];
                            callNum = joinConfParam.accessNumber + "*" + joinConfParam.confPasswd + "#";
                            return [4, wrapper.startCall(callNum, mediaType)];
                        case 1:
                            ret = _a.sent();
                            callNum = "";
                            if (ret) {
                                callback({ result: true, info: "access reserved conference succeed" });
                            }
                            else {
                                err = { cmdId: 0, errorCode: -1, errorInfo: "ec smc access reserved conference failed,please check input conference info" };
                                callback({ result: false, info: err });
                            }
                            return [3, 4];
                        case 2:
                            if (!(deployMode == enum_1.CLOUDEC_LOGIN_E_DEPLOY_MODE.LOGIN_E_DEPLOY_SPHOSTED_CC)) return [3, 4];
                            return [4, wrapper.accessReservedConf(mediaType, joinConfParam.conferenceId, joinConfParam.accessNumber, joinConfParam.confPasswd)];
                        case 3:
                            ret = _a.sent();
                            if (ret.result == 0) {
                                callback({ result: true, info: ret.param });
                            }
                            else {
                                err = { cmdId: 0, errorCode: -1, errorInfo: "access reserved conference failed,please check input conference info" };
                                Object.assign(err, util.getErrCode(ret.rsp, ret.result));
                                callback({ result: false, info: err });
                            }
                            _a.label = 4;
                        case 4:
                            joinConfParam.confPasswd = "";
                            return [2];
                    }
                });
            });
        };
        ConfManager.prototype.acceptConf = function (eventType, confHandle, mediaType, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper, data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            wrapper = tupConfctrlWrapper_1.default.getInstance();
                            return [4, wrapper.acceptConf(confHandle, mediaType, callback)];
                        case 1:
                            data = _a.sent();
                            callback(data);
                            return [2];
                    }
                });
            });
        };
        ConfManager.prototype.rejectConf = function (eventType, confHandle, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper, data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            wrapper = tupConfctrlWrapper_1.default.getInstance();
                            return [4, wrapper.rejectConf(confHandle, callback)];
                        case 1:
                            data = _a.sent();
                            callback(data);
                            return [2];
                    }
                });
            });
        };
        ConfManager.prototype.addAttendee = function (event, attendees, confHandle) {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper, attendeeNum, eaddrWrapper, configedAttendees, i, data_1, attendeeParam, data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            wrapper = tupConfctrlWrapper_1.default.getInstance();
                            attendeeNum = attendees.length;
                            eaddrWrapper = tupEaddrWrapper_1.default.getInstance();
                            configedAttendees = new Array();
                            i = 0;
                            _a.label = 1;
                        case 1:
                            if (!(i < attendees.length)) return [3, 4];
                            return [4, eaddrWrapper.searchUserInfo(i + 1, { condition: attendees[i].number, pageIndex: 1, searchType: 0 })];
                        case 2:
                            data_1 = _a.sent();
                            if (0 == data_1.param.result && 1 == data_1.param.TotalNum) {
                                attendeeParam = data_1.param.entry[0];
                                configedAttendees[i] = {
                                    acount_id: attendeeParam.ucaccount,
                                    number: attendeeParam.espacenumber,
                                    name: attendeeParam.name,
                                    sms: attendeeParam.mobile,
                                    email: attendeeParam.email,
                                    role: 0,
                                    is_auto_invite: 1,
                                    display_name: attendeeParam.name,
                                };
                            }
                            else {
                                configedAttendees[i] = {
                                    acount_id: "",
                                    number: attendees[i].number,
                                    name: attendees[i].name,
                                    sms: attendees[i].smsPhone,
                                    email: attendees[i].email,
                                    role: 0,
                                    is_auto_invite: 1
                                };
                            }
                            _a.label = 3;
                        case 3:
                            i++;
                            return [3, 1];
                        case 4: return [4, wrapper.addAttendee(confHandle, attendeeNum, configedAttendees).catch(function (ret) {
                                client_1.default.notifyErr(util.getErrResult(ret.notify, ret.param.ret, ret.description));
                            })];
                        case 5:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ConfManager.prototype.removeAttendee = function (event, attendeeNum, confHandle, attendeeList) {
            return __awaiter(this, void 0, void 0, function () {
                var confCtrlWrapper, dataConfWrapper, role, dataconfUserId, i, logInfo;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            confCtrlWrapper = tupConfctrlWrapper_1.default.getInstance();
                            dataConfWrapper = tupDataConfWrapper_1.default.getInstance();
                            role = null;
                            dataconfUserId = null;
                            for (i = 0; i < attendeeList.length; i++) {
                                if (attendeeList[i].number === attendeeNum) {
                                    role = attendeeList[i].role;
                                    if (util.isUndefined(attendeeList[i].dataconfUserId)) {
                                        logInfo = util.hidePhone(attendeeNum);
                                        util_1.default.debug("confManager", "user " + logInfo + " not in dataconf.");
                                        break;
                                    }
                                    dataconfUserId = attendeeList[i].dataconfUserId;
                                    break;
                                }
                            }
                            if (role === 1) {
                                util_1.default.error("confManager", "cannot remove chairman.");
                                client_1.default.notifyErr(errorCode_1.EC_SDK_ERROR.USER_ROLE_ERROR("removeAttendee"));
                                return [2];
                            }
                            return [4, confCtrlWrapper.hangupAttendee(confHandle, attendeeNum)
                                    .catch(function (ret) {
                                    client_1.default.notifyErr(util.getErrResult(ret.notify, ret.param.ret, ret.description));
                                    return;
                                })];
                        case 1:
                            _a.sent();
                            return [4, confCtrlWrapper.removeAttendee(confHandle, attendeeNum)
                                    .catch(function (ret) {
                                    client_1.default.notifyErr(util.getErrResult(ret.notify, ret.param.ret, ret.description));
                                    return;
                                })];
                        case 2:
                            _a.sent();
                            if (!(dataconfUserId != null)) return [3, 4];
                            return [4, dataConfWrapper.kickOutUser(confInfo.dataConfHandle, dataconfUserId)
                                    .catch(function (ret) {
                                    var logInfo = util.replaceLogInfo(ret);
                                    util_1.default.error("confManager", "removeAttendee, ret = " + logInfo);
                                })];
                        case 3:
                            _a.sent();
                            _a.label = 4;
                        case 4: return [2];
                    }
                });
            });
        };
        ConfManager.prototype.muteConf = function (event, confHandle, isMute) {
            return __awaiter(this, void 0, void 0, function () {
                var confCtrlWrapper;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            confCtrlWrapper = tupConfctrlWrapper_1.default.getInstance();
                            return [4, confCtrlWrapper.muteConf(confHandle, isMute).catch(function (ret) {
                                    client_1.default.notifyErr(util.getErrResult(ret.notify, ret.param.ret, ret.description));
                                })];
                        case 1:
                            _a.sent();
                            return [2];
                    }
                });
            });
        };
        ConfManager.prototype.muteAttendee = function (event, confHandle, attendee, isMute) {
            return __awaiter(this, void 0, void 0, function () {
                var confCtrlWrapper;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            confCtrlWrapper = tupConfctrlWrapper_1.default.getInstance();
                            return [4, confCtrlWrapper.muteAttendee(confHandle, isMute, attendee.number).catch(function (ret) {
                                    client_1.default.notifyErr(util.getErrResult(ret.notify, ret.param.ret, ret.description));
                                })];
                        case 1:
                            _a.sent();
                            return [2];
                    }
                });
            });
        };
        ConfManager.prototype.releaseChairman = function (event, confHandle, dataConfHandle, attendeeList) {
            return __awaiter(this, void 0, void 0, function () {
                var confCtrlWrapper, dataConfWrapper, me;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            confCtrlWrapper = tupConfctrlWrapper_1.default.getInstance();
                            dataConfWrapper = tupDataConfWrapper_1.default.getInstance();
                            return [4, this.getSelfMember(attendeeList)];
                        case 1:
                            me = _a.sent();
                            return [4, confCtrlWrapper.releaseChairman(confHandle, me.number).catch(function (ret) {
                                    util_1.default.error("confManager", "releaseChairman failed");
                                    client_1.default.notifyErr(util.getErrResult(ret.info.notify, ret.info.param.ret, ret.info.description));
                                    return;
                                })];
                        case 2:
                            _a.sent();
                            if (!(!util.isUndefined(me.dataconfUserId) && me.dataconfUserId != 0)) return [3, 4];
                            return [4, dataConfWrapper.userSetRole(2, dataConfHandle, 0).catch(function (ret) {
                                    util_1.default.error("confManager", "userSetRole failed");
                                    client_1.default.notifyErr(util.getErrResult(ret.info.rsp, ret.info.param.result, ret.info.description));
                                })];
                        case 3:
                            _a.sent();
                            _a.label = 4;
                        case 4: return [2];
                    }
                });
            });
        };
        ConfManager.prototype.requestChairman = function (event, confHandle, dataConfHandle, confId, hostKey, attendeeList, chairmanPwd) {
            return __awaiter(this, void 0, void 0, function () {
                var confCtrlWrapper, dataConfWrapper, me;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            confCtrlWrapper = tupConfctrlWrapper_1.default.getInstance();
                            dataConfWrapper = tupDataConfWrapper_1.default.getInstance();
                            return [4, this.getSelfMember(attendeeList)];
                        case 1:
                            me = _a.sent();
                            confCtrlWrapper.requestChairman(confHandle, me.number, chairmanPwd)
                                .then(function (ret) {
                                if (!util.isUndefined(me.dataconfUserId) && me.dataconfUserId != 0) {
                                    dataConfWrapper.userRequestRole(dataConfHandle, 2, "")
                                        .catch(function (ret) {
                                        util_1.default.error("confManager", "userRequestRole failed ");
                                        client_1.default.notifyErr(util.getErrResult(ret.info.rsp, ret.info.param.result, ret.info.description));
                                    });
                                }
                            }).catch(function (ret) {
                                util_1.default.error("confManager", "requestChairman failed ");
                                client_1.default.notifyErr(util.getErrResult(ret.info.notify, ret.info.param.ret, ret.info.description));
                            });
                            return [2];
                    }
                });
            });
        };
        ConfManager.prototype.handup = function (event, confHandle, attendee, attendeeList) {
            return __awaiter(this, void 0, void 0, function () {
                var confCtrlWrapper, me, toRaise;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            confCtrlWrapper = tupConfctrlWrapper_1.default.getInstance();
                            return [4, this.getSelfMember(attendeeList)];
                        case 1:
                            me = _a.sent();
                            if (!(me.role == 1)) return [3, 3];
                            return [4, confCtrlWrapper.handup(attendee, confHandle, 0).catch(function (ret) {
                                    client_1.default.notifyErr(util.getErrResult(ret.info.notify, ret.info.param.ret, ret.info.description));
                                    return;
                                })];
                        case 2:
                            _a.sent();
                            return [2];
                        case 3:
                            toRaise = 0;
                            if (me.raiseHandState == 0) {
                                toRaise = 1;
                            }
                            confCtrlWrapper.handup(attendee, confHandle, toRaise).catch(function (ret) {
                                client_1.default.notifyErr(util.getErrResult(ret.info.notify, ret.info.param.ret, ret.info.description));
                                return;
                            });
                            return [2];
                    }
                });
            });
        };
        ConfManager.prototype.leaveConf = function (event, confHandle, dataConfHandle, passInAttendees, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var confCtrlWrapper, dataConfWrapper, me;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            confCtrlWrapper = tupConfctrlWrapper_1.default.getInstance();
                            dataConfWrapper = tupDataConfWrapper_1.default.getInstance();
                            return [4, this.getSelfMember(passInAttendees)];
                        case 1:
                            me = _a.sent();
                            confCtrlWrapper.leaveConf(confHandle)
                                .catch(function (ret) {
                                var retInfo = util.getErrResult(ret.info.rsp, ret.info.result, "");
                                client_1.default.notifyErr(retInfo);
                            }).then(function (ret) {
                                if (!util.isUndefined(me) && (!util.isUndefined(me.dataconfUserId) && (me.dataconfUserId != 0) && me.dataconfUserId != 0)) {
                                    dataConfWrapper.leave(dataConfHandle)
                                        .then(function (ret) {
                                        return dataConfWrapper.release(dataConfHandle);
                                    }).catch(function (ret) {
                                        client_1.default.notifyErr(util.getErrResult(ret.info.rsp, ret.info.param.result, ret.info.description));
                                    }).then(function (ret) {
                                        observer_1.default.publish("confFinished", { "confHandle": confHandle, "dataConfHandle": dataConfHandle });
                                        if (!util.isUndefined(callback)) {
                                            callback();
                                        }
                                    });
                                }
                                else {
                                    observer_1.default.publish("confFinished", { "confHandle": confHandle, "dataConfHandle": dataConfHandle });
                                    if (!util.isUndefined(callback)) {
                                        callback();
                                    }
                                }
                            });
                            return [2];
                    }
                });
            });
        };
        ConfManager.prototype.endConf = function (event, confHandle, dataConfHandle, attendeeList) {
            return __awaiter(this, void 0, void 0, function () {
                var confCtrlWrapper, dataConfWrapper, me;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            confCtrlWrapper = tupConfctrlWrapper_1.default.getInstance();
                            dataConfWrapper = tupDataConfWrapper_1.default.getInstance();
                            return [4, this.getSelfMember(attendeeList)];
                        case 1:
                            me = _a.sent();
                            return [4, confCtrlWrapper.endConf(confHandle).catch(function (ret) {
                                    if (ret.info.description === "tup_confctrl_end_conf") {
                                        client_1.default.notifyErr(util.getErrResult(ret.info.rsp, ret.info.result, ret.description));
                                        util_1.default.error("confManager", "end conf failed" + "result =" + ret.info.result + ",description =" + ret.info.description);
                                    }
                                    else {
                                        client_1.default.notifyErr(util.getErrResult(ret.info.notify, ret.info.param.ret, ret.info.description));
                                        util_1.default.error("confManager", "end conf failed" + "result =" + ret.info.param.ret + ",description =" + ret.info.description);
                                    }
                                    return;
                                })];
                        case 2:
                            _a.sent();
                            if (!(!util.isUndefined(me.dataconfUserId) && (me.dataconfUserId != 0) && (dataConfHandle != 0))) return [3, 5];
                            return [4, dataConfWrapper.terminal(dataConfHandle).catch(function (ret) {
                                    if (ret.info.description == "callback") {
                                        client_1.default.notifyErr(util.getErrResult(ret.info.rsp, ret.info.param.result, "terminal data conference error"));
                                        util_1.default.error("confManager", "terminal data conference error, result = " + ret.info.param.result);
                                    }
                                    else {
                                        client_1.default.notifyErr(util.getErrResult(ret.info.notify, ret.info.param.value1, "terminal data conference error"));
                                        util_1.default.error("confManager", "terminal data conference error, result = " + ret.info.param.value1);
                                    }
                                })];
                        case 3:
                            _a.sent();
                            return [4, dataConfWrapper.release(dataConfHandle).catch(function (ret) {
                                    client_1.default.notifyErr(util.getErrResult(ret.info.rsp, ret.info.param.result, "release data conference error"));
                                    util_1.default.error("confManager", "release data conference error");
                                })];
                        case 4:
                            _a.sent();
                            _a.label = 5;
                        case 5:
                            observer_1.default.publish("confFinished", { "confHandle": confHandle, "dataConfHandle": dataConfHandle });
                            return [2];
                    }
                });
            });
        };
        ConfManager.prototype.setConfMode = function (event, confHandle, mode) {
            return __awaiter(this, void 0, void 0, function () {
                var confCtrlWrapper;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            confCtrlWrapper = tupConfctrlWrapper_1.default.getInstance();
                            return [4, confCtrlWrapper.setConfMode(confHandle, mode).catch(function (data) {
                                    client_1.default.notifyErr(util.getErrResult(data.info.notify, data.info.param.ret, data.info.description));
                                })];
                        case 1:
                            _a.sent();
                            return [2];
                    }
                });
            });
        };
        ConfManager.prototype.setConfMixedPicture = function (event, confHandle, mode, imageType, attendees) {
            return __awaiter(this, void 0, void 0, function () {
                var confCtrlWrapper, configedAttendees, i;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            confCtrlWrapper = tupConfctrlWrapper_1.default.getInstance();
                            configedAttendees = new Array();
                            for (i = 0; i < attendees.length; i++) {
                                configedAttendees[i] = {
                                    acount_id: "",
                                    number: attendees[i].number,
                                    name: attendees[i].name,
                                    sms: attendees[i].smsPhone,
                                    email: attendees[i].email,
                                };
                            }
                            return [4, confCtrlWrapper.setConfMixedPicture(confHandle, mode, imageType, configedAttendees).catch(function (data) {
                                    client_1.default.notifyErr(util.getErrResult(data.info.notify, data.info.param.result, data.info.description));
                                })];
                        case 1:
                            _a.sent();
                            return [2];
                    }
                });
            });
        };
        ConfManager.prototype.broadcastAttendee = function (event, confHandle, isBroad, attendee, callbacks) {
            return __awaiter(this, void 0, void 0, function () {
                var confCtrlWrapper, data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            confCtrlWrapper = tupConfctrlWrapper_1.default.getInstance();
                            return [4, confCtrlWrapper.broadcastAttendee(confHandle, isBroad, attendee).then(function (successCallback) {
                                    callbacks(successCallback);
                                }, function (failureCallback) {
                                    client_1.default.notifyErr(util.getErrResult(failureCallback.info.description.notify, failureCallback.info.description.param.operation_rsp_reason, "operation failed"));
                                })];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ConfManager.prototype.watchAttendee = function (event, confHandle, attendee, callbacks) {
            return __awaiter(this, void 0, void 0, function () {
                var confCtrlWrapper;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            confCtrlWrapper = tupConfctrlWrapper_1.default.getInstance();
                            return [4, confCtrlWrapper.watchAttendee(confHandle, attendee).catch(function (data) {
                                    client_1.default.notifyErr(util.getErrResult(data.info.notify, data.info.param.operation_rsp_reason, data.info.description));
                                })];
                        case 1:
                            _a.sent();
                            return [2];
                    }
                });
            });
        };
        ConfManager.prototype.getSelfMember = function (attendeeList) {
            return __awaiter(this, void 0, void 0, function () {
                var phoneNumber, i;
                return __generator(this, function (_a) {
                    phoneNumber = this.getPhoneNumber();
                    for (i = 0; i < attendeeList.length; i++) {
                        if (attendeeList[i].isSelf == 1) {
                            return [2, attendeeList[i]];
                        }
                    }
                    return [2];
                });
            });
        };
        ConfManager.prototype.getPhoneNumber = function () {
            var cloudEC_loginInfo = sessionStorage.cloudEC_loginInfo;
            var loginInfo = JSON.parse(cloudEC_loginInfo);
            var sipImpi = loginInfo.sipImpi;
            var phoneNumber = sipImpi.split("@")[0];
            return phoneNumber;
        };
        ConfManager.prototype.getSipAccount = function () {
            var cloudEC_loginInfo = sessionStorage.cloudEC_loginInfo;
            var loginInfo = JSON.parse(cloudEC_loginInfo);
            var sipAccount = loginInfo.sipAccount;
            return sipAccount;
        };
        ConfManager.prototype.getDataconfParamsForConfInfoInd = function (confParams, userAccount) {
            var confCtrlWrap = tupConfctrlWrapper_1.default.getInstance();
            var dataConfWrap = tupDataConfWrapper_1.default.getInstance();
            confCtrlWrap.getDataconfParams(confParams).then(function (bigparam) {
                return __awaiter(this, void 0, void 0, function () {
                    var hostKey, title, userId, option, siteId, userTypeTemp, userType, siteUrl, serverIp, serverInterip, sbcServerAddress, encryptionKey, confId, userCapability, userName, logUrl, userM, userT;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                hostKey = bigparam.param.conf_params.host_key;
                                confInfo.hostKey = hostKey;
                                title = bigparam.param.conf_params.short_conf_name ? bigparam.param.conf_params.short_conf_name : "subject";
                                userId = parseInt(bigparam.param.conf_params.user_id);
                                option = 4096;
                                siteId = bigparam.param.conf_params.site_id;
                                userTypeTemp = parseInt(bigparam.param.conf_params.user_role);
                                if (userTypeTemp < 8) {
                                    userType = 3;
                                }
                                else {
                                    userType = 8;
                                }
                                siteUrl = bigparam.param.conf_params.site_url;
                                sbcServerAddress = bigparam.param.conf_params.sbc_server_address;
                                if ((serverConfig_1.CloudEC_SERVERCONFIG.IS_WITH_SBC == 1) && !(sbcServerAddress == undefined || sbcServerAddress == "" || sbcServerAddress.toLowerCase() == "null")) {
                                    serverIp = bigparam.param.conf_params.sbc_server_address;
                                    serverInterip = bigparam.param.conf_params.server_ip;
                                }
                                else {
                                    serverIp = bigparam.param.conf_params.server_ip;
                                    serverInterip = "";
                                }
                                encryptionKey = bigparam.param.conf_params.crypt_key;
                                confId = parseInt(bigparam.param.conf_params.conf_id);
                                userCapability = 2046;
                                userName = userAccount;
                                logUrl = bigparam.param.conf_params.user_uri;
                                userM = bigparam.param.conf_params.M;
                                userT = bigparam.param.conf_params.T;
                                return [4, dataConfWrap.createConference(title, option, userType, userId, userName, hostKey, confId, encryptionKey, siteId, siteUrl, serverIp, serverInterip, userCapability, 0, logUrl, userM, userT)];
                            case 1: return [2, _a.sent()];
                        }
                    });
                });
            }).then(function (confResponse) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                confInfo.dataConfHandle = confResponse.param.confHandle;
                                return [4, dataConfWrap.joinConference(confResponse.param.confHandle)];
                            case 1: return [2, _a.sent()];
                        }
                    });
                });
            }).then(function (joinResponse) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4, dataConfWrap.loadComponent(joinResponse.param.confHandle, 34)];
                            case 1: return [2, _a.sent()];
                        }
                    });
                });
            }).then(function (loadCompResponse) {
                util_1.default.debug("confManager", "into conf");
                var evt = { result: true, info: confInfo };
                observer_1.default.publish('ConfInfoInd', evt);
            }).catch(function (data) {
                if (data.description === "CONFCTRL_E_EVT_CREATE_CONF_RESULT") {
                    var err = util.getErrResult(data.notify, data.param.ret, data.description);
                    client_1.default.notifyErr(err);
                }
                else {
                    var err = util.getErrResult(40000100, data.param.value1, data.description);
                    client_1.default.notifyErr(err);
                    var evt = { result: false, info: confInfo };
                    observer_1.default.publish('ConfInfoInd', evt);
                }
            });
        };
        ConfManager.prototype.getDataconfParamSTG = function (confParams, userAccount) {
            var confCtrlWrap = tupConfctrlWrapper_1.default.getInstance();
            var dataConfWrap = tupDataConfWrapper_1.default.getInstance();
            var cloudEC_loginInfo = sessionStorage.cloudEC_loginInfo;
            var loginInfo = JSON.parse(cloudEC_loginInfo);
            var deployMode = loginInfo.deployMode;
            var stgUri = loginInfo.stgUri;
            var fireWallMode = loginInfo.fireWallMode;
            var mybindno = this.getPhoneNumber();
            confCtrlWrap.getDataconfParams(confParams).then(function (getBigParamResult) {
                return __awaiter(this, void 0, void 0, function () {
                    var bigParamResult;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (!(getBigParamResult.param && getBigParamResult.param.conf_params && getBigParamResult.param.conf_params.conf_id
                                    && getBigParamResult.param.conf_params.conf_id !== "")) return [3, 3];
                                getBigParamResult.param.firewallmode = fireWallMode == 2 ? 3 : fireWallMode;
                                getBigParamResult.param.servertype = deployMode;
                                getBigParamResult.param.confparam_url = confParams.conf_url;
                                getBigParamResult.param.language = "zh-CN";
                                getBigParamResult.param.stgaddress = stgUri;
                                getBigParamResult.param.conf_params.option = 0x00800000;
                                if (util.isUndefined(getBigParamResult.param.conf_params.user_uri)) {
                                    getBigParamResult.param.conf_params.user_uri = mybindno;
                                }
                                getBigParamResult.param.conf_params.bind_number = getBigParamResult.param.conf_params.user_uri;
                                getBigParamResult.param.conf_params.conf_name = getBigParamResult.param.conf_params.short_conf_name;
                                getBigParamResult.param.conf_params.user_name = getBigParamResult.param.conf_params.short_user_name;
                                bigParamResult = {
                                    conf_param: getBigParamResult.param.conf_params,
                                    firewallmode: getBigParamResult.param.firewallmode,
                                    servertype: getBigParamResult.param.servertype,
                                    confparam_url: getBigParamResult.param.confparam_url,
                                    language: getBigParamResult.param.language,
                                    stgaddress: getBigParamResult.param.stgaddress,
                                };
                                return [4, dataConfWrap.init()];
                            case 1:
                                _a.sent();
                                return [4, dataConfWrap.startJoinConference(bigParamResult)];
                            case 2: return [2, _a.sent()];
                            case 3: return [2];
                        }
                    });
                });
            }).then(function (confResponse) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4, dataConfWrap.loadComponent(confResponse.param.confHandle, 34)];
                            case 1: return [2, _a.sent()];
                        }
                    });
                });
            }).then(function (loadCompResponse) {
                util_1.default.debug("confManager", "into conf");
                var evt = { result: true, info: confInfo };
                observer_1.default.publish('ConfInfoInd', evt);
            }).catch(function (data) {
                if (data.description === "CONFCTRL_E_EVT_CREATE_CONF_RESULT") {
                    var err = util.getErrResult(data.notify, data.param.ret, data.description);
                    client_1.default.notifyErr(err);
                }
                else {
                    var err = util.getErrResult(40000100, data.param.value1, data.description);
                    client_1.default.notifyErr(err);
                    var evt = { result: false, info: confInfo };
                    observer_1.default.publish('ConfInfoInd', evt);
                }
            });
        };
        ConfManager.prototype.updateDataconfMemberTb = function (eventType, participantId, isDataconfMember, dataconfUserId, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.confAttendeeList = new confAttendeeList_1.default();
                            return [4, this.confAttendeeList.updateDataconfMemberTb(participantId, isDataconfMember, dataconfUserId)];
                        case 1:
                            data = _a.sent();
                            callback(data);
                            return [2];
                    }
                });
            });
        };
        ConfManager.prototype.selectDataconfMemberTb = function (eventType, dataconfUserId, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.confAttendeeList = new confAttendeeList_1.default();
                            return [4, this.confAttendeeList.selectDataconfMemberByIndexTb(dataconfUserId)];
                        case 1:
                            data = _a.sent();
                            callback(data);
                            return [2];
                    }
                });
            });
        };
        ConfManager.prototype.updateSharingSessionTb = function (eventType, participantId, sharingSession, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.confAttendeeList = new confAttendeeList_1.default();
                            return [4, this.confAttendeeList.updateSharingSessionTb(participantId, sharingSession)];
                        case 1:
                            data = _a.sent();
                            callback(data);
                            return [2];
                    }
                });
            });
        };
        ConfManager.prototype.updateDataconfMemberTypeTb = function (eventType, participantId, dataconfMemberType, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.confAttendeeList = new confAttendeeList_1.default();
                            return [4, this.confAttendeeList.updateDataconfMemberTypeTb(participantId, dataconfMemberType)];
                        case 1:
                            data = _a.sent();
                            callback(data);
                            return [2];
                    }
                });
            });
        };
        ConfManager.prototype.asSetOwner = function (eventType, dataConfHandle, action, userid) {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper, data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            wrapper = tupDataConfWrapper_1.default.getInstance();
                            return [4, wrapper.asSetOwner(dataConfHandle, action, userid)];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ConfManager.prototype.asSetShareType = function (eventType, dataConfHandle, shareType) {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper, data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            wrapper = tupDataConfWrapper_1.default.getInstance();
                            return [4, wrapper.asSetShareType(dataConfHandle, shareType)];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ConfManager.prototype.asStart = function (eventType, dataConfHandle) {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper, data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            wrapper = tupDataConfWrapper_1.default.getInstance();
                            return [4, wrapper.asStart(dataConfHandle)];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ConfManager.prototype.setDataRender = function (eventType, data) {
            var wrapper = tupDataConfWrapper_1.default.getInstance();
            var result = wrapper.setDataRender(data);
        };
        ConfManager.prototype.setWBDataRender = function (eventType, data) {
            var wrapper = tupDataConfWrapper_1.default.getInstance();
            var result = wrapper.setWBDataRender(data);
        };
        ConfManager.prototype.asStop = function (eventType, dataConfHandle) {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper, data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            wrapper = tupDataConfWrapper_1.default.getInstance();
                            return [4, wrapper.asStop(dataConfHandle)];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ConfManager.prototype.createWhiteBoard = function (eventType, dataConfHandle, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper, data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            wrapper = tupDataConfWrapper_1.default.getInstance();
                            return [4, wrapper.createWhiteBoard(dataConfHandle, callback)];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ConfManager.prototype.wbPageCreate = function (eventType, dataConfHandle, docid, height, width) {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper, data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            wrapper = tupDataConfWrapper_1.default.getInstance();
                            return [4, wrapper.wbNewPage(dataConfHandle, docid, height, width)];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ConfManager.prototype.wbPageDelete = function (eventType, dataConfHandle, docid) {
            return __awaiter(this, void 0, void 0, function () {
                var height, width, wrapper, data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            height = 800;
                            width = 600;
                            wrapper = tupDataConfWrapper_1.default.getInstance();
                            return [4, wrapper.wbNewPage(dataConfHandle, docid, height, width)];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ConfManager.prototype.wbSetCurrentPage = function (eventType, dataConfHandle, docid, pageid) {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper, data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            wrapper = tupDataConfWrapper_1.default.getInstance();
                            return [4, wrapper.wbSetCurrentPage(dataConfHandle, docid, pageid, 0)];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ConfManager.prototype.deleleWhiteBorad = function (eventType, dataConfHandle, docid) {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper, data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            wrapper = tupDataConfWrapper_1.default.getInstance();
                            return [4, wrapper.deleleWhiteBoradStop(dataConfHandle, docid)];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ConfManager.prototype.requestRemoteCtrl = function (eventType, dataConfHandle, privilege) {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper, data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            wrapper = tupDataConfWrapper_1.default.getInstance();
                            return [4, wrapper.asRequestPrivilege(dataConfHandle, privilege)];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ConfManager.prototype.setRemoteCtrl = function (eventType, dataConfHandle, privilege, action, userid) {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper, data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            wrapper = tupDataConfWrapper_1.default.getInstance();
                            return [4, wrapper.asSetPrivilege(dataConfHandle, privilege, action, userid)];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ConfManager.prototype.keyboardInput = function (eventType, dataConfHandle, msgid, lparam, wparam, pt) {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper, data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            wrapper = tupDataConfWrapper_1.default.getInstance();
                            return [4, wrapper.asInputWndMsg(dataConfHandle, msgid, lparam, wparam, pt)];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ConfManager.prototype.sendMessage = function (eventType, dataConfHandle, messageParam) {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper, data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            wrapper = tupDataConfWrapper_1.default.getInstance();
                            return [4, wrapper.sendMessage(dataConfHandle, messageParam.receiveID, messageParam.msgContent)];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ConfManager.prototype.videoRenderCtrl = function (eventType, enableFlag) {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper;
                return __generator(this, function (_a) {
                    wrapper = tupCallWrapper_1.default.getInstance();
                    wrapper.videoRenderCtrl(enableFlag);
                    return [2];
                });
            });
        };
        ConfManager.prototype.setCanvasSize = function (eventType, dataConfHandle, canvasNum, width, height) {
            var wrapper = tupCallWrapper_1.default.getInstance();
            var dataConfWrapper = tupDataConfWrapper_1.default.getInstance();
            switch (canvasNum) {
                case 1:
                    wrapper.setLocalViewWH(width, height);
                    break;
                case 2:
                    wrapper.setRemoteViewWH(width, height);
                    break;
                case 3:
                    dataConfWrapper.asSetparam(dataConfHandle, 6, width, height);
                    break;
                case 4: break;
            }
        };
        ConfManager.prototype.setDropFrame = function (eventType, count) {
            var wrapper = tupCallWrapper_1.default.getInstance();
            wrapper.setDropFrame(count);
        };
        ConfManager.prototype.videoReconnect = function (eventType, localView, remoteView) {
            var wrapper = tupCallWrapper_1.default.getInstance();
            wrapper.setVideoRender(localView, remoteView);
            wrapper.setLocalViewWH(localView.width, localView.height);
            wrapper.setRemoteViewWH(remoteView.width, remoteView.height);
        };
        ConfManager.prototype.annotationCreateStart = function (eventType, point, subtype, ciid, type, confHandle, docid, pageid) {
            var wrapper = tupDataConfWrapper_1.default.getInstance();
            wrapper.annotationCreateStart(point, subtype, ciid, type, confHandle, docid, pageid);
        };
        ConfManager.prototype.annotationCreateCustomerUpdate = function (eventType, confHandle, ciid, pdata) {
            var wrapper = tupDataConfWrapper_1.default.getInstance();
            wrapper.annotationCreateCustomerUpdate(confHandle, ciid, pdata);
        };
        ConfManager.prototype.annotationCreateDrawingUpdate = function (eventType, confHandle, ciid, pdata) {
            var wrapper = tupDataConfWrapper_1.default.getInstance();
            wrapper.annotationCreateDrawingUpdate(confHandle, ciid, pdata);
        };
        ConfManager.prototype.annotationCreateDone = function (eventType, confHandle, retAnnoid, ciid, bCancel) {
            var wrapper = tupDataConfWrapper_1.default.getInstance();
            wrapper.annotationCreateDone(confHandle, retAnnoid, ciid, bCancel);
        };
        ConfManager.prototype.annotationSetselect = function (eventType, confHandle, selectmode, ciid, annoid, docid, pageid) {
            var wrapper = tupDataConfWrapper_1.default.getInstance();
            wrapper.annotationSetselect(confHandle, selectmode, ciid, annoid, docid, pageid);
        };
        ConfManager.prototype.annotationDelete = function (eventType, confHandle, ciid, ids, pageid, docid) {
            var wrapper = tupDataConfWrapper_1.default.getInstance();
            wrapper.annotationDelete(confHandle, ciid, ids, ids.length, pageid, docid);
        };
        ConfManager.prototype.annotationEditStart = function (eventType, confHandle, refannotid, edittype, docid, pageid, ciid, startpoint, annoid) {
            var wrapper = tupDataConfWrapper_1.default.getInstance();
            wrapper.annotationEditStart(confHandle, refannotid, edittype, docid, pageid, ciid, startpoint, annoid);
        };
        ConfManager.prototype.annotationEditUpdate = function (eventType, confHandle, ciid, currentpoint) {
            var wrapper = tupDataConfWrapper_1.default.getInstance();
            wrapper.annotationEditUpdate(confHandle, ciid, currentpoint);
        };
        ConfManager.prototype.annotationEditDone = function (eventType, confHandle, ciid, cancel) {
            var wrapper = tupDataConfWrapper_1.default.getInstance();
            wrapper.annotationEditDone(confHandle, cancel, ciid);
        };
        ConfManager.prototype.annotationTextCreate = function (eventType, confHandle, pInfo, retAnnoid, docid, pageid, ciid) {
            var wrapper = tupDataConfWrapper_1.default.getInstance();
            wrapper.annotationTextCreate(confHandle, pInfo, retAnnoid, docid, pageid, ciid);
        };
        ConfManager.prototype.annotationTextUpdate = function (eventType, confHandle, redraw, pInfo, docid, pageid, ciid, annoid) {
            var wrapper = tupDataConfWrapper_1.default.getInstance();
            wrapper.annotationTextUpdate(confHandle, redraw, pInfo, docid, pageid, ciid, annoid);
        };
        ConfManager.prototype.annotationTextGetinfo = function (eventType, confHandle, ciid, docid, pageid, annoid) {
            var wrapper = tupDataConfWrapper_1.default.getInstance();
            wrapper.annotationTextGetinfo(confHandle, ciid, docid, pageid, annoid);
        };
        ConfManager.prototype.annotationHittest = function (eventType, confHandle, pt, hitmode, docid, pageid, ciid) {
            var wrapper = tupDataConfWrapper_1.default.getInstance();
            wrapper.annotationHittest(confHandle, pt, hitmode, docid, pageid, ciid);
        };
        ConfManager.prototype.annotationHittestRect = function (eventType, confHandle, ciid, rect) {
            var wrapper = tupDataConfWrapper_1.default.getInstance();
            wrapper.annotationHittestRect(confHandle, ciid, rect);
        };
        ConfManager.prototype.annotationLaserpointerStart = function (eventType, confHandle, picFormat, localIndex, ptOffset, picW, pData, dataLen, picH, bLocal, ciid, dispSize) {
            var wrapper = tupDataConfWrapper_1.default.getInstance();
            wrapper.annotationLaserpointerStart(confHandle, picFormat, localIndex, ptOffset, picW, pData, dataLen, picH, bLocal, ciid, dispSize);
        };
        ConfManager.prototype.annotationLaserpointerMoveto = function (eventType, confHandle, ciid, point) {
            var wrapper = tupDataConfWrapper_1.default.getInstance();
            wrapper.annotationLaserpointerMoveto(confHandle, ciid, point);
        };
        ConfManager.prototype.annotationLaserpointerStop = function (eventType, confHandle, ciid) {
            var wrapper = tupDataConfWrapper_1.default.getInstance();
            wrapper.annotationLaserpointerStop(confHandle, ciid);
        };
        ConfManager.prototype.p2pTransferToConf = function (eventType, instanceConfParam, callID, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var attendees, recordFlag, cloudEC_loginInfo, loginInfo, userAccount, assMedia, mediaType, confSubject, confCtrlWrap, phoneNumber, configedAttendees, attendeeIndex, eaddrWrapper, i, data, attendeeParam, createConfInfo, wrapper, result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            attendees = instanceConfParam.attendees;
                            recordFlag = instanceConfParam.autoRecord;
                            cloudEC_loginInfo = sessionStorage.cloudEC_loginInfo;
                            loginInfo = JSON.parse(cloudEC_loginInfo);
                            userAccount = loginInfo.userAccount;
                            assMedia = { mpi: 1, type: 1, code: 1, bandwidth: 1, size: 1 };
                            mediaType = 19;
                            switch (instanceConfParam.isVideo) {
                                case 0:
                                    mediaType = 1;
                                    break;
                                case 1:
                                    mediaType = 3;
                                    break;
                                case 2:
                                    mediaType = 17;
                                    break;
                                default:
                                    mediaType = 19;
                            }
                            confSubject = userAccount + "_Meeting";
                            if (instanceConfParam.topic != "") {
                                confSubject = instanceConfParam.topic;
                            }
                            confCtrlWrap = tupConfctrlWrapper_1.default.getInstance();
                            phoneNumber = this.getPhoneNumber();
                            configedAttendees = new Array();
                            attendeeIndex = 0;
                            eaddrWrapper = tupEaddrWrapper_1.default.getInstance();
                            i = 0;
                            _a.label = 1;
                        case 1:
                            if (!(i < attendees.length)) return [3, 4];
                            return [4, eaddrWrapper.searchUserInfo(i + 1, { condition: attendees[i].number, pageIndex: 1, searchType: 0 })];
                        case 2:
                            data = _a.sent();
                            if (0 == data.param.result && 1 == data.param.TotalNum) {
                                attendeeParam = data.param.entry[0];
                                configedAttendees[i] = {
                                    acount_id: attendeeParam.ucaccount,
                                    number: attendeeParam.espacenumber,
                                    name: attendeeParam.name,
                                    sms: attendeeParam.mobile,
                                    email: attendeeParam.email,
                                    role: attendees[i].role,
                                    is_auto_invite: 1,
                                    display_name: attendeeParam.name,
                                };
                            }
                            else {
                                configedAttendees[attendeeIndex] = {
                                    acount_id: "",
                                    number: attendees[i].number,
                                    name: attendees[i].name,
                                    sms: attendees[i].smsPhone,
                                    email: attendees[i].email,
                                    role: attendees[i].role,
                                    is_auto_invite: 1,
                                    display_name: attendees[i].name,
                                };
                            }
                            attendeeIndex++;
                            _a.label = 3;
                        case 3:
                            i++;
                            return [3, 1];
                        case 4:
                            createConfInfo = {
                                subject: confSubject,
                                group_uri: "",
                                welcome_voice_enable: 0,
                                enter_prompt: 0,
                                leave_prompt: 0,
                                conf_filter: 0,
                                record_flag: recordFlag,
                                multi_stream_flag: 0,
                                media_type: mediaType,
                                language: 0,
                                conf_encrypt_mode: 0,
                                user_type: 0,
                                num_of_attendee: configedAttendees.length,
                                attendee: configedAttendees
                            };
                            wrapper = tupConfctrlWrapper_1.default.getInstance();
                            return [4, wrapper.p2pTransferToConf(createConfInfo, callID)];
                        case 5:
                            result = _a.sent();
                            callback(result);
                            return [2];
                    }
                });
            });
        };
        ConfManager.prototype.uninit = function () {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            wrapper = tupConfctrlWrapper_1.default.getInstance();
                            return [4, wrapper.uninit()];
                        case 1:
                            _a.sent();
                            return [2];
                    }
                });
            });
        };
        ConfManager.registerConfEvent = function () {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper, dataWrapper;
                return __generator(this, function (_a) {
                    wrapper = tupConfctrlWrapper_1.default.getInstance();
                    dataWrapper = tupDataConfWrapper_1.default.getInstance();
                    util_1.default.debug("confManager", "registerCallEvent");
                    wrapper.setServerIndEvent({
                        onAttendeeListUpdate: ConfManager.onAttendeeListUpdate,
                        onFloorAttendeeInd: ConfManager.onFloorAttendeeInd
                    });
                    wrapper.setBasicConfCallEvent({
                        onConfIncomingInd: ConfManager.onConfIncomingInd,
                        onConfConnectedInd: ConfManager.onConfConnectedInd,
                        onConfInfoInd: ConfManager.onConfInfoInd,
                        onEndConfInd: ConfManager.onEndConfInd,
                        onBeTransToConfInd: ConfManager.onBeTransToConfInd,
                    });
                    dataWrapper.setBasicMeetingEvent({
                        onConfTerminate: ConfManager.onConfTerminate,
                        onUserEnterInd: ConfManager.onUserEnterInd,
                        onPresenterChangeInd: ConfManager.onPresenterChangeInd,
                        onAsOnSharingSession: ConfManager.onAsOnSharingSession,
                        onAsOnSharingState: ConfManager.onAsOnSharingState,
                        onAsOnScreenData: ConfManager.onAsOnScreenData,
                        onWbdrawDataNotify: ConfManager.onWbdrawDataNotify,
                        onChatRecvMsg: ConfManager.onChatRecvMsg,
                        onuserLeaveKickout: ConfManager.onuserLeaveKickout,
                        onConfLeave: ConfManager.onConfLeave,
                        onWbDocNew: ConfManager.onWbDocNew,
                        onWbDocDel: ConfManager.onWbDocDel,
                        onWbPageNew: ConfManager.onWbPageNew,
                        onWbPageDel: ConfManager.onWbPageDel,
                        onWbCurrentPageInd: ConfManager.onWbCurrentPageInd,
                        onWBCurrentPage: ConfManager.onWBCurrentPage,
                        onAnnoHittest: ConfManager.onAnnoHittest,
                        onAnnoTextGetInfo: ConfManager.onAnnoTextGetInfo,
                        onAsOnPrivilege: ConfManager.onAsOnPrivilege,
                    });
                    return [2];
                });
            });
        };
        ConfManager._instance = new ConfManager();
        ConfManager.isFirstUpdateAttendees = true;
        ConfManager.onAttendeeListUpdate = function (data) {
            observer_1.default.publish('AttendeeListUpdate', data.param);
            observer_1.default.publish("UpdateConfinfo", confInfo);
        };
        ConfManager.onFloorAttendeeInd = function (data) {
            observer_1.default.publish("FloorAttendeeInd", data.param.floor_attendee_info);
        };
        ConfManager.onConfIncomingInd = function (data) {
            observer_1.default.publish('ConfIncoming', data.param);
        };
        ConfManager.onConfConnectedInd = function (data) {
            observer_1.default.publish('ConfConnected', data.param);
            sessionStorage.confHandle = data.param.handle;
        };
        ConfManager.onConfInfoInd = function (confinfodata) {
            var confCtrlWrap = tupConfctrlWrapper_1.default.getInstance();
            var dataConfWrap = tupDataConfWrapper_1.default.getInstance();
            var confManager = ConfManager.getInstance();
            var cloudEC_loginInfo = sessionStorage.cloudEC_loginInfo;
            var loginInfo = JSON.parse(cloudEC_loginInfo);
            var deployMode = loginInfo.deployMode;
            var fireWallMode = loginInfo.fireWallMode;
            var dataUrl = loginInfo.dataUrl;
            var userAccount = loginInfo.userAccount, sipImpi = loginInfo.sipImpi;
            var phoneNumber = sipImpi.split("@")[0];
            var _a = confinfodata.param.conf_info, conf_id = _a.conf_id, conf_uri = _a.conf_uri, data_random = _a.data_random, password = _a.password, media_type = _a.media_type;
            var handle = confinfodata.param.handle;
            confInfo.confId = conf_id;
            confInfo.confHandle = handle;
            confInfo.callid = confinfodata.param.call_id;
            confInfo.mediaType = confinfodata.param.conf_info.media_type;
            if ((media_type - 16) < 0) {
                var evt = { result: true, info: confInfo };
                observer_1.default.publish('ConfInfoInd', evt);
                return;
            }
            var confParams;
            if (deployMode == enum_1.CLOUDEC_LOGIN_E_DEPLOY_MODE.LOGIN_E_DEPLOY_SPHOSTED_CC) {
                confParams = {
                    conf_url: conf_uri,
                    mcu_addr: { server_addr: "", server_port: 0 },
                    random: data_random,
                    passcode: password,
                    sip_num: sipImpi,
                    conf_id: conf_id,
                    password: password,
                    type: 3
                };
                confManager.getDataconfParamsForConfInfoInd(confParams, userAccount);
            }
            else if (deployMode == enum_1.CLOUDEC_LOGIN_E_DEPLOY_MODE.LOGIN_E_DEPLOY_ENTERPRISE_CC) {
                confCtrlWrap.getConfInfo(conf_id)
                    .then(function (data) {
                    if (data.result) {
                        var smcPasswd = data.info.param.get_conf_info_result.conf_list_info.general_pwd;
                        confParams = {
                            conf_url: dataUrl,
                            mcu_addr: { server_addr: "", server_port: 0 },
                            random: "",
                            passcode: smcPasswd,
                            sip_num: sipImpi,
                            conf_id: "",
                            password: "",
                            type: 1
                        };
                        confManager.getDataconfParamsForConfInfoInd(confParams, userAccount);
                        smcPasswd = "";
                    }
                }).catch(function (data) {
                    util_1.default.error("confManager", "get conf password failed.");
                    var evt = { result: false, info: confInfo };
                    observer_1.default.publish('ConfInfoInd', evt);
                    return;
                });
            }
            password = "";
            confParams = "";
            confinfodata.param.conf_info = "";
        };
        ConfManager.onuserLeaveKickout = function (data) {
            ConfManager.isFirstUpdateAttendees = true;
            util_1.default.info("confManager", "You were kicked out of the data conference");
            var wrapper = tupDataConfWrapper_1.default.getInstance();
            wrapper.release(data.param.confHandle);
        };
        ConfManager.onConfLeave = function (data) {
            ConfManager.isFirstUpdateAttendees = true;
            util_1.default.info("confManager", "Leave the data meeting");
            observer_1.default.publish('dataUserleave', { result: true, info: data.param });
        };
        ConfManager.onEndConfInd = function (data) {
            ConfManager.isFirstUpdateAttendees = true;
            observer_1.default.publish('ConfEnd', { result: true, info: data });
            util_1.default.debug("confManager", 'ConfEnd');
        };
        ConfManager.onBeTransToConfInd = function (data) {
            observer_1.default.publish('BeTransToConfInd', { result: true, info: data.param });
        };
        ConfManager.onConfTerminate = function (data) {
            ConfManager.isFirstUpdateAttendees = true;
            var dataConfWrapper = tupDataConfWrapper_1.default.getInstance();
            dataConfWrapper.release(data.param.confHandle)
                .then(function () { observer_1.default.publish('ConfTerminal', { result: true, info: "" }); })
                .catch(function () { observer_1.default.publish('ConfTerminal', { result: true, info: "" }); });
        };
        ConfManager.onUserEnterInd = function (data) {
            observer_1.default.publish('UserEnterInd', data.param);
        };
        ConfManager.onPresenterChangeInd = function (data) {
            observer_1.default.publish('PresenterChangeInd', data.param);
        };
        ConfManager.onAsOnSharingSession = function (data) {
            observer_1.default.publish('AsOnSharingSession', data.param);
        };
        ConfManager.onAsOnSharingState = function (data) {
            observer_1.default.publish('AsOnSharingState', data.param);
        };
        ConfManager.onAsOnScreenData = function (data) {
            observer_1.default.publish('AsOnScreenData', data.param);
        };
        ConfManager.onWbdrawDataNotify = function (data) {
            observer_1.default.publish('WbdrawDataNotify', data.param);
        };
        ConfManager.onChatRecvMsg = function (data) {
            observer_1.default.publish('ChatRecvMsg', data.param);
        };
        ConfManager.onWbDocNew = function (data) {
            observer_1.default.publish('WbDocNew', data.param);
        };
        ConfManager.onWbDocDel = function (data) {
            observer_1.default.publish('WbDocDel', data.param);
        };
        ConfManager.onWbPageNew = function (data) {
            observer_1.default.publish('WbPageNew', data.param);
        };
        ConfManager.onWbPageDel = function (data) {
            observer_1.default.publish('WbPageDel', data.param);
        };
        ConfManager.onWbCurrentPageInd = function (data) {
            observer_1.default.publish('WbCurrentPageInd', data.param);
        };
        ConfManager.onWBCurrentPage = function (data) {
            observer_1.default.publish('WBCurrentPage', data.param);
        };
        ConfManager.onAnnoHittest = function (data) {
            observer_1.default.publish('AnnoHittest', data.param);
        };
        ConfManager.onAnnoTextGetInfo = function (data) {
            observer_1.default.publish('AnnoTextGetInfo', data.param);
        };
        ConfManager.onAsOnPrivilege = function (data) {
            observer_1.default.publish('AsOnPrivilege', data.param);
        };
        return ConfManager;
    }());
    exports.default = ConfManager;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(370), __webpack_require__(14), __webpack_require__(39), __webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, tupEaddr_1, serverConfig_1, tupLoginWrapper_1, util_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tupEaddrWrapper = (function () {
        function tupEaddrWrapper() {
            if (tupEaddrWrapper._instance) {
                throw new Error("Error: Instantiation failed: Use tupEaddrWrapper.getInstance() instead of new.");
            }
            tupEaddrWrapper._instance = this;
        }
        tupEaddrWrapper.getInstance = function () {
            return tupEaddrWrapper._instance;
        };
        tupEaddrWrapper.prototype.build = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    util_1.default.info("tupEaddrWrapper", "step in tupEaddrWrapper to build");
                    if (!tupEaddrWrapper.tupEaddr) {
                        tupEaddrWrapper.tupEaddr = new tupEaddr_1.default({
                            socket: tupLoginWrapper_1.default.tupUniSock
                        });
                        tupEaddrWrapper.tupEaddr.eaddrInit();
                        setTimeout(function () { tupEaddrWrapper._instance.eaddrInit(); }, 2000);
                    }
                    else {
                        this.eaddrInit();
                    }
                    return [2];
                });
            });
        };
        tupEaddrWrapper.prototype.eaddrInit = function () {
            tupEaddrWrapper.tupEaddr.eaddrInit();
            var param2 = {
                "LogLevel": serverConfig_1.CloudEC_SERVERCONFIG.LOG_IM_LEVEL,
                "LogFileSize": serverConfig_1.CloudEC_SERVERCONFIG.LOG_FILE_SIZE,
                "LogPath": serverConfig_1.CloudEC_SERVERCONFIG.LOG_PATH,
                "LogFileCount": serverConfig_1.CloudEC_SERVERCONFIG.LOG_FILE_COUNT
            };
            tupEaddrWrapper.tupEaddr.eaddrSetLogPara(param2);
            this.eaddrConfig();
        };
        tupEaddrWrapper.prototype.eaddrConfig = function () {
            var authorize_result = sessionStorage.cloudEC_loginInfo;
            authorize_result = JSON.parse(authorize_result);
            var proxy_result = sessionStorage.cloudEC_proxy;
            if (proxy_result != undefined) {
                proxy_result = JSON.parse(proxy_result);
            }
            else {
                proxy_result = { proxyAddress: "", proxyPort: 0, proxyAccount: "", proxyPassword: "" };
            }
            var param = {
                "ServerType": 3,
                "HttpServerAddr": 'https://' + authorize_result.authServerUri + ':' + authorize_result.authServerPort + '/services',
                "AvatarServerAddr": 'https://' + authorize_result.authServerUri + ':' + authorize_result.authServerPort + '/headportrait',
                "PageCount": 20,
                "UserName": authorize_result.sipImpi,
                "Token": authorize_result.authToken,
                "AvatarFilePath": "C://",
                "HttpsVerifyMode": 0,
                "CertFilePath": "C://",
                "DeptFilePath": "C://",
                "RCSType": 1,
                "HttpTimeOut": 10,
                "ProxyIpAddr": proxy_result.proxyAddress,
                "ProxyPort": proxy_result.proxyPort,
                "ProxyAuthUserName": proxy_result.proxyAccount,
                "ProxyAuthPassword": proxy_result.proxyPassword
            };
            tupEaddrWrapper.tupEaddr.eaddrConfig(param);
            proxy_result.proxyPassword = "";
            authorize_result.authToken = "";
        };
        tupEaddrWrapper.prototype.getPromise = function () {
            var p = {};
            p.promise = new Promise(function (resolve, reject) {
                p.resolve = resolve;
                p.reject = reject;
            });
            return p;
        };
        tupEaddrWrapper.prototype.searchUserInfo = function (seqNo, queryParam) {
            return __awaiter(this, void 0, void 0, function () {
                var searchUsePromise, callbacks, param;
                return __generator(this, function (_a) {
                    searchUsePromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result != 0) {
                                searchUsePromise.reject(data);
                            }
                        },
                        onSearchContactResult: function (data) {
                            searchUsePromise.resolve(data);
                        }
                    };
                    param = {
                        SeqNo: seqNo,
                        ServerType: 3,
                        condition: queryParam.condition,
                        PageIndex: queryParam.pageIndex,
                        SearchType: queryParam.searchType,
                        Dept: ""
                    };
                    tupEaddrWrapper.tupEaddr.eaddrSearchInfo(param, callbacks);
                    return [2, searchUsePromise.promise];
                });
            });
        };
        tupEaddrWrapper.prototype.searchDeptInfo = function (seqNo, deptId) {
            return __awaiter(this, void 0, void 0, function () {
                var searchDeptPromise, callbacks, param;
                return __generator(this, function (_a) {
                    searchDeptPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result != 0) {
                                searchDeptPromise.reject(data);
                            }
                        },
                        onSearchDeptResult: function (data) {
                            if (data.param.result != 0) {
                                searchDeptPromise.reject(data);
                            }
                            else {
                                searchDeptPromise.resolve(data);
                            }
                        }
                    };
                    param = {
                        SeqNo: seqNo,
                        DepId: deptId
                    };
                    tupEaddrWrapper.tupEaddr.eaddrSearchDept(param, callbacks);
                    return [2, searchDeptPromise.promise];
                });
            });
        };
        tupEaddrWrapper._instance = new tupEaddrWrapper();
        return tupEaddrWrapper;
    }());
    exports.default = tupEaddrWrapper;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CloudEC_TABLEINFOCONFIG = {
        DBNAME: 'publicDB',
        TABLENAME: 'attendeeList',
        CONLUMNNAME: ['participantId', 'isDeaf', 'isMute', 'isSelf', 'name', 'number', 'raiseHandState', 'role', 'state', 'isDataconfMember', 'dataconfMemberType', 'dataconfUserId', 'sharingSession'],
        KEYPATH: { keyPath: 'participantId' }
    };
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(140), __webpack_require__(12), __webpack_require__(13), __webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, tupEaddrWrapper_1, dispatcher_1, eventInfo_1, util) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var EaddrManager = (function () {
        function EaddrManager() {
            if (EaddrManager._instance) {
                throw new Error("Error: Instantiation failed: Use EaddrManager.getInstance() instead of new.");
            }
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_EADDR_REFRESH_TOKEN, this.refreshToken, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_EADDR_SEARCH_USER, this.searchUserInfo, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_EADDR_SEARCH_DEPT, this.searchDeptInfo, this);
            EaddrManager._instance = this;
            this.queryContactInfoSeq = 1;
            this.queryDeptInfoSeq = 1;
        }
        EaddrManager.getInstance = function () {
            return EaddrManager._instance;
        };
        EaddrManager.prototype.do_action = function () {
            return __awaiter(this, void 0, void 0, function () {
                var eaddrWrapper;
                return __generator(this, function (_a) {
                    eaddrWrapper = tupEaddrWrapper_1.default.getInstance();
                    eaddrWrapper.build();
                    return [2, { result: true }];
                });
            });
        };
        EaddrManager.prototype.searchUserInfo = function (event, queryParam, callbacks) {
            return __awaiter(this, void 0, void 0, function () {
                var eaddrWrapper, seqNo;
                return __generator(this, function (_a) {
                    eaddrWrapper = tupEaddrWrapper_1.default.getInstance();
                    seqNo = this.queryContactInfoSeq++;
                    eaddrWrapper.searchUserInfo(seqNo, queryParam)
                        .then(function (data) {
                        if (data.param.result == 0) {
                            callbacks({ result: true, info: data });
                        }
                        else {
                            callbacks({ result: false, info: data });
                        }
                    }).catch(function (data) {
                        if (data.description == "tup_eaddr_search_info") {
                            callbacks({ result: false, info: util.getErrCode(data.rsp, data.result) });
                        }
                        else {
                            callbacks({ result: false, info: util.getErrCode(data.notify, data.param.result) });
                        }
                    });
                    return [2];
                });
            });
        };
        EaddrManager.prototype.searchDeptInfo = function (event, deptId, callbacks) {
            return __awaiter(this, void 0, void 0, function () {
                var eaddrWrapper, seqNo;
                return __generator(this, function (_a) {
                    eaddrWrapper = tupEaddrWrapper_1.default.getInstance();
                    seqNo = this.queryDeptInfoSeq++;
                    eaddrWrapper.searchDeptInfo(seqNo, deptId)
                        .then(function (data) {
                        callbacks({ result: true, info: data });
                    }).catch(function (data) {
                        if (data.description == "tup_eaddr_search_dept") {
                            callbacks({ result: false, info: util.getErrCode(data.rsp, data.result) });
                        }
                        else {
                            callbacks({ result: false, info: util.getErrCode(data.notify, data.param.result) });
                        }
                    });
                    return [2];
                });
            });
        };
        EaddrManager.prototype.refreshToken = function (event) {
            return __awaiter(this, void 0, void 0, function () {
                var eaddrWrapper;
                return __generator(this, function (_a) {
                    eaddrWrapper = tupEaddrWrapper_1.default.getInstance();
                    eaddrWrapper.eaddrConfig();
                    return [2];
                });
            });
        };
        EaddrManager._instance = new EaddrManager();
        return EaddrManager;
    }());
    exports.default = EaddrManager;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(373), __webpack_require__(28), __webpack_require__(12), __webpack_require__(13), __webpack_require__(1), __webpack_require__(1), __webpack_require__(23)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, tupImWrapper_1, observer_1, dispatcher_1, eventInfo_1, util, util_1, client_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ImManager = (function () {
        function ImManager() {
            if (ImManager._instance) {
                throw new Error("Error: Instantiation failed: Use ImManager.getInstance() instead of new.");
            }
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_IM_LOGOUT, this.logout, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_IM_GET_USER_INFO, this.getUserInfo, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_IM_SET_USER_INFO, this.setUserInfo, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_IM_GET_CONTACT_LIST, this.getContactList, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_IM_ADD_CONTACT_GROUP, this.addContactGroup, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_IM_MOD_CONTACT_GROUP, this.modContactGroup, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_IM_DEL_CONTACT_GROUP, this.delContactGroup, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_IM_UPDATE_GROUP_LIST_ORDER, this.updateGroupListOrder, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_IM_MOVE_CONTACT, this.moveContact, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_IM_ADD_CONTACT, this.addContact, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_IM_MOD_CONTACT, this.modContact, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_IM_DEL_CONTACT, this.delContact, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_IM_ADD_FRIEND, this.addFriend, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_IM_ADD_FIXED_GROUP, this.addFixedGroup, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_IM_ADD_DISCUSSION_GROUP, this.addDiscussionGroup, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_IM_MOD_FIXED_GROUP, this.modFixedGroup, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_IM_MOD_DISCUSSION_GROUP, this.modDiscussionGroup, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_IM_DEL_FIXED_GROUP, this.delFixedGroup, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_IM_DEL_DISCUSSION_GROUP, this.delDiscussionGroup, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_IM_SEARCH_GROUP, this.searchGroup, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_IM_GET_GROUP_DETAIL, this.getGroupDetail, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_IM_ADD_FIXED_GROUP_MEMBER, this.addFixedGroupMember, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_IM_ADD_DISCUSSION_GROUP_MEMBER, this.addDiscussionGroupMember, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_IM_JOIN_FIXED_GROUP, this.joinFixedGroup, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_IM_DEL_FIXED_GROUP_MEMBER, this.delFixedGroupMember, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_IM_DEL_DISCUSSION_GROUP_MEMBER, this.delDiscussionGroupMember, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_IM_LEAVE_FIXED_GROUP, this.leaveFixedGroup, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_IM_LEAVE_DISCUSSION_GROUP, this.leaveDiscussionGroup, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_IM_CONFIRM_FIXED_GROUP_APPLY, this.confirmFixedGroupApply, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_IM_CONFIRM_FIXED_GROUP_INVITE, this.confirmFixedGroupInvite, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_IM_GET_GROUP_MEMBERS, this.getGroupMembers, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_IM_TRANSFER_GROUP, this.transferGroup, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_IM_SET_GROUP_MSG_PROMPT_POLICY, this.setGroupMsgPromptPolicy, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_IM_SET_DISGROUP_POLICY, this.setDisgroupPolicy, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_IM_PUBLISH_STATUS, this.publishStatus, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_IM_DETECT_USER_STATUS, this.detectUserStatus, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_IM_SEND_MESSAGE, this.sendIMMessage, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_IM_NOTIFY_INPUTTING, this.notifyImInputting, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_IM_WITH_DRAW_MESSAGE, this.withDrawMessage, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_IM_SET_READ_MESSAGE, this.setReadMessage, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_IM_GET_RECENT_CONVERSATION, this.getRecentConversation, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_IM_DEL_RECENT_CONVERSATION, this.delRecentConversation, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_IM_DEL_MESSAGE, this.deleteMessage, this);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_IM_QUERY_HISTORY_MESSAGE, this.queryHistoryMessage, this);
        }
        ImManager.getInstance = function () {
            return ImManager._instance;
        };
        ImManager.prototype.do_action = function () {
            return __awaiter(this, void 0, void 0, function () {
                var cloudEC_loginInfo, loginInfo, serverAddr, imLogindData, IMResultInfo, buildret, result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            cloudEC_loginInfo = sessionStorage.cloudEC_loginInfo;
                            loginInfo = JSON.parse(cloudEC_loginInfo);
                            serverAddr = loginInfo.eServerAddress;
                            imLogindData = {
                                isEserverLoginSuccess: this.IMloginFlag
                            };
                            if (!serverAddr) return [3, 4];
                            this.tupImWrapper = tupImWrapper_1.default.getInstance();
                            return [4, this.tupImWrapper.build()];
                        case 1:
                            buildret = _a.sent();
                            return [4, this.tupImWrapper.init()];
                        case 2:
                            _a.sent();
                            return [4, this.tupImWrapper.login()];
                        case 3:
                            result = _a.sent();
                            if (buildret) {
                                ImManager.registerImEvent();
                            }
                            if (result.result) {
                                this.IMloginFlag = true;
                                imLogindData.isEserverLoginSuccess = true;
                            }
                            else {
                                this.IMloginFlag = false;
                                imLogindData.isEserverLoginSuccess = false;
                                result.result = true;
                            }
                            IMResultInfo = result;
                            return [3, 5];
                        case 4:
                            util_1.default.error("imManager", "IM login has been skipped");
                            this.IMloginFlag = false;
                            imLogindData.isEserverLoginSuccess = false;
                            IMResultInfo = {
                                result: true,
                                info: "IM login has been skipped"
                            };
                            _a.label = 5;
                        case 5:
                            this.updateLoginInfo(imLogindData);
                            return [2, IMResultInfo];
                    }
                });
            });
        };
        ImManager.prototype.updateLoginInfo = function (data) {
            var loginInfo = JSON.parse(sessionStorage.cloudEC_loginInfo);
            Object.assign(loginInfo, data);
            var cloudEC_loginInfo = JSON.stringify(loginInfo);
            sessionStorage.cloudEC_loginInfo = cloudEC_loginInfo;
        };
        ImManager.prototype.logout = function () {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this.IMloginFlag) return [3, 2];
                            return [4, this.tupImWrapper.logout()];
                        case 1:
                            data = _a.sent();
                            _a.label = 2;
                        case 2: return [2];
                    }
                });
            });
        };
        ImManager.prototype.uninit = function () {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.tupImWrapper.uninit()];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ImManager.prototype.getUserInfo = function (eventType, account, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.tupImWrapper.getUserInfo(account, callback).then(function (successCallback) {
                                callback(successCallback);
                            }, function (failureCallback) {
                                client_1.default.notifyErr(util.getErrResult(failureCallback.rsp, 90000002, "operation failed"));
                            })];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ImManager.prototype.setUserInfo = function (eventType, userInfo, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.tupImWrapper.setUserInfo(userInfo, callback).then(function (successCallback) {
                                callback(successCallback);
                            }, function (failureCallback) {
                                client_1.default.notifyErr(util.getErrResult(failureCallback.rsp, 90000002, "operation failed"));
                            })];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ImManager.prototype.getContactList = function (eventType, isSyncAll, timestamp, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.tupImWrapper.getContactList(isSyncAll, timestamp, callback).then(function (successCallback) {
                                callback(successCallback);
                            }, function (failureCallback) {
                                client_1.default.notifyErr(util.getErrResult(failureCallback.rsp, 90000002, "operation failed"));
                            })];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ImManager.prototype.addContactGroup = function (eventType, index, groupName, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.tupImWrapper.addContactGroup(index, groupName, callback).then(function (successCallback) {
                                callback(successCallback);
                            }, function (failureCallback) {
                                client_1.default.notifyErr(util.getErrResult(failureCallback.rsp, 90000002, "operation failed"));
                            })];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ImManager.prototype.modContactGroup = function (eventType, groupID, index, groupName, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.tupImWrapper.modContactGroup(groupID, index, groupName, callback).then(function (successCallback) {
                                callback(successCallback);
                            }, function (failureCallback) {
                                client_1.default.notifyErr(util.getErrResult(failureCallback.rsp, 90000002, "operation failed"));
                            })];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ImManager.prototype.delContactGroup = function (eventType, groupID, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.tupImWrapper.delContactGroup(groupID, callback).then(function (successCallback) {
                                callback(successCallback);
                            }, function (failureCallback) {
                                client_1.default.notifyErr(util.getErrResult(failureCallback.rsp, 90000002, "operation failed"));
                            })];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ImManager.prototype.updateGroupListOrder = function (eventType, groupIDs, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.tupImWrapper.updateGroupListOrder(groupIDs, callback).then(function (successCallback) {
                                callback(successCallback);
                            }, function (failureCallback) {
                                client_1.default.notifyErr(util.getErrResult(failureCallback.rsp, 90000002, "operation failed"));
                            })];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ImManager.prototype.moveContact = function (eventType, contactID, oldGroupID, newGroupID, type, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.tupImWrapper.moveContact(contactID, oldGroupID, newGroupID, type, callback).then(function (successCallback) {
                                callback(successCallback);
                            }, function (failureCallback) {
                                client_1.default.notifyErr(util.getErrResult(failureCallback.rsp, 90000002, "operation failed"));
                            })];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ImManager.prototype.addContact = function (eventType, contact, groupID, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.tupImWrapper.addContact(contact, groupID, callback).then(function (successCallback) {
                                callback(successCallback);
                            }, function (failureCallback) {
                                client_1.default.notifyErr(util.getErrResult(failureCallback.rsp, 90000002, "operation failed"));
                            })];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ImManager.prototype.modContact = function (eventType, contact, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.tupImWrapper.modContact(contact, callback).then(function (successCallback) {
                                callback(successCallback);
                            }, function (failureCallback) {
                                client_1.default.notifyErr(util.getErrResult(failureCallback.rsp, 90000002, "operation failed"));
                            })];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ImManager.prototype.delContact = function (eventType, contactID, groupID, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.tupImWrapper.delContact(contactID, groupID, callback).then(function (successCallback) {
                                callback(successCallback);
                            }, function (failureCallback) {
                                client_1.default.notifyErr(util.getErrResult(failureCallback.rsp, 90000002, "operation failed"));
                            })];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ImManager.prototype.addFriend = function (eventType, account, groupID, displayName, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.tupImWrapper.addFriend(account, groupID, displayName, callback).then(function (successCallback) {
                                callback(successCallback);
                            }, function (failureCallback) {
                                client_1.default.notifyErr(util.getErrResult(failureCallback.rsp, 90000002, "operation failed"));
                            })];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ImManager.prototype.addFixedGroup = function (eventType, groupInfo, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.tupImWrapper.addFixedGroup(groupInfo, callback).then(function (successCallback) {
                                callback(successCallback);
                            }, function (failureCallback) {
                                client_1.default.notifyErr(util.getErrResult(failureCallback.rsp, 90000002, "operation failed"));
                            })];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ImManager.prototype.addDiscussionGroup = function (eventType, groupInfo, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.tupImWrapper.addDiscussionGroup(groupInfo, callback).then(function (successCallback) {
                                callback(successCallback);
                            }, function (failureCallback) {
                                client_1.default.notifyErr(util.getErrResult(failureCallback.rsp, 90000002, "operation failed"));
                            })];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ImManager.prototype.modFixedGroup = function (eventType, groupInfo, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.tupImWrapper.modFixedGroup(groupInfo, callback).then(function (successCallback) {
                                callback(successCallback);
                            }, function (failureCallback) {
                                client_1.default.notifyErr(util.getErrResult(failureCallback.rsp, 90000002, "operation failed"));
                            })];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ImManager.prototype.modDiscussionGroup = function (eventType, groupInfo, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.tupImWrapper.modDiscussionGroup(groupInfo, callback).then(function (successCallback) {
                                callback(successCallback);
                            }, function (failureCallback) {
                                client_1.default.notifyErr(util.getErrResult(failureCallback.rsp, 90000002, "operation failed"));
                            })];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ImManager.prototype.delFixedGroup = function (eventType, groupId, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.tupImWrapper.delFixedGroup(groupId, callback).then(function (successCallback) {
                                callback(successCallback);
                            }, function (failureCallback) {
                                client_1.default.notifyErr(util.getErrResult(failureCallback.rsp, 90000002, "operation failed"));
                            })];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ImManager.prototype.delDiscussionGroup = function (eventType, groupId, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.tupImWrapper.delDiscussionGroup(groupId, callback).then(function (successCallback) {
                                callback(successCallback);
                            }, function (failureCallback) {
                                client_1.default.notifyErr(util.getErrResult(failureCallback.rsp, 90000002, "operation failed"));
                            })];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ImManager.prototype.searchGroup = function (eventType, searchGroupParam, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.tupImWrapper.searchGroup(searchGroupParam, callback).then(function (successCallback) {
                                callback(successCallback);
                            }, function (failureCallback) {
                                client_1.default.notifyErr(util.getErrResult(failureCallback.rsp, 90000002, "operation failed"));
                            })];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ImManager.prototype.getGroupDetail = function (eventType, groupId, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.tupImWrapper.getGroupDetail(groupId, callback).then(function (successCallback) {
                                callback(successCallback);
                            }, function (failureCallback) {
                                client_1.default.notifyErr(util.getErrResult(failureCallback.rsp, 90000002, "operation failed"));
                            })];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ImManager.prototype.addFixedGroupMember = function (eventType, groupId, account, groupName, displayName, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.tupImWrapper.addFixedGroupMember(groupId, account, groupName, displayName, callback).then(function (successCallback) {
                                callback(successCallback);
                            }, function (failureCallback) {
                                client_1.default.notifyErr(util.getErrResult(failureCallback.rsp, 90000002, "operation failed"));
                            })];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ImManager.prototype.joinFixedGroup = function (eventType, groupId, groupName, displayName, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.tupImWrapper.joinFixedGroup(groupId, groupName, displayName, callback).then(function (successCallback) {
                                callback(successCallback);
                            }, function (failureCallback) {
                                client_1.default.notifyErr(util.getErrResult(failureCallback.rsp, 90000002, "operation failed"));
                            })];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ImManager.prototype.addDiscussionGroupMember = function (eventType, groupId, account, groupName, displayName, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.tupImWrapper.addDiscussionGroupMember(groupId, account, groupName, displayName, callback).then(function (successCallback) {
                                callback(successCallback);
                            }, function (failureCallback) {
                                client_1.default.notifyErr(util.getErrResult(failureCallback.rsp, 90000002, "operation failed"));
                            })];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ImManager.prototype.delFixedGroupMember = function (eventType, groupId, account, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.tupImWrapper.delFixedGroupMember(groupId, account, callback).then(function (successCallback) {
                                callback(successCallback);
                            }, function (failureCallback) {
                                client_1.default.notifyErr(util.getErrResult(failureCallback.rsp, 90000002, "operation failed"));
                            })];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ImManager.prototype.leaveFixedGroup = function (eventType, groupId, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.tupImWrapper.leaveFixedGroup(groupId, callback).then(function (successCallback) {
                                callback(successCallback);
                            }, function (failureCallback) {
                                client_1.default.notifyErr(util.getErrResult(failureCallback.rsp, 90000002, "operation failed"));
                            })];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ImManager.prototype.delDiscussionGroupMember = function (eventType, groupId, account, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.tupImWrapper.delDiscussionGroupMember(groupId, account, callback).then(function (successCallback) {
                                callback(successCallback);
                            }, function (failureCallback) {
                                client_1.default.notifyErr(util.getErrResult(failureCallback.rsp, 90000002, "operation failed"));
                            })];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ImManager.prototype.leaveDiscussionGroup = function (eventType, groupId, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.tupImWrapper.leaveDiscussionGroup(groupId, callback).then(function (successCallback) {
                                callback(successCallback);
                            }, function (failureCallback) {
                                client_1.default.notifyErr(util.getErrResult(failureCallback.rsp, 90000002, "operation failed"));
                            })];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ImManager.prototype.confirmFixedGroupInvite = function (eventType, approvalGroupParam, groupName, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.tupImWrapper.confirmFixedGroupInvite(approvalGroupParam, groupName, callback).then(function (successCallback) {
                                callback(successCallback);
                            }, function (failureCallback) {
                                client_1.default.notifyErr(util.getErrResult(failureCallback.rsp, 90000002, "operation failed"));
                            })];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ImManager.prototype.confirmFixedGroupApply = function (eventType, approvalGroupParam, groupName, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.tupImWrapper.confirmFixedGroupApply(approvalGroupParam, groupName, callback).then(function (successCallback) {
                                callback(successCallback);
                            }, function (failureCallback) {
                                client_1.default.notifyErr(util.getErrResult(failureCallback.rsp, 90000002, "operation failed"));
                            })];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ImManager.prototype.getGroupMembers = function (eventType, groupId, isSyncAll, timestamp, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.tupImWrapper.getGroupMembers(groupId, isSyncAll, timestamp, callback).then(function (successCallback) {
                                callback(successCallback);
                            }, function (failureCallback) {
                                client_1.default.notifyErr(util.getErrResult(failureCallback.rsp, 90000002, "operation failed"));
                            })];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ImManager.prototype.setGroupMsgPromptPolicy = function (eventType, groupId, msgpolicyType, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.tupImWrapper.setGroupMsgPromptPolicy(groupId, msgpolicyType, callback).then(function (successCallback) {
                                callback(successCallback);
                            }, function (failureCallback) {
                                client_1.default.notifyErr(util.getErrResult(failureCallback.rsp, 90000002, "operation failed"));
                            })];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ImManager.prototype.setDisgroupPolicy = function (eventType, groupId, opType, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.tupImWrapper.modifyGroupType(groupId, opType, callback).then(function (successCallback) {
                                callback(successCallback);
                            }, function (failureCallback) {
                                client_1.default.notifyErr(util.getErrResult(failureCallback.rsp, 90000002, "operation failed"));
                            })];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ImManager.prototype.transferGroup = function (eventType, groupId, account, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.tupImWrapper.transferGroup(groupId, account, callback).then(function (successCallback) {
                                callback(successCallback);
                            }, function (failureCallback) {
                                client_1.default.notifyErr(util.getErrResult(failureCallback.rsp, 90000002, "operation failed"));
                            })];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ImManager.prototype.publishStatus = function (eventType, status, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.tupImWrapper.publishStatus(status, callback).then(function (successCallback) {
                                callback(successCallback);
                            }, function (failureCallback) {
                                client_1.default.notifyErr(util.getErrResult(failureCallback.rsp, 90000002, "operation failed"));
                            })];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ImManager.prototype.detectUserStatus = function (eventType, accountList, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.tupImWrapper.detectUserStatus(accountList, callback).then(function (successCallback) {
                                callback(successCallback);
                            }, function (failureCallback) {
                                client_1.default.notifyErr(util.getErrResult(failureCallback.rsp, 90000002, "operation failed"));
                            })];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ImManager.prototype.sendIMMessage = function (eventType, messageSendParam, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.tupImWrapper.sendIMMessage(messageSendParam, callback).then(function (successCallback) {
                                callback(successCallback);
                            }, function (failureCallback) {
                                client_1.default.notifyErr(util.getErrResult(failureCallback.rsp, 90000002, "operation failed"));
                            })];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ImManager.prototype.notifyImInputting = function (eventType, account, type) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.tupImWrapper.notifyImInputting(account, type).then(function (successCallback) {
                            }, function (failureCallback) {
                                client_1.default.notifyErr(util.getErrResult(failureCallback.rsp, 90000002, "operation failed"));
                            })];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ImManager.prototype.withDrawMessage = function (eventType, messageWithDrawParam, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.tupImWrapper.withDrawMessage(messageWithDrawParam, callback).then(function (successCallback) {
                                callback(successCallback);
                            }, function (failureCallback) {
                                client_1.default.notifyErr(util.getErrResult(failureCallback.rsp, 90000002, "operation failed"));
                            })];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ImManager.prototype.setReadMessage = function (eventType, messageReadList, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.tupImWrapper.setReadMessage(messageReadList, callback).then(function (successCallback) {
                                callback(successCallback);
                            }, function (failureCallback) {
                                client_1.default.notifyErr(util.getErrResult(failureCallback.rsp, 90000002, "operation failed"));
                            })];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ImManager.prototype.getRecentConversation = function (eventType, timestamp, count, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.tupImWrapper.getRecentConversation(timestamp, count, callback).then(function (successCallback) {
                                callback(successCallback);
                            }, function (failureCallback) {
                                client_1.default.notifyErr(util.getErrResult(failureCallback.rsp, 90000002, "operation failed"));
                            })];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ImManager.prototype.delRecentConversation = function (eventType, isDelAll, conversationId, type, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.tupImWrapper.delRecentConversation(isDelAll, conversationId, type, callback).then(function (successCallback) {
                                callback(successCallback);
                            }, function (failureCallback) {
                                client_1.default.notifyErr(util.getErrResult(failureCallback.rsp, 90000002, "operation failed"));
                            })];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ImManager.prototype.deleteMessage = function (eventType, deleteMessageParam, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.tupImWrapper.deleteMessage(deleteMessageParam, callback).then(function (successCallback) {
                                callback(successCallback);
                            }, function (failureCallback) {
                                client_1.default.notifyErr(util.getErrResult(failureCallback.rsp, 90000002, "operation failed"));
                            })];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ImManager.prototype.queryHistoryMessage = function (eventType, queryHistoryMessageParam, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.tupImWrapper.queryHistoryMessage(queryHistoryMessageParam, callback).then(function (successCallback) {
                                callback(successCallback);
                            }, function (failureCallback) {
                                client_1.default.notifyErr(util.getErrResult(failureCallback.rsp, 90000002, "operation failed"));
                            })];
                        case 1:
                            data = _a.sent();
                            return [2];
                    }
                });
            });
        };
        ImManager.registerImEvent = function () {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper;
                return __generator(this, function (_a) {
                    wrapper = tupImWrapper_1.default.getInstance();
                    util_1.default.debug("IMManager", "registerImEvent");
                    wrapper.setBasicImEvent({
                        onAddFriend: ImManager.onAddFriend,
                        onUserStatusList: ImManager.onUserStatusList,
                        onSendImInput: ImManager.onSendImInput,
                        onCodeChat: ImManager.onCodeChat,
                        onMsgSendAck: ImManager.onMsgSendAck,
                        onChatList: ImManager.onChatList,
                        onUserInfoChange: ImManager.onUserInfoChange,
                        onUnDeliver: ImManager.onUnDeliver,
                        onWithdrawAck: ImManager.onWithdrawResult,
                        onWithdrawNotify: ImManager.onWithdrawNotify,
                        onSystemBulletin: ImManager.onSystemBulletin,
                    });
                    wrapper.setGroupImEvent({
                        onFixedGroupDismiss: ImManager.onFixedGroupDismiss,
                        onDiscussGroupDismiss: ImManager.onDiscussGroupDismiss,
                        onFixedGroupInfoChg: ImManager.onFixedGroupInfoChg,
                        onDiscussGroupInfoChange: ImManager.onDiscussGroupInfoChange,
                        onDiscussGroupOwnerChange: ImManager.onDiscussGroupOwnerChange,
                        onFixedGroupOwnerChange: ImManager.onFixedGroupOwnerChange,
                        onFixedGroupMemberAdd: ImManager.onGroupMemberAdd,
                        onDiscussGroupMemListAddMember: ImManager.onGroupMemberAdd,
                        onFixedGroupMemberDel: ImManager.onGroupMemberDel,
                        onDiscussGroupMemListDelMember: ImManager.onGroupMemberDel,
                        onFixedGroupWasAddedToGroup: ImManager.onWasAddToGroup,
                        onDiscussGroupWasAddToGroup: ImManager.onWasAddToGroup,
                        onReceiveInviteToFixedGroup: ImManager.onReceiveInviteToGroup,
                        onReceiveInviteJoinFixedGroup: ImManager.onReceiveInviteJoinGroup,
                        onFixedGroupOwnerInviteResult: ImManager.onGroupOwnerInviteResult,
                        onFixedGroupKickout: ImManager.onGroupKickout,
                        onFixedGroupLeaveResult: ImManager.onGroupLeaveResult,
                    });
                    return [2];
                });
            });
        };
        ImManager._instance = new ImManager();
        ImManager.onAddFriend = function (data) {
            observer_1.default.publish('AddFriend', { result: true, info: data.param });
        };
        ImManager.onUserStatusList = function (data) {
            observer_1.default.publish('UserStatusList', { result: true, info: data.param });
        };
        ImManager.onSendImInput = function (data) {
            observer_1.default.publish('SendImInput', { result: true, info: data.param });
        };
        ImManager.onCodeChat = function (data) {
            observer_1.default.publish('CodeChat', { result: true, info: data.param });
        };
        ImManager.onMsgSendAck = function (data) {
            observer_1.default.publish('MsgSendAck', { result: true, info: data.param });
        };
        ImManager.onUnDeliver = function (data) {
            observer_1.default.publish('UnDeliver', { result: true, info: data.param });
        };
        ImManager.onChatList = function (data) {
            observer_1.default.publish('ChatList', { result: true, info: data.param });
        };
        ImManager.onUserInfoChange = function (data) {
            observer_1.default.publish('UserInfoChange', { result: true, info: data.param });
        };
        ImManager.onFixedGroupDismiss = function (data) {
            observer_1.default.publish('GroupDismiss', { result: true, info: data.param });
        };
        ImManager.onDiscussGroupDismiss = function (data) {
            observer_1.default.publish('GroupDismiss', { result: true, info: data.param });
        };
        ImManager.onFixedGroupInfoChg = function (data) {
            observer_1.default.publish('GroupInfoChange', { result: true, info: data.param });
        };
        ImManager.onDiscussGroupInfoChange = function (data) {
            observer_1.default.publish('GroupInfoChange', { result: true, info: data.param });
        };
        ImManager.onDiscussGroupOwnerChange = function (data) {
            observer_1.default.publish('GroupOwnerChange', { result: true, info: data.param });
        };
        ImManager.onFixedGroupOwnerChange = function (data) {
            observer_1.default.publish('GroupOwnerChange', { result: true, info: data.param });
        };
        ImManager.onGroupMemberAdd = function (data) {
            observer_1.default.publish('GroupMemberAdd', { result: true, info: data.param });
        };
        ImManager.onGroupMemberDel = function (data) {
            observer_1.default.publish('GroupMemberDel', { result: true, info: data.param });
        };
        ImManager.onWasAddToGroup = function (data) {
            observer_1.default.publish('WasAddToGroup', { result: true, info: data.param });
        };
        ImManager.onReceiveInviteJoinGroup = function (data) {
            observer_1.default.publish('ReceiveInviteJoinGroup', { result: true, info: data.param });
        };
        ImManager.onReceiveInviteToGroup = function (data) {
            observer_1.default.publish('ReceiveInviteToGroup', { result: true, info: data.param });
        };
        ImManager.onGroupOwnerInviteResult = function (data) {
            observer_1.default.publish('GroupOwnerInviteResult', { result: true, info: data.param });
        };
        ImManager.onGroupKickout = function (data) {
            observer_1.default.publish('GroupKickout', { result: true, info: data.param });
        };
        ImManager.onGroupLeaveResult = function (data) {
            observer_1.default.publish('GroupLeaveResult', { result: true, info: data.param });
        };
        ImManager.onWithdrawResult = function (data) {
            observer_1.default.publish('WithdrawResult', { result: true, info: data.param });
        };
        ImManager.onWithdrawNotify = function (data) {
            observer_1.default.publish('WithdrawNotify', { result: true, info: data.param });
        };
        ImManager.onSystemBulletin = function (data) {
            observer_1.default.publish('SystemBulletin', { result: true, info: data.param });
        };
        return ImManager;
    }());
    exports.default = ImManager;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(145);
module.exports = __webpack_require__(347);


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

__webpack_require__(146);

__webpack_require__(343);

__webpack_require__(344);

if (global._babelPolyfill) {
  throw new Error("only one instance of babel-polyfill is allowed");
}
global._babelPolyfill = true;

var DEFINE_PROPERTY = "defineProperty";
function define(O, key, value) {
  O[key] || Object[DEFINE_PROPERTY](O, key, {
    writable: true,
    configurable: true,
    value: value
  });
}

define(String.prototype, "padLeft", "".padStart);
define(String.prototype, "padRight", "".padEnd);

"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function (key) {
  [][key] && define(Array, key, Function.call.bind([][key]));
});
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(99)))

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(147);
__webpack_require__(149);
__webpack_require__(150);
__webpack_require__(151);
__webpack_require__(152);
__webpack_require__(153);
__webpack_require__(154);
__webpack_require__(155);
__webpack_require__(156);
__webpack_require__(157);
__webpack_require__(158);
__webpack_require__(159);
__webpack_require__(160);
__webpack_require__(161);
__webpack_require__(162);
__webpack_require__(163);
__webpack_require__(165);
__webpack_require__(166);
__webpack_require__(167);
__webpack_require__(168);
__webpack_require__(169);
__webpack_require__(170);
__webpack_require__(171);
__webpack_require__(172);
__webpack_require__(173);
__webpack_require__(174);
__webpack_require__(175);
__webpack_require__(176);
__webpack_require__(177);
__webpack_require__(178);
__webpack_require__(179);
__webpack_require__(180);
__webpack_require__(181);
__webpack_require__(182);
__webpack_require__(183);
__webpack_require__(184);
__webpack_require__(185);
__webpack_require__(186);
__webpack_require__(187);
__webpack_require__(188);
__webpack_require__(189);
__webpack_require__(190);
__webpack_require__(191);
__webpack_require__(192);
__webpack_require__(193);
__webpack_require__(194);
__webpack_require__(195);
__webpack_require__(196);
__webpack_require__(197);
__webpack_require__(198);
__webpack_require__(199);
__webpack_require__(200);
__webpack_require__(201);
__webpack_require__(202);
__webpack_require__(203);
__webpack_require__(204);
__webpack_require__(205);
__webpack_require__(206);
__webpack_require__(207);
__webpack_require__(208);
__webpack_require__(209);
__webpack_require__(210);
__webpack_require__(211);
__webpack_require__(212);
__webpack_require__(213);
__webpack_require__(214);
__webpack_require__(215);
__webpack_require__(216);
__webpack_require__(217);
__webpack_require__(218);
__webpack_require__(219);
__webpack_require__(220);
__webpack_require__(221);
__webpack_require__(222);
__webpack_require__(223);
__webpack_require__(224);
__webpack_require__(225);
__webpack_require__(227);
__webpack_require__(228);
__webpack_require__(230);
__webpack_require__(231);
__webpack_require__(232);
__webpack_require__(233);
__webpack_require__(234);
__webpack_require__(235);
__webpack_require__(236);
__webpack_require__(238);
__webpack_require__(239);
__webpack_require__(240);
__webpack_require__(241);
__webpack_require__(242);
__webpack_require__(243);
__webpack_require__(244);
__webpack_require__(245);
__webpack_require__(246);
__webpack_require__(247);
__webpack_require__(248);
__webpack_require__(249);
__webpack_require__(250);
__webpack_require__(94);
__webpack_require__(251);
__webpack_require__(252);
__webpack_require__(118);
__webpack_require__(253);
__webpack_require__(254);
__webpack_require__(255);
__webpack_require__(256);
__webpack_require__(257);
__webpack_require__(121);
__webpack_require__(123);
__webpack_require__(124);
__webpack_require__(258);
__webpack_require__(259);
__webpack_require__(260);
__webpack_require__(261);
__webpack_require__(262);
__webpack_require__(263);
__webpack_require__(264);
__webpack_require__(265);
__webpack_require__(266);
__webpack_require__(267);
__webpack_require__(268);
__webpack_require__(269);
__webpack_require__(270);
__webpack_require__(271);
__webpack_require__(272);
__webpack_require__(273);
__webpack_require__(274);
__webpack_require__(275);
__webpack_require__(276);
__webpack_require__(277);
__webpack_require__(278);
__webpack_require__(279);
__webpack_require__(280);
__webpack_require__(281);
__webpack_require__(282);
__webpack_require__(283);
__webpack_require__(284);
__webpack_require__(285);
__webpack_require__(286);
__webpack_require__(287);
__webpack_require__(288);
__webpack_require__(289);
__webpack_require__(290);
__webpack_require__(291);
__webpack_require__(292);
__webpack_require__(293);
__webpack_require__(294);
__webpack_require__(295);
__webpack_require__(296);
__webpack_require__(297);
__webpack_require__(298);
__webpack_require__(299);
__webpack_require__(300);
__webpack_require__(301);
__webpack_require__(302);
__webpack_require__(303);
__webpack_require__(304);
__webpack_require__(305);
__webpack_require__(306);
__webpack_require__(307);
__webpack_require__(308);
__webpack_require__(309);
__webpack_require__(310);
__webpack_require__(311);
__webpack_require__(312);
__webpack_require__(313);
__webpack_require__(314);
__webpack_require__(315);
__webpack_require__(316);
__webpack_require__(317);
__webpack_require__(318);
__webpack_require__(319);
__webpack_require__(320);
__webpack_require__(321);
__webpack_require__(322);
__webpack_require__(323);
__webpack_require__(324);
__webpack_require__(325);
__webpack_require__(326);
__webpack_require__(327);
__webpack_require__(328);
__webpack_require__(329);
__webpack_require__(330);
__webpack_require__(331);
__webpack_require__(332);
__webpack_require__(333);
__webpack_require__(334);
__webpack_require__(335);
__webpack_require__(336);
__webpack_require__(337);
__webpack_require__(338);
__webpack_require__(339);
__webpack_require__(340);
__webpack_require__(341);
__webpack_require__(342);
module.exports = __webpack_require__(29);


/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// ECMAScript 6 symbols shim
var global = __webpack_require__(3);
var has = __webpack_require__(16);
var DESCRIPTORS = __webpack_require__(7);
var $export = __webpack_require__(0);
var redefine = __webpack_require__(18);
var META = __webpack_require__(37).KEY;
var $fails = __webpack_require__(4);
var shared = __webpack_require__(59);
var setToStringTag = __webpack_require__(52);
var uid = __webpack_require__(41);
var wks = __webpack_require__(6);
var wksExt = __webpack_require__(101);
var wksDefine = __webpack_require__(74);
var enumKeys = __webpack_require__(148);
var isArray = __webpack_require__(62);
var anObject = __webpack_require__(2);
var toIObject = __webpack_require__(20);
var toPrimitive = __webpack_require__(30);
var createDesc = __webpack_require__(40);
var _create = __webpack_require__(45);
var gOPNExt = __webpack_require__(104);
var $GOPD = __webpack_require__(21);
var $DP = __webpack_require__(8);
var $keys = __webpack_require__(43);
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function';
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () { return dP(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  __webpack_require__(46).f = gOPNExt.f = $getOwnPropertyNames;
  __webpack_require__(57).f = $propertyIsEnumerable;
  __webpack_require__(61).f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !__webpack_require__(42)) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    if (it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    replacer = args[1];
    if (typeof replacer == 'function') $replacer = replacer;
    if ($replacer || !isArray(replacer)) replacer = function (key, value) {
      if ($replacer) value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(17)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

// all enumerable object keys, includes symbols
var getKeys = __webpack_require__(43);
var gOPS = __webpack_require__(61);
var pIE = __webpack_require__(57);
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};


/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', { create: __webpack_require__(45) });


/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !__webpack_require__(7), 'Object', { defineProperty: __webpack_require__(8).f });


/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
$export($export.S + $export.F * !__webpack_require__(7), 'Object', { defineProperties: __webpack_require__(103) });


/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject = __webpack_require__(20);
var $getOwnPropertyDescriptor = __webpack_require__(21).f;

__webpack_require__(33)('getOwnPropertyDescriptor', function () {
  return function getOwnPropertyDescriptor(it, key) {
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});


/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 Object.getPrototypeOf(O)
var toObject = __webpack_require__(10);
var $getPrototypeOf = __webpack_require__(22);

__webpack_require__(33)('getPrototypeOf', function () {
  return function getPrototypeOf(it) {
    return $getPrototypeOf(toObject(it));
  };
});


/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 Object.keys(O)
var toObject = __webpack_require__(10);
var $keys = __webpack_require__(43);

__webpack_require__(33)('keys', function () {
  return function keys(it) {
    return $keys(toObject(it));
  };
});


/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 Object.getOwnPropertyNames(O)
__webpack_require__(33)('getOwnPropertyNames', function () {
  return __webpack_require__(104).f;
});


/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.5 Object.freeze(O)
var isObject = __webpack_require__(5);
var meta = __webpack_require__(37).onFreeze;

__webpack_require__(33)('freeze', function ($freeze) {
  return function freeze(it) {
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
  };
});


/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.17 Object.seal(O)
var isObject = __webpack_require__(5);
var meta = __webpack_require__(37).onFreeze;

__webpack_require__(33)('seal', function ($seal) {
  return function seal(it) {
    return $seal && isObject(it) ? $seal(meta(it)) : it;
  };
});


/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.15 Object.preventExtensions(O)
var isObject = __webpack_require__(5);
var meta = __webpack_require__(37).onFreeze;

__webpack_require__(33)('preventExtensions', function ($preventExtensions) {
  return function preventExtensions(it) {
    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
  };
});


/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.12 Object.isFrozen(O)
var isObject = __webpack_require__(5);

__webpack_require__(33)('isFrozen', function ($isFrozen) {
  return function isFrozen(it) {
    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
  };
});


/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.13 Object.isSealed(O)
var isObject = __webpack_require__(5);

__webpack_require__(33)('isSealed', function ($isSealed) {
  return function isSealed(it) {
    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
  };
});


/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.11 Object.isExtensible(O)
var isObject = __webpack_require__(5);

__webpack_require__(33)('isExtensible', function ($isExtensible) {
  return function isExtensible(it) {
    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
  };
});


/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.1 Object.assign(target, source)
var $export = __webpack_require__(0);

$export($export.S + $export.F, 'Object', { assign: __webpack_require__(105) });


/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.10 Object.is(value1, value2)
var $export = __webpack_require__(0);
$export($export.S, 'Object', { is: __webpack_require__(164) });


/***/ }),
/* 164 */
/***/ (function(module, exports) {

// 7.2.9 SameValue(x, y)
module.exports = Object.is || function is(x, y) {
  // eslint-disable-next-line no-self-compare
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};


/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = __webpack_require__(0);
$export($export.S, 'Object', { setPrototypeOf: __webpack_require__(78).set });


/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.3.6 Object.prototype.toString()
var classof = __webpack_require__(58);
var test = {};
test[__webpack_require__(6)('toStringTag')] = 'z';
if (test + '' != '[object z]') {
  __webpack_require__(18)(Object.prototype, 'toString', function toString() {
    return '[object ' + classof(this) + ']';
  }, true);
}


/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
var $export = __webpack_require__(0);

$export($export.P, 'Function', { bind: __webpack_require__(106) });


/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(8).f;
var FProto = Function.prototype;
var nameRE = /^\s*function ([^ (]*)/;
var NAME = 'name';

// 19.2.4.2 name
NAME in FProto || __webpack_require__(7) && dP(FProto, NAME, {
  configurable: true,
  get: function () {
    try {
      return ('' + this).match(nameRE)[1];
    } catch (e) {
      return '';
    }
  }
});


/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var isObject = __webpack_require__(5);
var getPrototypeOf = __webpack_require__(22);
var HAS_INSTANCE = __webpack_require__(6)('hasInstance');
var FunctionProto = Function.prototype;
// 19.2.3.6 Function.prototype[@@hasInstance](V)
if (!(HAS_INSTANCE in FunctionProto)) __webpack_require__(8).f(FunctionProto, HAS_INSTANCE, { value: function (O) {
  if (typeof this != 'function' || !isObject(O)) return false;
  if (!isObject(this.prototype)) return O instanceof this;
  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
  while (O = getPrototypeOf(O)) if (this.prototype === O) return true;
  return false;
} });


/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var $parseInt = __webpack_require__(108);
// 18.2.5 parseInt(string, radix)
$export($export.G + $export.F * (parseInt != $parseInt), { parseInt: $parseInt });


/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var $parseFloat = __webpack_require__(109);
// 18.2.4 parseFloat(string)
$export($export.G + $export.F * (parseFloat != $parseFloat), { parseFloat: $parseFloat });


/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(3);
var has = __webpack_require__(16);
var cof = __webpack_require__(26);
var inheritIfRequired = __webpack_require__(80);
var toPrimitive = __webpack_require__(30);
var fails = __webpack_require__(4);
var gOPN = __webpack_require__(46).f;
var gOPD = __webpack_require__(21).f;
var dP = __webpack_require__(8).f;
var $trim = __webpack_require__(53).trim;
var NUMBER = 'Number';
var $Number = global[NUMBER];
var Base = $Number;
var proto = $Number.prototype;
// Opera ~12 has broken Object#toString
var BROKEN_COF = cof(__webpack_require__(45)(proto)) == NUMBER;
var TRIM = 'trim' in String.prototype;

// 7.1.3 ToNumber(argument)
var toNumber = function (argument) {
  var it = toPrimitive(argument, false);
  if (typeof it == 'string' && it.length > 2) {
    it = TRIM ? it.trim() : $trim(it, 3);
    var first = it.charCodeAt(0);
    var third, radix, maxCode;
    if (first === 43 || first === 45) {
      third = it.charCodeAt(2);
      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if (first === 48) {
      switch (it.charCodeAt(1)) {
        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
        default: return +it;
      }
      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
        code = digits.charCodeAt(i);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if (code < 48 || code > maxCode) return NaN;
      } return parseInt(digits, radix);
    }
  } return +it;
};

if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
  $Number = function Number(value) {
    var it = arguments.length < 1 ? 0 : value;
    var that = this;
    return that instanceof $Number
      // check on 1..constructor(foo) case
      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)
        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
  };
  for (var keys = __webpack_require__(7) ? gOPN(Base) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES6 (in case, if modules with ES6 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
  ).split(','), j = 0, key; keys.length > j; j++) {
    if (has(Base, key = keys[j]) && !has($Number, key)) {
      dP($Number, key, gOPD(Base, key));
    }
  }
  $Number.prototype = proto;
  proto.constructor = $Number;
  __webpack_require__(18)(global, NUMBER, $Number);
}


/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var toInteger = __webpack_require__(32);
var aNumberValue = __webpack_require__(110);
var repeat = __webpack_require__(81);
var $toFixed = 1.0.toFixed;
var floor = Math.floor;
var data = [0, 0, 0, 0, 0, 0];
var ERROR = 'Number.toFixed: incorrect invocation!';
var ZERO = '0';

var multiply = function (n, c) {
  var i = -1;
  var c2 = c;
  while (++i < 6) {
    c2 += n * data[i];
    data[i] = c2 % 1e7;
    c2 = floor(c2 / 1e7);
  }
};
var divide = function (n) {
  var i = 6;
  var c = 0;
  while (--i >= 0) {
    c += data[i];
    data[i] = floor(c / n);
    c = (c % n) * 1e7;
  }
};
var numToString = function () {
  var i = 6;
  var s = '';
  while (--i >= 0) {
    if (s !== '' || i === 0 || data[i] !== 0) {
      var t = String(data[i]);
      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
    }
  } return s;
};
var pow = function (x, n, acc) {
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};
var log = function (x) {
  var n = 0;
  var x2 = x;
  while (x2 >= 4096) {
    n += 12;
    x2 /= 4096;
  }
  while (x2 >= 2) {
    n += 1;
    x2 /= 2;
  } return n;
};

$export($export.P + $export.F * (!!$toFixed && (
  0.00008.toFixed(3) !== '0.000' ||
  0.9.toFixed(0) !== '1' ||
  1.255.toFixed(2) !== '1.25' ||
  1000000000000000128.0.toFixed(0) !== '1000000000000000128'
) || !__webpack_require__(4)(function () {
  // V8 ~ Android 4.3-
  $toFixed.call({});
})), 'Number', {
  toFixed: function toFixed(fractionDigits) {
    var x = aNumberValue(this, ERROR);
    var f = toInteger(fractionDigits);
    var s = '';
    var m = ZERO;
    var e, z, j, k;
    if (f < 0 || f > 20) throw RangeError(ERROR);
    // eslint-disable-next-line no-self-compare
    if (x != x) return 'NaN';
    if (x <= -1e21 || x >= 1e21) return String(x);
    if (x < 0) {
      s = '-';
      x = -x;
    }
    if (x > 1e-21) {
      e = log(x * pow(2, 69, 1)) - 69;
      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;
      if (e > 0) {
        multiply(0, z);
        j = f;
        while (j >= 7) {
          multiply(1e7, 0);
          j -= 7;
        }
        multiply(pow(10, j, 1), 0);
        j = e - 1;
        while (j >= 23) {
          divide(1 << 23);
          j -= 23;
        }
        divide(1 << j);
        multiply(1, 1);
        divide(2);
        m = numToString();
      } else {
        multiply(0, z);
        multiply(1 << -e, 0);
        m = numToString() + repeat.call(ZERO, f);
      }
    }
    if (f > 0) {
      k = m.length;
      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
    } else {
      m = s + m;
    } return m;
  }
});


/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $fails = __webpack_require__(4);
var aNumberValue = __webpack_require__(110);
var $toPrecision = 1.0.toPrecision;

$export($export.P + $export.F * ($fails(function () {
  // IE7-
  return $toPrecision.call(1, undefined) !== '1';
}) || !$fails(function () {
  // V8 ~ Android 4.3-
  $toPrecision.call({});
})), 'Number', {
  toPrecision: function toPrecision(precision) {
    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
  }
});


/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.1 Number.EPSILON
var $export = __webpack_require__(0);

$export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });


/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.2 Number.isFinite(number)
var $export = __webpack_require__(0);
var _isFinite = __webpack_require__(3).isFinite;

$export($export.S, 'Number', {
  isFinite: function isFinite(it) {
    return typeof it == 'number' && _isFinite(it);
  }
});


/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.3 Number.isInteger(number)
var $export = __webpack_require__(0);

$export($export.S, 'Number', { isInteger: __webpack_require__(111) });


/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.4 Number.isNaN(number)
var $export = __webpack_require__(0);

$export($export.S, 'Number', {
  isNaN: function isNaN(number) {
    // eslint-disable-next-line no-self-compare
    return number != number;
  }
});


/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.5 Number.isSafeInteger(number)
var $export = __webpack_require__(0);
var isInteger = __webpack_require__(111);
var abs = Math.abs;

$export($export.S, 'Number', {
  isSafeInteger: function isSafeInteger(number) {
    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
  }
});


/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.6 Number.MAX_SAFE_INTEGER
var $export = __webpack_require__(0);

$export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });


/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.10 Number.MIN_SAFE_INTEGER
var $export = __webpack_require__(0);

$export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });


/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var $parseFloat = __webpack_require__(109);
// 20.1.2.12 Number.parseFloat(string)
$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat });


/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var $parseInt = __webpack_require__(108);
// 20.1.2.13 Number.parseInt(string, radix)
$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });


/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.3 Math.acosh(x)
var $export = __webpack_require__(0);
var log1p = __webpack_require__(112);
var sqrt = Math.sqrt;
var $acosh = Math.acosh;

$export($export.S + $export.F * !($acosh
  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
  && Math.floor($acosh(Number.MAX_VALUE)) == 710
  // Tor Browser bug: Math.acosh(Infinity) -> NaN
  && $acosh(Infinity) == Infinity
), 'Math', {
  acosh: function acosh(x) {
    return (x = +x) < 1 ? NaN : x > 94906265.62425156
      ? Math.log(x) + Math.LN2
      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});


/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.5 Math.asinh(x)
var $export = __webpack_require__(0);
var $asinh = Math.asinh;

function asinh(x) {
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
}

// Tor Browser bug: Math.asinh(0) -> -0
$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });


/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.7 Math.atanh(x)
var $export = __webpack_require__(0);
var $atanh = Math.atanh;

// Tor Browser bug: Math.atanh(-0) -> 0
$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
  atanh: function atanh(x) {
    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
  }
});


/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.9 Math.cbrt(x)
var $export = __webpack_require__(0);
var sign = __webpack_require__(82);

$export($export.S, 'Math', {
  cbrt: function cbrt(x) {
    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
  }
});


/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.11 Math.clz32(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  clz32: function clz32(x) {
    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
  }
});


/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.12 Math.cosh(x)
var $export = __webpack_require__(0);
var exp = Math.exp;

$export($export.S, 'Math', {
  cosh: function cosh(x) {
    return (exp(x = +x) + exp(-x)) / 2;
  }
});


/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.14 Math.expm1(x)
var $export = __webpack_require__(0);
var $expm1 = __webpack_require__(83);

$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });


/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.16 Math.fround(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', { fround: __webpack_require__(113) });


/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
var $export = __webpack_require__(0);
var abs = Math.abs;

$export($export.S, 'Math', {
  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars
    var sum = 0;
    var i = 0;
    var aLen = arguments.length;
    var larg = 0;
    var arg, div;
    while (i < aLen) {
      arg = abs(arguments[i++]);
      if (larg < arg) {
        div = larg / arg;
        sum = sum * div * div + 1;
        larg = arg;
      } else if (arg > 0) {
        div = arg / larg;
        sum += div * div;
      } else sum += arg;
    }
    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
  }
});


/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.18 Math.imul(x, y)
var $export = __webpack_require__(0);
var $imul = Math.imul;

// some WebKit versions fails with big numbers, some has wrong arity
$export($export.S + $export.F * __webpack_require__(4)(function () {
  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
}), 'Math', {
  imul: function imul(x, y) {
    var UINT16 = 0xffff;
    var xn = +x;
    var yn = +y;
    var xl = UINT16 & xn;
    var yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});


/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.21 Math.log10(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  log10: function log10(x) {
    return Math.log(x) * Math.LOG10E;
  }
});


/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.20 Math.log1p(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', { log1p: __webpack_require__(112) });


/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.22 Math.log2(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  log2: function log2(x) {
    return Math.log(x) / Math.LN2;
  }
});


/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.28 Math.sign(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', { sign: __webpack_require__(82) });


/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.30 Math.sinh(x)
var $export = __webpack_require__(0);
var expm1 = __webpack_require__(83);
var exp = Math.exp;

// V8 near Chromium 38 has a problem with very small numbers
$export($export.S + $export.F * __webpack_require__(4)(function () {
  return !Math.sinh(-2e-17) != -2e-17;
}), 'Math', {
  sinh: function sinh(x) {
    return Math.abs(x = +x) < 1
      ? (expm1(x) - expm1(-x)) / 2
      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
  }
});


/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.33 Math.tanh(x)
var $export = __webpack_require__(0);
var expm1 = __webpack_require__(83);
var exp = Math.exp;

$export($export.S, 'Math', {
  tanh: function tanh(x) {
    var a = expm1(x = +x);
    var b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});


/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.34 Math.trunc(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  trunc: function trunc(it) {
    return (it > 0 ? Math.floor : Math.ceil)(it);
  }
});


/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var toAbsoluteIndex = __webpack_require__(44);
var fromCharCode = String.fromCharCode;
var $fromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
  // 21.1.2.2 String.fromCodePoint(...codePoints)
  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars
    var res = [];
    var aLen = arguments.length;
    var i = 0;
    var code;
    while (aLen > i) {
      code = +arguments[i++];
      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
      res.push(code < 0x10000
        ? fromCharCode(code)
        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
      );
    } return res.join('');
  }
});


/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var toIObject = __webpack_require__(20);
var toLength = __webpack_require__(9);

$export($export.S, 'String', {
  // 21.1.2.4 String.raw(callSite, ...substitutions)
  raw: function raw(callSite) {
    var tpl = toIObject(callSite.raw);
    var len = toLength(tpl.length);
    var aLen = arguments.length;
    var res = [];
    var i = 0;
    while (len > i) {
      res.push(String(tpl[i++]));
      if (i < aLen) res.push(String(arguments[i]));
    } return res.join('');
  }
});


/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 21.1.3.25 String.prototype.trim()
__webpack_require__(53)('trim', function ($trim) {
  return function trim() {
    return $trim(this, 3);
  };
});


/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $at = __webpack_require__(84)(true);

// 21.1.3.27 String.prototype[@@iterator]()
__webpack_require__(85)(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});


/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $at = __webpack_require__(84)(false);
$export($export.P, 'String', {
  // 21.1.3.3 String.prototype.codePointAt(pos)
  codePointAt: function codePointAt(pos) {
    return $at(this, pos);
  }
});


/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])

var $export = __webpack_require__(0);
var toLength = __webpack_require__(9);
var context = __webpack_require__(87);
var ENDS_WITH = 'endsWith';
var $endsWith = ''[ENDS_WITH];

$export($export.P + $export.F * __webpack_require__(88)(ENDS_WITH), 'String', {
  endsWith: function endsWith(searchString /* , endPosition = @length */) {
    var that = context(this, searchString, ENDS_WITH);
    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
    var len = toLength(that.length);
    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
    var search = String(searchString);
    return $endsWith
      ? $endsWith.call(that, search, end)
      : that.slice(end - search.length, end) === search;
  }
});


/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.7 String.prototype.includes(searchString, position = 0)

var $export = __webpack_require__(0);
var context = __webpack_require__(87);
var INCLUDES = 'includes';

$export($export.P + $export.F * __webpack_require__(88)(INCLUDES), 'String', {
  includes: function includes(searchString /* , position = 0 */) {
    return !!~context(this, searchString, INCLUDES)
      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);

$export($export.P, 'String', {
  // 21.1.3.13 String.prototype.repeat(count)
  repeat: __webpack_require__(81)
});


/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])

var $export = __webpack_require__(0);
var toLength = __webpack_require__(9);
var context = __webpack_require__(87);
var STARTS_WITH = 'startsWith';
var $startsWith = ''[STARTS_WITH];

$export($export.P + $export.F * __webpack_require__(88)(STARTS_WITH), 'String', {
  startsWith: function startsWith(searchString /* , position = 0 */) {
    var that = context(this, searchString, STARTS_WITH);
    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
    var search = String(searchString);
    return $startsWith
      ? $startsWith.call(that, search, index)
      : that.slice(index, index + search.length) === search;
  }
});


/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.2 String.prototype.anchor(name)
__webpack_require__(19)('anchor', function (createHTML) {
  return function anchor(name) {
    return createHTML(this, 'a', 'name', name);
  };
});


/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.3 String.prototype.big()
__webpack_require__(19)('big', function (createHTML) {
  return function big() {
    return createHTML(this, 'big', '', '');
  };
});


/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.4 String.prototype.blink()
__webpack_require__(19)('blink', function (createHTML) {
  return function blink() {
    return createHTML(this, 'blink', '', '');
  };
});


/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.5 String.prototype.bold()
__webpack_require__(19)('bold', function (createHTML) {
  return function bold() {
    return createHTML(this, 'b', '', '');
  };
});


/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.6 String.prototype.fixed()
__webpack_require__(19)('fixed', function (createHTML) {
  return function fixed() {
    return createHTML(this, 'tt', '', '');
  };
});


/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.7 String.prototype.fontcolor(color)
__webpack_require__(19)('fontcolor', function (createHTML) {
  return function fontcolor(color) {
    return createHTML(this, 'font', 'color', color);
  };
});


/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.8 String.prototype.fontsize(size)
__webpack_require__(19)('fontsize', function (createHTML) {
  return function fontsize(size) {
    return createHTML(this, 'font', 'size', size);
  };
});


/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.9 String.prototype.italics()
__webpack_require__(19)('italics', function (createHTML) {
  return function italics() {
    return createHTML(this, 'i', '', '');
  };
});


/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.10 String.prototype.link(url)
__webpack_require__(19)('link', function (createHTML) {
  return function link(url) {
    return createHTML(this, 'a', 'href', url);
  };
});


/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.11 String.prototype.small()
__webpack_require__(19)('small', function (createHTML) {
  return function small() {
    return createHTML(this, 'small', '', '');
  };
});


/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.12 String.prototype.strike()
__webpack_require__(19)('strike', function (createHTML) {
  return function strike() {
    return createHTML(this, 'strike', '', '');
  };
});


/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.13 String.prototype.sub()
__webpack_require__(19)('sub', function (createHTML) {
  return function sub() {
    return createHTML(this, 'sub', '', '');
  };
});


/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.14 String.prototype.sup()
__webpack_require__(19)('sup', function (createHTML) {
  return function sup() {
    return createHTML(this, 'sup', '', '');
  };
});


/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

// 20.3.3.1 / 15.9.4.4 Date.now()
var $export = __webpack_require__(0);

$export($export.S, 'Date', { now: function () { return new Date().getTime(); } });


/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var toObject = __webpack_require__(10);
var toPrimitive = __webpack_require__(30);

$export($export.P + $export.F * __webpack_require__(4)(function () {
  return new Date(NaN).toJSON() !== null
    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;
}), 'Date', {
  // eslint-disable-next-line no-unused-vars
  toJSON: function toJSON(key) {
    var O = toObject(this);
    var pv = toPrimitive(O);
    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
  }
});


/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var $export = __webpack_require__(0);
var toISOString = __webpack_require__(226);

// PhantomJS / old WebKit has a broken implementations
$export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {
  toISOString: toISOString
});


/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var fails = __webpack_require__(4);
var getTime = Date.prototype.getTime;
var $toISOString = Date.prototype.toISOString;

var lz = function (num) {
  return num > 9 ? num : '0' + num;
};

// PhantomJS / old WebKit has a broken implementations
module.exports = (fails(function () {
  return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
}) || !fails(function () {
  $toISOString.call(new Date(NaN));
})) ? function toISOString() {
  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
  var d = this;
  var y = d.getUTCFullYear();
  var m = d.getUTCMilliseconds();
  var s = y < 0 ? '-' : y > 9999 ? '+' : '';
  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
    '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
    'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
    ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
} : $toISOString;


/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

var DateProto = Date.prototype;
var INVALID_DATE = 'Invalid Date';
var TO_STRING = 'toString';
var $toString = DateProto[TO_STRING];
var getTime = DateProto.getTime;
if (new Date(NaN) + '' != INVALID_DATE) {
  __webpack_require__(18)(DateProto, TO_STRING, function toString() {
    var value = getTime.call(this);
    // eslint-disable-next-line no-self-compare
    return value === value ? $toString.call(this) : INVALID_DATE;
  });
}


/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

var TO_PRIMITIVE = __webpack_require__(6)('toPrimitive');
var proto = Date.prototype;

if (!(TO_PRIMITIVE in proto)) __webpack_require__(17)(proto, TO_PRIMITIVE, __webpack_require__(229));


/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var anObject = __webpack_require__(2);
var toPrimitive = __webpack_require__(30);
var NUMBER = 'number';

module.exports = function (hint) {
  if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');
  return toPrimitive(anObject(this), hint != NUMBER);
};


/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
var $export = __webpack_require__(0);

$export($export.S, 'Array', { isArray: __webpack_require__(62) });


/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ctx = __webpack_require__(25);
var $export = __webpack_require__(0);
var toObject = __webpack_require__(10);
var call = __webpack_require__(114);
var isArrayIter = __webpack_require__(89);
var toLength = __webpack_require__(9);
var createProperty = __webpack_require__(90);
var getIterFn = __webpack_require__(91);

$export($export.S + $export.F * !__webpack_require__(64)(function (iter) { Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = getIterFn(O);
    var length, result, step, iterator;
    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for (result = new C(length); length > index; index++) {
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});


/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var createProperty = __webpack_require__(90);

// WebKit Array.of isn't generic
$export($export.S + $export.F * __webpack_require__(4)(function () {
  function F() { /* empty */ }
  return !(Array.of.call(F) instanceof F);
}), 'Array', {
  // 22.1.2.3 Array.of( ...items)
  of: function of(/* ...args */) {
    var index = 0;
    var aLen = arguments.length;
    var result = new (typeof this == 'function' ? this : Array)(aLen);
    while (aLen > index) createProperty(result, index, arguments[index++]);
    result.length = aLen;
    return result;
  }
});


/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 22.1.3.13 Array.prototype.join(separator)
var $export = __webpack_require__(0);
var toIObject = __webpack_require__(20);
var arrayJoin = [].join;

// fallback for not array-like strings
$export($export.P + $export.F * (__webpack_require__(56) != Object || !__webpack_require__(27)(arrayJoin)), 'Array', {
  join: function join(separator) {
    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
  }
});


/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var html = __webpack_require__(77);
var cof = __webpack_require__(26);
var toAbsoluteIndex = __webpack_require__(44);
var toLength = __webpack_require__(9);
var arraySlice = [].slice;

// fallback for not array-like ES3 strings and DOM objects
$export($export.P + $export.F * __webpack_require__(4)(function () {
  if (html) arraySlice.call(html);
}), 'Array', {
  slice: function slice(begin, end) {
    var len = toLength(this.length);
    var klass = cof(this);
    end = end === undefined ? len : end;
    if (klass == 'Array') return arraySlice.call(this, begin, end);
    var start = toAbsoluteIndex(begin, len);
    var upTo = toAbsoluteIndex(end, len);
    var size = toLength(upTo - start);
    var cloned = Array(size);
    var i = 0;
    for (; i < size; i++) cloned[i] = klass == 'String'
      ? this.charAt(start + i)
      : this[start + i];
    return cloned;
  }
});


/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var aFunction = __webpack_require__(15);
var toObject = __webpack_require__(10);
var fails = __webpack_require__(4);
var $sort = [].sort;
var test = [1, 2, 3];

$export($export.P + $export.F * (fails(function () {
  // IE8-
  test.sort(undefined);
}) || !fails(function () {
  // V8 bug
  test.sort(null);
  // Old WebKit
}) || !__webpack_require__(27)($sort)), 'Array', {
  // 22.1.3.25 Array.prototype.sort(comparefn)
  sort: function sort(comparefn) {
    return comparefn === undefined
      ? $sort.call(toObject(this))
      : $sort.call(toObject(this), aFunction(comparefn));
  }
});


/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $forEach = __webpack_require__(34)(0);
var STRICT = __webpack_require__(27)([].forEach, true);

$export($export.P + $export.F * !STRICT, 'Array', {
  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
  forEach: function forEach(callbackfn /* , thisArg */) {
    return $forEach(this, callbackfn, arguments[1]);
  }
});


/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(5);
var isArray = __webpack_require__(62);
var SPECIES = __webpack_require__(6)('species');

module.exports = function (original) {
  var C;
  if (isArray(original)) {
    C = original.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? Array : C;
};


/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $map = __webpack_require__(34)(1);

$export($export.P + $export.F * !__webpack_require__(27)([].map, true), 'Array', {
  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
  map: function map(callbackfn /* , thisArg */) {
    return $map(this, callbackfn, arguments[1]);
  }
});


/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $filter = __webpack_require__(34)(2);

$export($export.P + $export.F * !__webpack_require__(27)([].filter, true), 'Array', {
  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
  filter: function filter(callbackfn /* , thisArg */) {
    return $filter(this, callbackfn, arguments[1]);
  }
});


/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $some = __webpack_require__(34)(3);

$export($export.P + $export.F * !__webpack_require__(27)([].some, true), 'Array', {
  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
  some: function some(callbackfn /* , thisArg */) {
    return $some(this, callbackfn, arguments[1]);
  }
});


/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $every = __webpack_require__(34)(4);

$export($export.P + $export.F * !__webpack_require__(27)([].every, true), 'Array', {
  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
  every: function every(callbackfn /* , thisArg */) {
    return $every(this, callbackfn, arguments[1]);
  }
});


/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $reduce = __webpack_require__(115);

$export($export.P + $export.F * !__webpack_require__(27)([].reduce, true), 'Array', {
  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
  reduce: function reduce(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
  }
});


/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $reduce = __webpack_require__(115);

$export($export.P + $export.F * !__webpack_require__(27)([].reduceRight, true), 'Array', {
  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
  reduceRight: function reduceRight(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
  }
});


/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $indexOf = __webpack_require__(60)(false);
var $native = [].indexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(27)($native)), 'Array', {
  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
    return NEGATIVE_ZERO
      // convert -0 to +0
      ? $native.apply(this, arguments) || 0
      : $indexOf(this, searchElement, arguments[1]);
  }
});


/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var toIObject = __webpack_require__(20);
var toInteger = __webpack_require__(32);
var toLength = __webpack_require__(9);
var $native = [].lastIndexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(27)($native)), 'Array', {
  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
  lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
    // convert -0 to +0
    if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;
    var O = toIObject(this);
    var length = toLength(O.length);
    var index = length - 1;
    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));
    if (index < 0) index = length + index;
    for (;index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;
    return -1;
  }
});


/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
var $export = __webpack_require__(0);

$export($export.P, 'Array', { copyWithin: __webpack_require__(116) });

__webpack_require__(38)('copyWithin');


/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
var $export = __webpack_require__(0);

$export($export.P, 'Array', { fill: __webpack_require__(93) });

__webpack_require__(38)('fill');


/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
var $export = __webpack_require__(0);
var $find = __webpack_require__(34)(5);
var KEY = 'find';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  find: function find(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
__webpack_require__(38)(KEY);


/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
var $export = __webpack_require__(0);
var $find = __webpack_require__(34)(6);
var KEY = 'findIndex';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  findIndex: function findIndex(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
__webpack_require__(38)(KEY);


/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(47)('Array');


/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(3);
var inheritIfRequired = __webpack_require__(80);
var dP = __webpack_require__(8).f;
var gOPN = __webpack_require__(46).f;
var isRegExp = __webpack_require__(63);
var $flags = __webpack_require__(65);
var $RegExp = global.RegExp;
var Base = $RegExp;
var proto = $RegExp.prototype;
var re1 = /a/g;
var re2 = /a/g;
// "new" creates a new object, old webkit buggy here
var CORRECT_NEW = new $RegExp(re1) !== re1;

if (__webpack_require__(7) && (!CORRECT_NEW || __webpack_require__(4)(function () {
  re2[__webpack_require__(6)('match')] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
}))) {
  $RegExp = function RegExp(p, f) {
    var tiRE = this instanceof $RegExp;
    var piRE = isRegExp(p);
    var fiU = f === undefined;
    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
      : inheritIfRequired(CORRECT_NEW
        ? new Base(piRE && !fiU ? p.source : p, f)
        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
      , tiRE ? this : proto, $RegExp);
  };
  var proxy = function (key) {
    key in $RegExp || dP($RegExp, key, {
      configurable: true,
      get: function () { return Base[key]; },
      set: function (it) { Base[key] = it; }
    });
  };
  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);
  proto.constructor = $RegExp;
  $RegExp.prototype = proto;
  __webpack_require__(18)(global, 'RegExp', $RegExp);
}

__webpack_require__(47)('RegExp');


/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

__webpack_require__(118);
var anObject = __webpack_require__(2);
var $flags = __webpack_require__(65);
var DESCRIPTORS = __webpack_require__(7);
var TO_STRING = 'toString';
var $toString = /./[TO_STRING];

var define = function (fn) {
  __webpack_require__(18)(RegExp.prototype, TO_STRING, fn, true);
};

// 21.2.5.14 RegExp.prototype.toString()
if (__webpack_require__(4)(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {
  define(function toString() {
    var R = anObject(this);
    return '/'.concat(R.source, '/',
      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
  });
// FF44- RegExp#toString has a wrong name
} else if ($toString.name != TO_STRING) {
  define(function toString() {
    return $toString.call(this);
  });
}


/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

// @@match logic
__webpack_require__(66)('match', 1, function (defined, MATCH, $match) {
  // 21.1.3.11 String.prototype.match(regexp)
  return [function match(regexp) {
    'use strict';
    var O = defined(this);
    var fn = regexp == undefined ? undefined : regexp[MATCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
  }, $match];
});


/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

// @@replace logic
__webpack_require__(66)('replace', 2, function (defined, REPLACE, $replace) {
  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
  return [function replace(searchValue, replaceValue) {
    'use strict';
    var O = defined(this);
    var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
    return fn !== undefined
      ? fn.call(searchValue, O, replaceValue)
      : $replace.call(String(O), searchValue, replaceValue);
  }, $replace];
});


/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

// @@search logic
__webpack_require__(66)('search', 1, function (defined, SEARCH, $search) {
  // 21.1.3.15 String.prototype.search(regexp)
  return [function search(regexp) {
    'use strict';
    var O = defined(this);
    var fn = regexp == undefined ? undefined : regexp[SEARCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
  }, $search];
});


/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

// @@split logic
__webpack_require__(66)('split', 2, function (defined, SPLIT, $split) {
  'use strict';
  var isRegExp = __webpack_require__(63);
  var _split = $split;
  var $push = [].push;
  var $SPLIT = 'split';
  var LENGTH = 'length';
  var LAST_INDEX = 'lastIndex';
  if (
    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
    ''[$SPLIT](/.?/)[LENGTH]
  ) {
    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group
    // based on es5-shim implementation, need to rework it
    $split = function (separator, limit) {
      var string = String(this);
      if (separator === undefined && limit === 0) return [];
      // If `separator` is not a regex, use native split
      if (!isRegExp(separator)) return _split.call(string, separator, limit);
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var separator2, match, lastIndex, lastLength, i;
      // Doesn't need flags gy, but they don't hurt
      if (!NPCG) separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
      while (match = separatorCopy.exec(string)) {
        // `separatorCopy.lastIndex` is not reliable cross-browser
        lastIndex = match.index + match[0][LENGTH];
        if (lastIndex > lastLastIndex) {
          output.push(string.slice(lastLastIndex, match.index));
          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG
          // eslint-disable-next-line no-loop-func
          if (!NPCG && match[LENGTH] > 1) match[0].replace(separator2, function () {
            for (i = 1; i < arguments[LENGTH] - 2; i++) if (arguments[i] === undefined) match[i] = undefined;
          });
          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if (output[LENGTH] >= splitLimit) break;
        }
        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
      }
      if (lastLastIndex === string[LENGTH]) {
        if (lastLength || !separatorCopy.test('')) output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    };
  // Chakra, V8
  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
    $split = function (separator, limit) {
      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);
    };
  }
  // 21.1.3.17 String.prototype.split(separator, limit)
  return [function split(separator, limit) {
    var O = defined(this);
    var fn = separator == undefined ? undefined : separator[SPLIT];
    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
  }, $split];
});


/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(42);
var global = __webpack_require__(3);
var ctx = __webpack_require__(25);
var classof = __webpack_require__(58);
var $export = __webpack_require__(0);
var isObject = __webpack_require__(5);
var aFunction = __webpack_require__(15);
var anInstance = __webpack_require__(48);
var forOf = __webpack_require__(49);
var speciesConstructor = __webpack_require__(67);
var task = __webpack_require__(95).set;
var microtask = __webpack_require__(96)();
var newPromiseCapabilityModule = __webpack_require__(97);
var perform = __webpack_require__(119);
var promiseResolve = __webpack_require__(120);
var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';
var empty = function () { /* empty */ };
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[__webpack_require__(6)('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
  } catch (e) { /* empty */ }
}();

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value);
            if (domain) domain.exit();
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        reject(e);
      }
    };
    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function (promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function (promise) {
  if (promise._h == 1) return false;
  var chain = promise._a || promise._c;
  var i = 0;
  var reaction;
  while (chain.length > i) {
    reaction = chain[i++];
    if (reaction.fail || !isUnhandled(reaction.promise)) return false;
  } return true;
};
var onHandleUnhandled = function (promise) {
  task.call(global, function () {
    var handler;
    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = __webpack_require__(50)($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
__webpack_require__(52)($Promise, PROMISE);
__webpack_require__(47)(PROMISE);
Wrapper = __webpack_require__(29)[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(64)(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});


/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var weak = __webpack_require__(125);
var validate = __webpack_require__(55);
var WEAK_SET = 'WeakSet';

// 23.4 WeakSet Objects
__webpack_require__(68)(WEAK_SET, function (get) {
  return function WeakSet() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.4.3.1 WeakSet.prototype.add(value)
  add: function add(value) {
    return weak.def(validate(this, WEAK_SET), value, true);
  }
}, weak, false, true);


/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $typed = __webpack_require__(69);
var buffer = __webpack_require__(98);
var anObject = __webpack_require__(2);
var toAbsoluteIndex = __webpack_require__(44);
var toLength = __webpack_require__(9);
var isObject = __webpack_require__(5);
var ArrayBuffer = __webpack_require__(3).ArrayBuffer;
var speciesConstructor = __webpack_require__(67);
var $ArrayBuffer = buffer.ArrayBuffer;
var $DataView = buffer.DataView;
var $isView = $typed.ABV && ArrayBuffer.isView;
var $slice = $ArrayBuffer.prototype.slice;
var VIEW = $typed.VIEW;
var ARRAY_BUFFER = 'ArrayBuffer';

$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });

$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
  // 24.1.3.1 ArrayBuffer.isView(arg)
  isView: function isView(it) {
    return $isView && $isView(it) || isObject(it) && VIEW in it;
  }
});

$export($export.P + $export.U + $export.F * __webpack_require__(4)(function () {
  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
}), ARRAY_BUFFER, {
  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
  slice: function slice(start, end) {
    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix
    var len = anObject(this).byteLength;
    var first = toAbsoluteIndex(start, len);
    var final = toAbsoluteIndex(end === undefined ? len : end, len);
    var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(final - first));
    var viewS = new $DataView(this);
    var viewT = new $DataView(result);
    var index = 0;
    while (first < final) {
      viewT.setUint8(index++, viewS.getUint8(first++));
    } return result;
  }
});

__webpack_require__(47)(ARRAY_BUFFER);


/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
$export($export.G + $export.W + $export.F * !__webpack_require__(69).ABV, {
  DataView: __webpack_require__(98).DataView
});


/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(35)('Int8', 1, function (init) {
  return function Int8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(35)('Uint8', 1, function (init) {
  return function Uint8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(35)('Uint8', 1, function (init) {
  return function Uint8ClampedArray(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
}, true);


/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(35)('Int16', 2, function (init) {
  return function Int16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(35)('Uint16', 2, function (init) {
  return function Uint16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(35)('Int32', 4, function (init) {
  return function Int32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(35)('Uint32', 4, function (init) {
  return function Uint32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(35)('Float32', 4, function (init) {
  return function Float32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(35)('Float64', 8, function (init) {
  return function Float64Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
var $export = __webpack_require__(0);
var aFunction = __webpack_require__(15);
var anObject = __webpack_require__(2);
var rApply = (__webpack_require__(3).Reflect || {}).apply;
var fApply = Function.apply;
// MS Edge argumentsList argument is optional
$export($export.S + $export.F * !__webpack_require__(4)(function () {
  rApply(function () { /* empty */ });
}), 'Reflect', {
  apply: function apply(target, thisArgument, argumentsList) {
    var T = aFunction(target);
    var L = anObject(argumentsList);
    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
  }
});


/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
var $export = __webpack_require__(0);
var create = __webpack_require__(45);
var aFunction = __webpack_require__(15);
var anObject = __webpack_require__(2);
var isObject = __webpack_require__(5);
var fails = __webpack_require__(4);
var bind = __webpack_require__(106);
var rConstruct = (__webpack_require__(3).Reflect || {}).construct;

// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
var NEW_TARGET_BUG = fails(function () {
  function F() { /* empty */ }
  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);
});
var ARGS_BUG = !fails(function () {
  rConstruct(function () { /* empty */ });
});

$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
  construct: function construct(Target, args /* , newTarget */) {
    aFunction(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);
    if (Target == newTarget) {
      // w/o altered newTarget, optimization for 0-4 arguments
      switch (args.length) {
        case 0: return new Target();
        case 1: return new Target(args[0]);
        case 2: return new Target(args[0], args[1]);
        case 3: return new Target(args[0], args[1], args[2]);
        case 4: return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args))();
    }
    // with altered newTarget, not support built-in constructors
    var proto = newTarget.prototype;
    var instance = create(isObject(proto) ? proto : Object.prototype);
    var result = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});


/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
var dP = __webpack_require__(8);
var $export = __webpack_require__(0);
var anObject = __webpack_require__(2);
var toPrimitive = __webpack_require__(30);

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
$export($export.S + $export.F * __webpack_require__(4)(function () {
  // eslint-disable-next-line no-undef
  Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });
}), 'Reflect', {
  defineProperty: function defineProperty(target, propertyKey, attributes) {
    anObject(target);
    propertyKey = toPrimitive(propertyKey, true);
    anObject(attributes);
    try {
      dP.f(target, propertyKey, attributes);
      return true;
    } catch (e) {
      return false;
    }
  }
});


/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.4 Reflect.deleteProperty(target, propertyKey)
var $export = __webpack_require__(0);
var gOPD = __webpack_require__(21).f;
var anObject = __webpack_require__(2);

$export($export.S, 'Reflect', {
  deleteProperty: function deleteProperty(target, propertyKey) {
    var desc = gOPD(anObject(target), propertyKey);
    return desc && !desc.configurable ? false : delete target[propertyKey];
  }
});


/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 26.1.5 Reflect.enumerate(target)
var $export = __webpack_require__(0);
var anObject = __webpack_require__(2);
var Enumerate = function (iterated) {
  this._t = anObject(iterated); // target
  this._i = 0;                  // next index
  var keys = this._k = [];      // keys
  var key;
  for (key in iterated) keys.push(key);
};
__webpack_require__(86)(Enumerate, 'Object', function () {
  var that = this;
  var keys = that._k;
  var key;
  do {
    if (that._i >= keys.length) return { value: undefined, done: true };
  } while (!((key = keys[that._i++]) in that._t));
  return { value: key, done: false };
});

$export($export.S, 'Reflect', {
  enumerate: function enumerate(target) {
    return new Enumerate(target);
  }
});


/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.6 Reflect.get(target, propertyKey [, receiver])
var gOPD = __webpack_require__(21);
var getPrototypeOf = __webpack_require__(22);
var has = __webpack_require__(16);
var $export = __webpack_require__(0);
var isObject = __webpack_require__(5);
var anObject = __webpack_require__(2);

function get(target, propertyKey /* , receiver */) {
  var receiver = arguments.length < 3 ? target : arguments[2];
  var desc, proto;
  if (anObject(target) === receiver) return target[propertyKey];
  if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value')
    ? desc.value
    : desc.get !== undefined
      ? desc.get.call(receiver)
      : undefined;
  if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);
}

$export($export.S, 'Reflect', { get: get });


/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
var gOPD = __webpack_require__(21);
var $export = __webpack_require__(0);
var anObject = __webpack_require__(2);

$export($export.S, 'Reflect', {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
    return gOPD.f(anObject(target), propertyKey);
  }
});


/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.8 Reflect.getPrototypeOf(target)
var $export = __webpack_require__(0);
var getProto = __webpack_require__(22);
var anObject = __webpack_require__(2);

$export($export.S, 'Reflect', {
  getPrototypeOf: function getPrototypeOf(target) {
    return getProto(anObject(target));
  }
});


/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.9 Reflect.has(target, propertyKey)
var $export = __webpack_require__(0);

$export($export.S, 'Reflect', {
  has: function has(target, propertyKey) {
    return propertyKey in target;
  }
});


/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.10 Reflect.isExtensible(target)
var $export = __webpack_require__(0);
var anObject = __webpack_require__(2);
var $isExtensible = Object.isExtensible;

$export($export.S, 'Reflect', {
  isExtensible: function isExtensible(target) {
    anObject(target);
    return $isExtensible ? $isExtensible(target) : true;
  }
});


/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.11 Reflect.ownKeys(target)
var $export = __webpack_require__(0);

$export($export.S, 'Reflect', { ownKeys: __webpack_require__(127) });


/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.12 Reflect.preventExtensions(target)
var $export = __webpack_require__(0);
var anObject = __webpack_require__(2);
var $preventExtensions = Object.preventExtensions;

$export($export.S, 'Reflect', {
  preventExtensions: function preventExtensions(target) {
    anObject(target);
    try {
      if ($preventExtensions) $preventExtensions(target);
      return true;
    } catch (e) {
      return false;
    }
  }
});


/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
var dP = __webpack_require__(8);
var gOPD = __webpack_require__(21);
var getPrototypeOf = __webpack_require__(22);
var has = __webpack_require__(16);
var $export = __webpack_require__(0);
var createDesc = __webpack_require__(40);
var anObject = __webpack_require__(2);
var isObject = __webpack_require__(5);

function set(target, propertyKey, V /* , receiver */) {
  var receiver = arguments.length < 4 ? target : arguments[3];
  var ownDesc = gOPD.f(anObject(target), propertyKey);
  var existingDescriptor, proto;
  if (!ownDesc) {
    if (isObject(proto = getPrototypeOf(target))) {
      return set(proto, propertyKey, V, receiver);
    }
    ownDesc = createDesc(0);
  }
  if (has(ownDesc, 'value')) {
    if (ownDesc.writable === false || !isObject(receiver)) return false;
    existingDescriptor = gOPD.f(receiver, propertyKey) || createDesc(0);
    existingDescriptor.value = V;
    dP.f(receiver, propertyKey, existingDescriptor);
    return true;
  }
  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
}

$export($export.S, 'Reflect', { set: set });


/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.14 Reflect.setPrototypeOf(target, proto)
var $export = __webpack_require__(0);
var setProto = __webpack_require__(78);

if (setProto) $export($export.S, 'Reflect', {
  setPrototypeOf: function setPrototypeOf(target, proto) {
    setProto.check(target, proto);
    try {
      setProto.set(target, proto);
      return true;
    } catch (e) {
      return false;
    }
  }
});


/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/Array.prototype.includes
var $export = __webpack_require__(0);
var $includes = __webpack_require__(60)(true);

$export($export.P, 'Array', {
  includes: function includes(el /* , fromIndex = 0 */) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

__webpack_require__(38)('includes');


/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap
var $export = __webpack_require__(0);
var flattenIntoArray = __webpack_require__(128);
var toObject = __webpack_require__(10);
var toLength = __webpack_require__(9);
var aFunction = __webpack_require__(15);
var arraySpeciesCreate = __webpack_require__(92);

$export($export.P, 'Array', {
  flatMap: function flatMap(callbackfn /* , thisArg */) {
    var O = toObject(this);
    var sourceLen, A;
    aFunction(callbackfn);
    sourceLen = toLength(O.length);
    A = arraySpeciesCreate(O, 0);
    flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
    return A;
  }
});

__webpack_require__(38)('flatMap');


/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatten
var $export = __webpack_require__(0);
var flattenIntoArray = __webpack_require__(128);
var toObject = __webpack_require__(10);
var toLength = __webpack_require__(9);
var toInteger = __webpack_require__(32);
var arraySpeciesCreate = __webpack_require__(92);

$export($export.P, 'Array', {
  flatten: function flatten(/* depthArg = 1 */) {
    var depthArg = arguments[0];
    var O = toObject(this);
    var sourceLen = toLength(O.length);
    var A = arraySpeciesCreate(O, 0);
    flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));
    return A;
  }
});

__webpack_require__(38)('flatten');


/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/mathiasbynens/String.prototype.at
var $export = __webpack_require__(0);
var $at = __webpack_require__(84)(true);

$export($export.P, 'String', {
  at: function at(pos) {
    return $at(this, pos);
  }
});


/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-string-pad-start-end
var $export = __webpack_require__(0);
var $pad = __webpack_require__(129);

$export($export.P, 'String', {
  padStart: function padStart(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
  }
});


/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-string-pad-start-end
var $export = __webpack_require__(0);
var $pad = __webpack_require__(129);

$export($export.P, 'String', {
  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
  }
});


/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
__webpack_require__(53)('trimLeft', function ($trim) {
  return function trimLeft() {
    return $trim(this, 1);
  };
}, 'trimStart');


/***/ }),
/* 291 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
__webpack_require__(53)('trimRight', function ($trim) {
  return function trimRight() {
    return $trim(this, 2);
  };
}, 'trimEnd');


/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/String.prototype.matchAll/
var $export = __webpack_require__(0);
var defined = __webpack_require__(31);
var toLength = __webpack_require__(9);
var isRegExp = __webpack_require__(63);
var getFlags = __webpack_require__(65);
var RegExpProto = RegExp.prototype;

var $RegExpStringIterator = function (regexp, string) {
  this._r = regexp;
  this._s = string;
};

__webpack_require__(86)($RegExpStringIterator, 'RegExp String', function next() {
  var match = this._r.exec(this._s);
  return { value: match, done: match === null };
});

$export($export.P, 'String', {
  matchAll: function matchAll(regexp) {
    defined(this);
    if (!isRegExp(regexp)) throw TypeError(regexp + ' is not a regexp!');
    var S = String(this);
    var flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp);
    var rx = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
    rx.lastIndex = toLength(regexp.lastIndex);
    return new $RegExpStringIterator(rx, S);
  }
});


/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(74)('asyncIterator');


/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(74)('observable');


/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-getownpropertydescriptors
var $export = __webpack_require__(0);
var ownKeys = __webpack_require__(127);
var toIObject = __webpack_require__(20);
var gOPD = __webpack_require__(21);
var createProperty = __webpack_require__(90);

$export($export.S, 'Object', {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
    var O = toIObject(object);
    var getDesc = gOPD.f;
    var keys = ownKeys(O);
    var result = {};
    var i = 0;
    var key, desc;
    while (keys.length > i) {
      desc = getDesc(O, key = keys[i++]);
      if (desc !== undefined) createProperty(result, key, desc);
    }
    return result;
  }
});


/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-values-entries
var $export = __webpack_require__(0);
var $values = __webpack_require__(130)(false);

$export($export.S, 'Object', {
  values: function values(it) {
    return $values(it);
  }
});


/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-values-entries
var $export = __webpack_require__(0);
var $entries = __webpack_require__(130)(true);

$export($export.S, 'Object', {
  entries: function entries(it) {
    return $entries(it);
  }
});


/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var toObject = __webpack_require__(10);
var aFunction = __webpack_require__(15);
var $defineProperty = __webpack_require__(8);

// B.2.2.2 Object.prototype.__defineGetter__(P, getter)
__webpack_require__(7) && $export($export.P + __webpack_require__(70), 'Object', {
  __defineGetter__: function __defineGetter__(P, getter) {
    $defineProperty.f(toObject(this), P, { get: aFunction(getter), enumerable: true, configurable: true });
  }
});


/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var toObject = __webpack_require__(10);
var aFunction = __webpack_require__(15);
var $defineProperty = __webpack_require__(8);

// B.2.2.3 Object.prototype.__defineSetter__(P, setter)
__webpack_require__(7) && $export($export.P + __webpack_require__(70), 'Object', {
  __defineSetter__: function __defineSetter__(P, setter) {
    $defineProperty.f(toObject(this), P, { set: aFunction(setter), enumerable: true, configurable: true });
  }
});


/***/ }),
/* 300 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var toObject = __webpack_require__(10);
var toPrimitive = __webpack_require__(30);
var getPrototypeOf = __webpack_require__(22);
var getOwnPropertyDescriptor = __webpack_require__(21).f;

// B.2.2.4 Object.prototype.__lookupGetter__(P)
__webpack_require__(7) && $export($export.P + __webpack_require__(70), 'Object', {
  __lookupGetter__: function __lookupGetter__(P) {
    var O = toObject(this);
    var K = toPrimitive(P, true);
    var D;
    do {
      if (D = getOwnPropertyDescriptor(O, K)) return D.get;
    } while (O = getPrototypeOf(O));
  }
});


/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var toObject = __webpack_require__(10);
var toPrimitive = __webpack_require__(30);
var getPrototypeOf = __webpack_require__(22);
var getOwnPropertyDescriptor = __webpack_require__(21).f;

// B.2.2.5 Object.prototype.__lookupSetter__(P)
__webpack_require__(7) && $export($export.P + __webpack_require__(70), 'Object', {
  __lookupSetter__: function __lookupSetter__(P) {
    var O = toObject(this);
    var K = toPrimitive(P, true);
    var D;
    do {
      if (D = getOwnPropertyDescriptor(O, K)) return D.set;
    } while (O = getPrototypeOf(O));
  }
});


/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = __webpack_require__(0);

$export($export.P + $export.R, 'Map', { toJSON: __webpack_require__(131)('Map') });


/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = __webpack_require__(0);

$export($export.P + $export.R, 'Set', { toJSON: __webpack_require__(131)('Set') });


/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of
__webpack_require__(71)('Map');


/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-set.of
__webpack_require__(71)('Set');


/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.of
__webpack_require__(71)('WeakMap');


/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.of
__webpack_require__(71)('WeakSet');


/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from
__webpack_require__(72)('Map');


/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-set.from
__webpack_require__(72)('Set');


/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.from
__webpack_require__(72)('WeakMap');


/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.from
__webpack_require__(72)('WeakSet');


/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-global
var $export = __webpack_require__(0);

$export($export.G, { global: __webpack_require__(3) });


/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-global
var $export = __webpack_require__(0);

$export($export.S, 'System', { global: __webpack_require__(3) });


/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/ljharb/proposal-is-error
var $export = __webpack_require__(0);
var cof = __webpack_require__(26);

$export($export.S, 'Error', {
  isError: function isError(it) {
    return cof(it) === 'Error';
  }
});


/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  clamp: function clamp(x, lower, upper) {
    return Math.min(upper, Math.max(lower, x));
  }
});


/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(0);

$export($export.S, 'Math', { DEG_PER_RAD: Math.PI / 180 });


/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(0);
var RAD_PER_DEG = 180 / Math.PI;

$export($export.S, 'Math', {
  degrees: function degrees(radians) {
    return radians * RAD_PER_DEG;
  }
});


/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(0);
var scale = __webpack_require__(133);
var fround = __webpack_require__(113);

$export($export.S, 'Math', {
  fscale: function fscale(x, inLow, inHigh, outLow, outHigh) {
    return fround(scale(x, inLow, inHigh, outLow, outHigh));
  }
});


/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  iaddh: function iaddh(x0, x1, y0, y1) {
    var $x0 = x0 >>> 0;
    var $x1 = x1 >>> 0;
    var $y0 = y0 >>> 0;
    return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
  }
});


/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  isubh: function isubh(x0, x1, y0, y1) {
    var $x0 = x0 >>> 0;
    var $x1 = x1 >>> 0;
    var $y0 = y0 >>> 0;
    return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
  }
});


/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  imulh: function imulh(u, v) {
    var UINT16 = 0xffff;
    var $u = +u;
    var $v = +v;
    var u0 = $u & UINT16;
    var v0 = $v & UINT16;
    var u1 = $u >> 16;
    var v1 = $v >> 16;
    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
  }
});


/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(0);

$export($export.S, 'Math', { RAD_PER_DEG: 180 / Math.PI });


/***/ }),
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(0);
var DEG_PER_RAD = Math.PI / 180;

$export($export.S, 'Math', {
  radians: function radians(degrees) {
    return degrees * DEG_PER_RAD;
  }
});


/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(0);

$export($export.S, 'Math', { scale: __webpack_require__(133) });


/***/ }),
/* 325 */
/***/ (function(module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  umulh: function umulh(u, v) {
    var UINT16 = 0xffff;
    var $u = +u;
    var $v = +v;
    var u0 = $u & UINT16;
    var v0 = $v & UINT16;
    var u1 = $u >>> 16;
    var v1 = $v >>> 16;
    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
  }
});


/***/ }),
/* 326 */
/***/ (function(module, exports, __webpack_require__) {

// http://jfbastien.github.io/papers/Math.signbit.html
var $export = __webpack_require__(0);

$export($export.S, 'Math', { signbit: function signbit(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) != x ? x : x == 0 ? 1 / x == Infinity : x > 0;
} });


/***/ }),
/* 327 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// https://github.com/tc39/proposal-promise-finally

var $export = __webpack_require__(0);
var core = __webpack_require__(29);
var global = __webpack_require__(3);
var speciesConstructor = __webpack_require__(67);
var promiseResolve = __webpack_require__(120);

$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
  var C = speciesConstructor(this, core.Promise || global.Promise);
  var isFunction = typeof onFinally == 'function';
  return this.then(
    isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () { return x; });
    } : onFinally,
    isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () { throw e; });
    } : onFinally
  );
} });


/***/ }),
/* 328 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-promise-try
var $export = __webpack_require__(0);
var newPromiseCapability = __webpack_require__(97);
var perform = __webpack_require__(119);

$export($export.S, 'Promise', { 'try': function (callbackfn) {
  var promiseCapability = newPromiseCapability.f(this);
  var result = perform(callbackfn);
  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
  return promiseCapability.promise;
} });


/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(36);
var anObject = __webpack_require__(2);
var toMetaKey = metadata.key;
var ordinaryDefineOwnMetadata = metadata.set;

metadata.exp({ defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey) {
  ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
} });


/***/ }),
/* 330 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(36);
var anObject = __webpack_require__(2);
var toMetaKey = metadata.key;
var getOrCreateMetadataMap = metadata.map;
var store = metadata.store;

metadata.exp({ deleteMetadata: function deleteMetadata(metadataKey, target /* , targetKey */) {
  var targetKey = arguments.length < 3 ? undefined : toMetaKey(arguments[2]);
  var metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
  if (metadataMap === undefined || !metadataMap['delete'](metadataKey)) return false;
  if (metadataMap.size) return true;
  var targetMetadata = store.get(target);
  targetMetadata['delete'](targetKey);
  return !!targetMetadata.size || store['delete'](target);
} });


/***/ }),
/* 331 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(36);
var anObject = __webpack_require__(2);
var getPrototypeOf = __webpack_require__(22);
var ordinaryHasOwnMetadata = metadata.has;
var ordinaryGetOwnMetadata = metadata.get;
var toMetaKey = metadata.key;

var ordinaryGetMetadata = function (MetadataKey, O, P) {
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if (hasOwn) return ordinaryGetOwnMetadata(MetadataKey, O, P);
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
};

metadata.exp({ getMetadata: function getMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });


/***/ }),
/* 332 */
/***/ (function(module, exports, __webpack_require__) {

var Set = __webpack_require__(123);
var from = __webpack_require__(132);
var metadata = __webpack_require__(36);
var anObject = __webpack_require__(2);
var getPrototypeOf = __webpack_require__(22);
var ordinaryOwnMetadataKeys = metadata.keys;
var toMetaKey = metadata.key;

var ordinaryMetadataKeys = function (O, P) {
  var oKeys = ordinaryOwnMetadataKeys(O, P);
  var parent = getPrototypeOf(O);
  if (parent === null) return oKeys;
  var pKeys = ordinaryMetadataKeys(parent, P);
  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
};

metadata.exp({ getMetadataKeys: function getMetadataKeys(target /* , targetKey */) {
  return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
} });


/***/ }),
/* 333 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(36);
var anObject = __webpack_require__(2);
var ordinaryGetOwnMetadata = metadata.get;
var toMetaKey = metadata.key;

metadata.exp({ getOwnMetadata: function getOwnMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryGetOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });


/***/ }),
/* 334 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(36);
var anObject = __webpack_require__(2);
var ordinaryOwnMetadataKeys = metadata.keys;
var toMetaKey = metadata.key;

metadata.exp({ getOwnMetadataKeys: function getOwnMetadataKeys(target /* , targetKey */) {
  return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
} });


/***/ }),
/* 335 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(36);
var anObject = __webpack_require__(2);
var getPrototypeOf = __webpack_require__(22);
var ordinaryHasOwnMetadata = metadata.has;
var toMetaKey = metadata.key;

var ordinaryHasMetadata = function (MetadataKey, O, P) {
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if (hasOwn) return true;
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
};

metadata.exp({ hasMetadata: function hasMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });


/***/ }),
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(36);
var anObject = __webpack_require__(2);
var ordinaryHasOwnMetadata = metadata.has;
var toMetaKey = metadata.key;

metadata.exp({ hasOwnMetadata: function hasOwnMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryHasOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });


/***/ }),
/* 337 */
/***/ (function(module, exports, __webpack_require__) {

var $metadata = __webpack_require__(36);
var anObject = __webpack_require__(2);
var aFunction = __webpack_require__(15);
var toMetaKey = $metadata.key;
var ordinaryDefineOwnMetadata = $metadata.set;

$metadata.exp({ metadata: function metadata(metadataKey, metadataValue) {
  return function decorator(target, targetKey) {
    ordinaryDefineOwnMetadata(
      metadataKey, metadataValue,
      (targetKey !== undefined ? anObject : aFunction)(target),
      toMetaKey(targetKey)
    );
  };
} });


/***/ }),
/* 338 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask
var $export = __webpack_require__(0);
var microtask = __webpack_require__(96)();
var process = __webpack_require__(3).process;
var isNode = __webpack_require__(26)(process) == 'process';

$export($export.G, {
  asap: function asap(fn) {
    var domain = isNode && process.domain;
    microtask(domain ? domain.bind(fn) : fn);
  }
});


/***/ }),
/* 339 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/zenparsing/es-observable
var $export = __webpack_require__(0);
var global = __webpack_require__(3);
var core = __webpack_require__(29);
var microtask = __webpack_require__(96)();
var OBSERVABLE = __webpack_require__(6)('observable');
var aFunction = __webpack_require__(15);
var anObject = __webpack_require__(2);
var anInstance = __webpack_require__(48);
var redefineAll = __webpack_require__(50);
var hide = __webpack_require__(17);
var forOf = __webpack_require__(49);
var RETURN = forOf.RETURN;

var getMethod = function (fn) {
  return fn == null ? undefined : aFunction(fn);
};

var cleanupSubscription = function (subscription) {
  var cleanup = subscription._c;
  if (cleanup) {
    subscription._c = undefined;
    cleanup();
  }
};

var subscriptionClosed = function (subscription) {
  return subscription._o === undefined;
};

var closeSubscription = function (subscription) {
  if (!subscriptionClosed(subscription)) {
    subscription._o = undefined;
    cleanupSubscription(subscription);
  }
};

var Subscription = function (observer, subscriber) {
  anObject(observer);
  this._c = undefined;
  this._o = observer;
  observer = new SubscriptionObserver(this);
  try {
    var cleanup = subscriber(observer);
    var subscription = cleanup;
    if (cleanup != null) {
      if (typeof cleanup.unsubscribe === 'function') cleanup = function () { subscription.unsubscribe(); };
      else aFunction(cleanup);
      this._c = cleanup;
    }
  } catch (e) {
    observer.error(e);
    return;
  } if (subscriptionClosed(this)) cleanupSubscription(this);
};

Subscription.prototype = redefineAll({}, {
  unsubscribe: function unsubscribe() { closeSubscription(this); }
});

var SubscriptionObserver = function (subscription) {
  this._s = subscription;
};

SubscriptionObserver.prototype = redefineAll({}, {
  next: function next(value) {
    var subscription = this._s;
    if (!subscriptionClosed(subscription)) {
      var observer = subscription._o;
      try {
        var m = getMethod(observer.next);
        if (m) return m.call(observer, value);
      } catch (e) {
        try {
          closeSubscription(subscription);
        } finally {
          throw e;
        }
      }
    }
  },
  error: function error(value) {
    var subscription = this._s;
    if (subscriptionClosed(subscription)) throw value;
    var observer = subscription._o;
    subscription._o = undefined;
    try {
      var m = getMethod(observer.error);
      if (!m) throw value;
      value = m.call(observer, value);
    } catch (e) {
      try {
        cleanupSubscription(subscription);
      } finally {
        throw e;
      }
    } cleanupSubscription(subscription);
    return value;
  },
  complete: function complete(value) {
    var subscription = this._s;
    if (!subscriptionClosed(subscription)) {
      var observer = subscription._o;
      subscription._o = undefined;
      try {
        var m = getMethod(observer.complete);
        value = m ? m.call(observer, value) : undefined;
      } catch (e) {
        try {
          cleanupSubscription(subscription);
        } finally {
          throw e;
        }
      } cleanupSubscription(subscription);
      return value;
    }
  }
});

var $Observable = function Observable(subscriber) {
  anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);
};

redefineAll($Observable.prototype, {
  subscribe: function subscribe(observer) {
    return new Subscription(observer, this._f);
  },
  forEach: function forEach(fn) {
    var that = this;
    return new (core.Promise || global.Promise)(function (resolve, reject) {
      aFunction(fn);
      var subscription = that.subscribe({
        next: function (value) {
          try {
            return fn(value);
          } catch (e) {
            reject(e);
            subscription.unsubscribe();
          }
        },
        error: reject,
        complete: resolve
      });
    });
  }
});

redefineAll($Observable, {
  from: function from(x) {
    var C = typeof this === 'function' ? this : $Observable;
    var method = getMethod(anObject(x)[OBSERVABLE]);
    if (method) {
      var observable = anObject(method.call(x));
      return observable.constructor === C ? observable : new C(function (observer) {
        return observable.subscribe(observer);
      });
    }
    return new C(function (observer) {
      var done = false;
      microtask(function () {
        if (!done) {
          try {
            if (forOf(x, false, function (it) {
              observer.next(it);
              if (done) return RETURN;
            }) === RETURN) return;
          } catch (e) {
            if (done) throw e;
            observer.error(e);
            return;
          } observer.complete();
        }
      });
      return function () { done = true; };
    });
  },
  of: function of() {
    for (var i = 0, l = arguments.length, items = Array(l); i < l;) items[i] = arguments[i++];
    return new (typeof this === 'function' ? this : $Observable)(function (observer) {
      var done = false;
      microtask(function () {
        if (!done) {
          for (var j = 0; j < items.length; ++j) {
            observer.next(items[j]);
            if (done) return;
          } observer.complete();
        }
      });
      return function () { done = true; };
    });
  }
});

hide($Observable.prototype, OBSERVABLE, function () { return this; });

$export($export.G, { Observable: $Observable });

__webpack_require__(47)('Observable');


/***/ }),
/* 340 */
/***/ (function(module, exports, __webpack_require__) {

// ie9- setTimeout & setInterval additional parameters fix
var global = __webpack_require__(3);
var $export = __webpack_require__(0);
var navigator = global.navigator;
var slice = [].slice;
var MSIE = !!navigator && /MSIE .\./.test(navigator.userAgent); // <- dirty ie9- check
var wrap = function (set) {
  return function (fn, time /* , ...args */) {
    var boundArgs = arguments.length > 2;
    var args = boundArgs ? slice.call(arguments, 2) : false;
    return set(boundArgs ? function () {
      // eslint-disable-next-line no-new-func
      (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
    } : fn, time);
  };
};
$export($export.G + $export.B + $export.F * MSIE, {
  setTimeout: wrap(global.setTimeout),
  setInterval: wrap(global.setInterval)
});


/***/ }),
/* 341 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var $task = __webpack_require__(95);
$export($export.G + $export.B, {
  setImmediate: $task.set,
  clearImmediate: $task.clear
});


/***/ }),
/* 342 */
/***/ (function(module, exports, __webpack_require__) {

var $iterators = __webpack_require__(94);
var getKeys = __webpack_require__(43);
var redefine = __webpack_require__(18);
var global = __webpack_require__(3);
var hide = __webpack_require__(17);
var Iterators = __webpack_require__(54);
var wks = __webpack_require__(6);
var ITERATOR = wks('iterator');
var TO_STRING_TAG = wks('toStringTag');
var ArrayValues = Iterators.Array;

var DOMIterables = {
  CSSRuleList: true, // TODO: Not spec compliant, should be false.
  CSSStyleDeclaration: false,
  CSSValueList: false,
  ClientRectList: false,
  DOMRectList: false,
  DOMStringList: false,
  DOMTokenList: true,
  DataTransferItemList: false,
  FileList: false,
  HTMLAllCollection: false,
  HTMLCollection: false,
  HTMLFormElement: false,
  HTMLSelectElement: false,
  MediaList: true, // TODO: Not spec compliant, should be false.
  MimeTypeArray: false,
  NamedNodeMap: false,
  NodeList: true,
  PaintRequestList: false,
  Plugin: false,
  PluginArray: false,
  SVGLengthList: false,
  SVGNumberList: false,
  SVGPathSegList: false,
  SVGPointList: false,
  SVGStringList: false,
  SVGTransformList: false,
  SourceBufferList: false,
  StyleSheetList: true, // TODO: Not spec compliant, should be false.
  TextTrackCueList: false,
  TextTrackList: false,
  TouchList: false
};

for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
  var NAME = collections[i];
  var explicit = DOMIterables[NAME];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  var key;
  if (proto) {
    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = ArrayValues;
    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);
  }
}


/***/ }),
/* 343 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
 * additional grant of patent rights can be found in the PATENTS file in
 * the same directory.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    if (typeof global.process === "object" && global.process.domain) {
      invoke = global.process.domain.bind(invoke);
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // Among the various tricks for obtaining a reference to the global
  // object, this seems to be the most reliable technique that does not
  // use indirect eval (which violates Content Security Policy).
  typeof global === "object" ? global :
  typeof window === "object" ? window :
  typeof self === "object" ? self : this
);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(99)))

/***/ }),
/* 344 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(345);
module.exports = __webpack_require__(29).RegExp.escape;


/***/ }),
/* 345 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/benjamingr/RexExp.escape
var $export = __webpack_require__(0);
var $re = __webpack_require__(346)(/[\\^$*+?.()|[\]{}]/g, '\\$&');

$export($export.S, 'RegExp', { escape: function escape(it) { return $re(it); } });


/***/ }),
/* 346 */
/***/ (function(module, exports) {

module.exports = function (regExp, replace) {
  var replacer = replace === Object(replace) ? function (part) {
    return replace[part];
  } : replace;
  return function (it) {
    return String(it).replace(regExp, replacer);
  };
};


/***/ }),
/* 347 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__logic_cloudec__ = __webpack_require__(348);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__logic_cloudec___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__logic_cloudec__);
/* eslint-disable */

window.cloudEC = new __WEBPACK_IMPORTED_MODULE_0__logic_cloudec___default.a();
/* eslint-enable */

/***/ }),
/* 348 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(11), __webpack_require__(23), __webpack_require__(383), __webpack_require__(14), __webpack_require__(1), __webpack_require__(11)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, enum_1, client_1, tupDeamon_1, serverConfig_1, util_1, enum_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var CloudEC = (function () {
        function CloudEC() {
        }
        CloudEC.prototype.serviceStartUp = function () {
            util_1.default.info("cloudec", "TSDK Service StartUp");
        };
        CloudEC.prototype.serviceShutDown = function () {
            util_1.default.error("cloudec", "TSDK Service is shutdown,please restart it");
        };
        CloudEC.prototype.serviceRecover = function () {
            util_1.default.info("cloudec", "TSDK Service recover");
        };
        CloudEC.prototype.onDeamonReady = function () {
            util_1.default.info("cloudec", "TSDK Deamon is Ready");
        };
        CloudEC.prototype.onDeamonClose = function () {
            util_1.default.error("cloudec", "TSDK Deamon is Closed,please restart it");
        };
        CloudEC.prototype.getVersion = function () {
            var loginInfo = JSON.parse(sessionStorage.cloudEC_loginInfo);
            var versionInfo = loginInfo.versionInfo;
            return "This is " + enum_1.CLOUDEC_SDK_INFO.name + ",version is " + enum_1.CLOUDEC_SDK_INFO.version
                + ", the publish time is " + enum_1.CLOUDEC_SDK_INFO.time + ". This SDK is compatible with version " +
                versionInfo.version + " of the TSDK library, compile time" + versionInfo.compileDate;
        };
        CloudEC.prototype.createClient = function (listeners) {
            this.tupDeamon = new tupDeamon_1.default({ ready: this.onDeamonReady, close: this.onDeamonClose,
                svrAddr: serverConfig_1.CloudEC_SERVERCONFIG.ENTERPRISE_DOMAIN, ssl: serverConfig_1.CloudEC_SERVERCONFIG.IS_WSS });
            var callbacks = {
                serviceStartUp: this.serviceStartUp,
                serviceShutDown: this.serviceShutDown,
                serviceRecover: this.serviceRecover
            };
            this.tupDeamon.setSeviceCallBack(callbacks);
            var client = new client_1.default();
            if (typeof (listeners) === "undefined") {
                return client;
            }
            if (typeof (listeners.onForceUnReg) != "undefined") {
                client.on('ForceUnReg', listeners.onForceUnReg);
            }
            if (typeof (listeners.onChatRecvMsg) != "undefined") {
                client.on('ChatRecvMsg', listeners.onChatRecvMsg);
            }
            if (typeof (listeners.onUpdateAttendeeList) != "undefined") {
                client.on('UpdateAttendeeList', listeners.onUpdateAttendeeList);
            }
            if (typeof (listeners.onSpeakerIdentify) != "undefined") {
                client.on('SpeakerIdentify', listeners.onSpeakerIdentify);
            }
            if (typeof (listeners.onSharedInComing) != "undefined") {
                client.on('SharedInComing', listeners.onSharedInComing);
            }
            if (typeof (listeners.onConfIncoming) != "undefined") {
                client.on('ConfIncoming', listeners.onConfIncoming);
            }
            if (typeof (listeners.onConfConnected) != "undefined") {
                client.on('ConfConnected', listeners.onConfConnected);
            }
            if (typeof (listeners.onLeaveConference) != "undefined") {
                client.on('LeaveConference', listeners.onLeaveConference);
            }
            if (typeof (listeners.onEndConference) != "undefined") {
                client.on('EndConference', listeners.onEndConference);
            }
            if (typeof (listeners.onAsOnSharingState) != "undefined") {
                client.on('AsOnSharingState', listeners.onAsOnSharingState);
            }
            if (typeof (listeners.onAsOnPrivilege) != "undefined") {
                client.on('AsOnPrivilege', listeners.onAsOnPrivilege);
            }
            if (typeof (listeners.onWbDocNew) != "undefined") {
                client.on('WbDocNew', listeners.onWbDocNew);
            }
            if (typeof (listeners.onWbDocDel) != "undefined") {
                client.on('WbDocDel', listeners.onWbDocDel);
            }
            if (typeof (listeners.onError) != "undefined") {
                client.onError(listeners.onError);
            }
            if (typeof (listeners.onCallIncomming) != "undefined") {
                client.on('CallIncomming', listeners.onCallIncomming);
            }
            if (typeof (listeners.onCallRingBack) != "undefined") {
                client.on('CallRingBack', listeners.onCallRingBack);
            }
            if (typeof (listeners.onCallConnected) != "undefined") {
                client.on('CallConnected', listeners.onCallConnected);
            }
            if (typeof (listeners.onCallEnded) != "undefined") {
                client.on('CallEnded', listeners.onCallEnded);
            }
            if (typeof (listeners.onAddVideoRequest) != "undefined") {
                client.on('AddVideoRequest', listeners.onAddVideoRequest);
            }
            if (typeof (listeners.onDelVideoRequest) != "undefined") {
                client.on('DelVideoRequest', listeners.onDelVideoRequest);
            }
            if (typeof (listeners.onCallModifyVideoResult) != "undefined") {
                client.on('CallModifyVideoResult', listeners.onCallModifyVideoResult);
            }
            if (typeof (listeners.onNewServiceRight) != "undefined") {
                client.on('NewServiceRight', listeners.onNewServiceRight);
            }
            if (typeof (listeners.onSetIptServiceResult) != "undefined") {
                client.on('SetIptServiceResult', listeners.onSetIptServiceResult);
            }
            if (typeof (listeners.onCallBldTransferRecvSucRsp) != "undefined") {
                client.on('CallBldTransferRecvSucRsp', listeners.onCallBldTransferRecvSucRsp);
            }
            if (typeof (listeners.onCallBldTransferResult) != "undefined") {
                client.on('CallBldTransferResult', listeners.onCallBldTransferResult);
            }
            if (typeof (listeners.onUserInfoChange) != "undefined") {
                client.on('UserInfoChange', listeners.onUserInfoChange);
            }
            if (typeof (listeners.onAddFriend) != "undefined") {
                client.on('AddFriend', listeners.onAddFriend);
            }
            if (typeof (listeners.onUserStatusList) != "undefined") {
                client.on('UserStatusList', listeners.onUserStatusList);
            }
            if (typeof (listeners.onGroupDismiss) != "undefined") {
                client.on('GroupDismiss', listeners.onGroupDismiss);
            }
            if (typeof (listeners.onGroupInfoChange) != "undefined") {
                client.on('GroupInfoChange', listeners.onGroupInfoChange);
            }
            if (typeof (listeners.onGroupOwnerChange) != "undefined") {
                client.on('GroupOwnerChange', listeners.onGroupOwnerChange);
            }
            if (typeof (listeners.onGroupMemberAdd) != "undefined") {
                client.on('GroupMemberAdd', listeners.onGroupMemberAdd);
            }
            if (typeof (listeners.onGroupMemberDel) != "undefined") {
                client.on('GroupMemberDel', listeners.onGroupMemberDel);
            }
            if (typeof (listeners.onWasAddToGroup) != "undefined") {
                client.on('WasAddToGroup', listeners.onWasAddToGroup);
            }
            if (typeof (listeners.onReceiveInviteJoinGroup) != "undefined") {
                client.on('ReceiveInviteJoinGroup', listeners.onReceiveInviteJoinGroup);
            }
            if (typeof (listeners.onReceiveInviteToGroup) != "undefined") {
                client.on('ReceiveInviteToGroup', listeners.onReceiveInviteToGroup);
            }
            if (typeof (listeners.onGroupOwnerInviteResult) != "undefined") {
                client.on('GroupOwnerInviteResult', listeners.onGroupOwnerInviteResult);
            }
            if (typeof (listeners.onGroupKickout) != "undefined") {
                client.on('GroupKickout', listeners.onGroupKickout);
            }
            if (typeof (listeners.onGroupLeaveResult) != "undefined") {
                client.on('GroupLeaveResult', listeners.onGroupLeaveResult);
            }
            if (typeof (listeners.onMsgSendAck) != "undefined") {
                client.on('MsgSendAck', listeners.onMsgSendAck);
            }
            if (typeof (listeners.onChatNotify) != "undefined") {
                client.on('ChatNotify', listeners.onChatNotify);
            }
            if (typeof (listeners.onChatListNotify) != "undefined") {
                client.on('ChatListNotify', listeners.onChatListNotify);
            }
            if (typeof (listeners.onUnDeliver) != "undefined") {
                client.on('UnDeliver', listeners.onUnDeliver);
            }
            if (typeof (listeners.onWithdrawResult) != "undefined") {
                client.on('WithdrawResult', listeners.onWithdrawResult);
            }
            if (typeof (listeners.onWithdrawNotify) != "undefined") {
                client.on('WithdrawNotify', listeners.onWithdrawNotify);
            }
            if (typeof (listeners.onSendImInput) != "undefined") {
                client.on('SendImInput', listeners.onSendImInput);
            }
            if (typeof (listeners.onSystemBulletin) != "undefined") {
                client.on('SystemBulletin', listeners.onSystemBulletin);
            }
            return client;
        };
        CloudEC.prototype.configure = function (options) {
            if (typeof (options) === "undefined") {
                return;
            }
            if (typeof (options.logLevel) != "undefined") {
                serverConfig_1.CloudEC_SERVERCONFIG.LOG_LEVEL = options.logLevel;
                switch (options.logLevel) {
                    case 0:
                        serverConfig_1.CloudEC_SERVERCONFIG.LOG_IM_LEVEL = enum_2.CLOUDEC_SDK_LOG_LEVEL.LOG_DEBUG;
                        break;
                    case 1:
                        serverConfig_1.CloudEC_SERVERCONFIG.LOG_IM_LEVEL = enum_2.CLOUDEC_SDK_LOG_LEVEL.LOG_INFO;
                        break;
                    case 2:
                        serverConfig_1.CloudEC_SERVERCONFIG.LOG_IM_LEVEL = enum_2.CLOUDEC_SDK_LOG_LEVEL.LOG_WARNING;
                        break;
                    case 3:
                        serverConfig_1.CloudEC_SERVERCONFIG.LOG_IM_LEVEL = enum_2.CLOUDEC_SDK_LOG_LEVEL.LOG_ERROR;
                        break;
                }
            }
            if (typeof (options.logPath) != "undefined") {
                serverConfig_1.CloudEC_SERVERCONFIG.LOG_PATH = options.logPath;
            }
            if (typeof (options.logFileCount) != "undefined") {
                serverConfig_1.CloudEC_SERVERCONFIG.LOG_FILE_COUNT = options.logFileCount;
            }
            if (typeof (options.logFileSize) != "undefined") {
                serverConfig_1.CloudEC_SERVERCONFIG.LOG_FILE_SIZE = options.logFileSize;
            }
            if (typeof (options.imServerVersion) != "undefined") {
                serverConfig_1.CloudEC_SERVERCONFIG.IM_SERVER_VERSION = options.imServerVersion;
            }
            if (typeof (options.domain) != "undefined") {
                serverConfig_1.CloudEC_SERVERCONFIG.ENTERPRISE_DOMAIN = options.domain;
            }
            if (typeof (options.isWithSBC) != "undefined") {
                serverConfig_1.CloudEC_SERVERCONFIG.IS_WITH_SBC = options.isWithSBC;
            }
            if (typeof (options.isTlsSupport) != "undefined") {
                serverConfig_1.CloudEC_SERVERCONFIG.IS_TLS_SUPPORT = options.isTlsSupport;
            }
            if (typeof (options.isWSS) != "undefined") {
                serverConfig_1.CloudEC_SERVERCONFIG.IS_WSS = options.isWSS;
            }
            if (typeof (options.confCtrlProtocol) != "undefined") {
                serverConfig_1.CloudEC_SERVERCONFIG.CONF_CONTROL_PROTOCOL = options.confCtrlProtocol;
            }
            if (typeof (options.dropFrame) != "undefined") {
                serverConfig_1.CloudEC_SERVERCONFIG.DROP_FRAME_COUNT = options.dropFrame;
            }
            if (typeof (options.isAutoAdaptFrame) != "undefined") {
                serverConfig_1.CloudEC_SERVERCONFIG.IS_AUTO_ADAPT_FRAME = options.isAutoAdaptFrame;
            }
            if (typeof (options.videoDisplayMode) != "undefined") {
                serverConfig_1.CloudEC_SERVERCONFIG.VIDEO_DISPLAY_MODE = options.videoDisplayMode;
            }
            if (typeof (options.nativeNeedAttach) != "undefined") {
                serverConfig_1.CloudEC_SERVERCONFIG.NATIVE_NEED_ATTACH = options.nativeNeedAttach;
            }
            if (typeof (options.nativeWindowHeight) != "undefined") {
                serverConfig_1.CloudEC_SERVERCONFIG.NATIVE_WINDOW_HEIGHT = options.nativeWindowHeight;
            }
            if (typeof (options.nativeWindowWidth) != "undefined") {
                serverConfig_1.CloudEC_SERVERCONFIG.NATIVE_WINDOW_WIDTH = options.nativeWindowWidth;
            }
            if (typeof (options.nativeWindowXOffset) != "undefined") {
                serverConfig_1.CloudEC_SERVERCONFIG.NATIVE_WINDOW_X_OFFSET = options.nativeWindowXOffset;
            }
            if (typeof (options.nativeWindowYOffset) != "undefined") {
                serverConfig_1.CloudEC_SERVERCONFIG.NATIVE_WINDOW_Y_OFFSET = options.nativeWindowYOffset;
            }
            if (typeof (options.nativeWindowXOffsetRate) != "undefined") {
                serverConfig_1.CloudEC_SERVERCONFIG.NATIVE_WINDOW_X_OFFSET_RATE = options.nativeWindowXOffsetRate;
            }
            if (typeof (options.nativeWindowYOffsetRate) != "undefined") {
                serverConfig_1.CloudEC_SERVERCONFIG.NATIVE_WINDOW_Y_OFFSET_RATE = options.nativeWindowYOffsetRate;
            }
        };
        return CloudEC;
    }());
    exports.default = CloudEC;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 349 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(12), __webpack_require__(13)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, dispatcher_1, eventInfo_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Call = (function () {
        function Call() {
            this.callID = 0;
            this.isVideo = 0;
        }
        Call.prototype.setCallID = function (call_id) {
            this.callID = call_id;
        };
        Call.prototype.setCallType = function (isVideo) {
            this.isVideo = isVideo;
        };
        Call.prototype.getCallType = function () {
            return this.isVideo;
        };
        Call.prototype.setCallState = function (callState) {
            this.callState = callState;
        };
        Call.prototype.setCallStyle = function (callStyle) {
            this.callStyle = callStyle;
        };
        Call.prototype.setCallee = function (callee) {
            this.callee = callee;
        };
        Call.prototype.getCallee = function () {
            return this.callee;
        };
        Call.prototype.makeCall = function (calleeNumber, callType, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                var evt;
                return __generator(this, function (_a) {
                    evt = { result: false, info: "" };
                    dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CALL_START_CALL, calleeNumber, callType, function (data) {
                        if (data) {
                            evt.result = true;
                            evt.info = "start call success";
                            _this.callID = data.callId;
                        }
                        else {
                            evt.result = false;
                            evt.info = "start call failed";
                        }
                        callback(evt);
                    });
                    return [2];
                });
            });
        };
        Call.prototype.rejectCall = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CALL_REJECT_CALL, this.callID);
                    return [2];
                });
            });
        };
        Call.prototype.acceptCall = function (isVideo) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CALL_ACCEPT_CALL, this.callID, isVideo);
                    return [2];
                });
            });
        };
        Call.prototype.hold = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2];
                });
            });
        };
        Call.prototype.unhold = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2];
                });
            });
        };
        Call.prototype.dialDTMF = function (keyTone) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CALL_SEND_DTMF, this.callID, keyTone);
                    return [2];
                });
            });
        };
        Call.prototype.tans2Video = function () {
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CALL_ADD_VIDEO, this.callID);
        };
        Call.prototype.tans2Audio = function () {
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CALL_DEL_VIDEO, this.callID);
        };
        Call.prototype.answerSwitch = function (isAccept) {
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CALL_REPLY_ADD_VIDEO, this.callID, isAccept);
        };
        Call.prototype.toString = function () {
        };
        Call.prototype.videoMute = function (bMute, callID) {
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_VIDEO_SWITCH, callID, (bMute ? 1 : 0), function (ret) {
                if (ret.result == true) {
                    var localView = document.getElementById("CloudEC:localCanvas");
                    var remoteView = document.getElementById("CloudEC:remoteCanvas");
                    var localContext = localView.getContext('webgl');
                    var remoteContext = remoteView.getContext('webgl');
                    localContext.clearColor(0.7804, 0.7804, 0.7804, 1.0);
                    localContext.clear(localContext.COLOR_BUFFER_BIT);
                    remoteContext.clearColor(0.0, 0.0, 0.0, 1.0);
                    remoteContext.clear(remoteContext.COLOR_BUFFER_BIT);
                }
            });
        };
        Call.prototype.micMute = function (bMute, callID) {
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_MIC_SWITCH, callID, bMute ? 1 : 0, function (ret) { });
        };
        Call.prototype.transfer2Conf = function (confParam, callID, callback) {
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_P2P_TRANSFER_TO_CONF, confParam, callID, callback);
        };
        return Call;
    }());
    exports.default = Call;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 350 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(351), __webpack_require__(137), __webpack_require__(139), __webpack_require__(134), __webpack_require__(142), __webpack_require__(143)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, loginService_1, callManager_1, confManager_1, cmptManager_1, eaddrManager_1, imManager_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Initialization = (function () {
        function Initialization() {
        }
        Initialization.init = function () {
            this.initModel();
        };
        Initialization.uninit = function () {
            delete Initialization.models;
        };
        Initialization.initModel = function () {
            if (!Initialization.models["LoginService"]) {
                Initialization.models["LoginService"] = new loginService_1.default();
            }
            if (!Initialization.models["CallManager"]) {
                Initialization.models["CallManager"] = new callManager_1.default();
            }
            if (!Initialization.models["ConfManager"]) {
                Initialization.models["ConfManager"] = confManager_1.default.getInstance();
            }
            if (!Initialization.models["CmptManager"]) {
                Initialization.models["CmptManager"] = cmptManager_1.default.getInstance();
            }
            if (!Initialization.models["EaddrManager"]) {
                Initialization.models["EaddrManager"] = eaddrManager_1.default.getInstance();
            }
            if (!Initialization.models["ImManager"]) {
                Initialization.models["ImManager"] = imManager_1.default.getInstance();
            }
        };
        Initialization.models = {};
        return Initialization;
    }());
    exports.default = Initialization;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 351 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(13), __webpack_require__(12), __webpack_require__(356), __webpack_require__(357), __webpack_require__(139), __webpack_require__(134), __webpack_require__(142), __webpack_require__(143), __webpack_require__(28), __webpack_require__(39), __webpack_require__(375), __webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, eventInfo_1, dispatcher_1, uportal_1, sipServer_1, confManager_1, cmptManager_1, eaddrManager_1, imManager_1, observer_1, tupLoginWrapper_1, anonyConf_1, util_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var LoginService = (function () {
        function LoginService() {
            this.logic_actions_list = {};
            var self = this;
            this.uPortal = new uportal_1.default();
            this.sipServer = new sipServer_1.default();
            this.anonyConf = new anonyConf_1.default();
            this.confManager = confManager_1.default.getInstance();
            this.cmptManager = cmptManager_1.default.getInstance();
            this.eaddrManager = eaddrManager_1.default.getInstance();
            this.imManager = imManager_1.default.getInstance();
            this.logic_actions_list["loginReq"] = [];
            this.logic_actions_list["loginReq"].push(this.uPortal);
            this.logic_actions_list["loginReq"].push(this.sipServer);
            this.logic_actions_list["loginReq"].push(this.confManager);
            this.logic_actions_list["loginReq"].push(this.cmptManager);
            this.logic_actions_list["loginReq"].push(this.eaddrManager);
            this.logic_actions_list["loginReq"].push(this.imManager);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_LOGIN_REQ, self.loginReq, self);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_LOGOUT_REQ, self.logoutReq, self);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_SET_PROXY_REQ, self.setProxyReq, self);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_CONF_JOIN_ANONYCONF, self.joinAnonymousConf, self);
            dispatcher_1.default.register(eventInfo_1.SDK_EVENT_ID.SDK_SIP_DEREGISTER_ANONYCONF, self.sipRegisterAnonyConf, self);
        }
        LoginService.prototype.loginReq = function (eventType, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var logics, length, i, logic, ret, cloudEC_loginInfo, loginInfo, evt;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            logics = this.logic_actions_list['loginReq'];
                            if (!logics)
                                return [2];
                            length = logics.length;
                            i = 0;
                            _a.label = 1;
                        case 1:
                            if (!(i < length)) return [3, 4];
                            logic = logics[i];
                            return [4, logic.do_action()];
                        case 2:
                            ret = _a.sent();
                            if (!ret.result) {
                                callback(ret);
                                return [2];
                            }
                            _a.label = 3;
                        case 3:
                            i++;
                            return [3, 1];
                        case 4:
                            cloudEC_loginInfo = sessionStorage.cloudEC_loginInfo;
                            loginInfo = JSON.parse(cloudEC_loginInfo);
                            evt = { result: true, info: loginInfo };
                            util_1.default.debug("loginService", "exist loginReq");
                            callback(evt);
                            return [2];
                    }
                });
            });
        };
        LoginService.prototype.logoutReq = function (eventType) {
            return __awaiter(this, void 0, void 0, function () {
                var cloudEC_loginInfo, loginInfo, isBuildStgSuc;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            cloudEC_loginInfo = sessionStorage.cloudEC_loginInfo;
                            loginInfo = JSON.parse(cloudEC_loginInfo);
                            isBuildStgSuc = loginInfo.isBuildStgSuc;
                            return [4, this.sipServer.sipserverDerigister()];
                        case 1:
                            _a.sent();
                            return [4, this.imManager.logout()];
                        case 2:
                            _a.sent();
                            if (!isBuildStgSuc) return [3, 4];
                            return [4, this.uPortal.destroyStgTunnel()];
                        case 3:
                            _a.sent();
                            _a.label = 4;
                        case 4: return [4, tupLoginWrapper_1.default.getInstance().uninit()];
                        case 5:
                            _a.sent();
                            observer_1.default.unsubsribleAll();
                            sessionStorage.removeItem("cloudEC_loginInfo");
                            sessionStorage.removeItem("cloudEC_proxy");
                            location.reload();
                            return [2];
                    }
                });
            });
        };
        LoginService.prototype.setProxyReq = function (eventType, proxyParam, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var ret, evt;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, tupLoginWrapper_1.default.getInstance().setProxy(proxyParam)];
                        case 1:
                            ret = _a.sent();
                            util_1.default.debug("loginService", "setProxyReq, ret=" + JSON.stringify(ret));
                            evt = { result: true, info: null };
                            callback(evt);
                            util_1.default.debug("loginService", "exist setProxyReq");
                            return [2];
                    }
                });
            });
        };
        LoginService.prototype.joinAnonymousConf = function (event, anonymousConfParam, serverInfo, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var ret, cloudEC_loginInfo, loginInfo, evt;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.anonyConf.do_actionAnonyLogin(anonymousConfParam, serverInfo)];
                        case 1:
                            ret = _a.sent();
                            if (!ret.result) {
                                callback(ret);
                                return [2];
                            }
                            return [4, this.sipServer.do_action()];
                        case 2:
                            ret = _a.sent();
                            if (!ret.result) {
                                callback(ret);
                                return [2];
                            }
                            return [4, this.confManager.do_action()];
                        case 3:
                            ret = _a.sent();
                            if (!ret.result) {
                                callback(ret);
                                return [2];
                            }
                            return [4, this.cmptManager.do_action()];
                        case 4:
                            ret = _a.sent();
                            if (!ret.result) {
                                callback(ret);
                                return [2];
                            }
                            return [4, this.anonyConf.accessReservedConf(anonymousConfParam.callType)];
                        case 5:
                            _a.sent();
                            cloudEC_loginInfo = sessionStorage.cloudEC_loginInfo;
                            loginInfo = JSON.parse(cloudEC_loginInfo);
                            evt = { result: true, info: loginInfo };
                            callback(evt);
                            return [2];
                    }
                });
            });
        };
        LoginService.prototype.sipRegisterAnonyConf = function (eventType) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.sipServer.sipserverDerigister()];
                        case 1:
                            _a.sent();
                            return [4, this.anonyConf.destroyStgTunnel()];
                        case 2:
                            _a.sent();
                            observer_1.default.unsubsribleAll();
                            sessionStorage.removeItem("cloudEC_loginInfo");
                            return [2];
                    }
                });
            });
        };
        return LoginService;
    }());
    exports.default = LoginService;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 352 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(353), __webpack_require__(39), __webpack_require__(14), __webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, tupCmpt_1, tupLoginWrapper_1, serverConfig_1, util_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TupCmptWrapper = (function () {
        function TupCmptWrapper() {
            if (TupCmptWrapper._instance) {
                throw new Error("Error: Instantiation failed: Use tupCmptWrapper.getInstance() instead of new.");
            }
            TupCmptWrapper._instance = this;
        }
        TupCmptWrapper.prototype.build = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    util_1.default.info("tupCmptWrapper", "step in tupCmptWrapper to build");
                    if (!TupCmptWrapper.tupCmpt) {
                        TupCmptWrapper.tupCmpt = new tupCmpt_1.default({
                            socket: tupLoginWrapper_1.default.tupUniSock
                        });
                    }
                    return [2];
                });
            });
        };
        TupCmptWrapper.prototype.getPromise = function () {
            var p = {};
            p.promise = new Promise(function (resolve, reject) {
                p.resolve = resolve;
                p.reject = reject;
            });
            return p;
        };
        TupCmptWrapper.getInstance = function () {
            return TupCmptWrapper._instance;
        };
        TupCmptWrapper.prototype.logStart = function () {
            var callback = { response: {} };
            var promise = new Promise(function (resolve, reject) {
                callback.response = function (data) {
                    resolve();
                };
            });
            TupCmptWrapper.tupCmpt.logStart(serverConfig_1.CloudEC_SERVERCONFIG.LOG_PATH, serverConfig_1.CloudEC_SERVERCONFIG.LOG_FILE_COUNT, serverConfig_1.CloudEC_SERVERCONFIG.LOG_LEVEL, serverConfig_1.CloudEC_SERVERCONFIG.LOG_FILE_SIZE, (callback));
            return promise;
        };
        TupCmptWrapper.prototype.getcpuUsage = function (timeInterval) {
            var cpuUsagePromise = this.getPromise();
            var callbacks = {
                response: function (data) {
                    if (data.result == 0) {
                        util_1.default.info("tupCmptWrapper", "get cpu usage success");
                        cpuUsagePromise.resolve(data);
                    }
                    else {
                        util_1.default.error("tupCmptWrapper", "get cpu usage failed: " + JSON.stringify(data));
                        cpuUsagePromise.reject("get cpu usage failed :" + JSON.stringify(data));
                    }
                }
            };
            TupCmptWrapper.tupCmpt.cpuUsage(timeInterval, callbacks);
            return cpuUsagePromise.promise;
        };
        TupCmptWrapper.prototype.getMemoryUsage = function (timeInterval) {
            var memoryUsagePromise = this.getPromise();
            var callbacks = {
                response: function (data) {
                    if (data.result == 0) {
                        util_1.default.info("tupCmptWrapper", "get memory usage success");
                        memoryUsagePromise.resolve(data);
                    }
                    else {
                        util_1.default.error("tupCmptWrapper", "get memory usage failed: " + JSON.stringify(data));
                        memoryUsagePromise.reject("get memory usage failed :" + JSON.stringify(data));
                    }
                }
            };
            TupCmptWrapper.tupCmpt.memoryUsage(timeInterval, callbacks);
            return memoryUsagePromise.promise;
        };
        TupCmptWrapper._instance = new TupCmptWrapper();
        return TupCmptWrapper;
    }());
    exports.default = TupCmptWrapper;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 353 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, util_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TUPCmpt = (function () {
        function TUPCmpt(opts) {
            var _this = this;
            this.rspFuncs = new Array();
            this.notifyFuncs = new Array();
            this.wsocket = {};
            this.logStart = function (log_path, file_count, log_level, max_size_kb, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[1] = callbacks.response;
                }
                var data = {
                    "cmd": 1179649,
                    "description": "tup_cmpt_log_start",
                    "param": {
                        "log_path": log_path, "file_count": file_count, "log_level": log_level, "max_size_kb": max_size_kb
                    }
                };
                _this.sendData(data);
            };
            this.logStop = function (callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[2] = callbacks.response;
                }
                var data = {
                    "cmd": 1179650,
                    "description": "tup_cmpt_log_stop",
                };
                _this.sendData(data);
            };
            this.createHandle = function (type, digit_map, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[3] = callbacks.response;
                }
                var data = {
                    "cmd": 1179651,
                    "description": "tup_digitmap_create_handle",
                    "param": {
                        "type": type,
                        "digit_map": digit_map
                    }
                };
                _this.sendData(data);
            };
            this.destroyHandle = function (handle, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[4] = callbacks.response;
                }
                var data = {
                    "cmd": 1179652,
                    "description": "tup_digitmap_create_handle",
                    "param": {
                        "handle": handle
                    }
                };
                _this.sendData(data);
            };
            this.match = function (handle, input_num, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[5] = callbacks.response;
                }
                var data = {
                    "cmd": 1179653,
                    "description": "tup_digitmap_match",
                    "param": {
                        "handle": handle,
                        "input_num": input_num,
                    }
                };
                _this.sendData(data);
            };
            this.checkCert = function (certfile_path, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[6] = callbacks.response;
                }
                var data = {
                    "cmd": 1179654,
                    "description": "tup_cmpt_check_certificate_overdue",
                    "param": {
                        "certfile_path": certfile_path,
                    }
                };
                _this.sendData(data);
            };
            this.verifyCert = function (certfile_path, verify_info, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[7] = callbacks.response;
                }
                var data = {
                    "cmd": 1179655,
                    "description": "tup_cmpt_verify_certificate",
                    "param": {
                        "certfile_path": certfile_path,
                        "verify_info": verify_info
                    }
                };
                _this.sendData(data);
            };
            this.cpuUsage = function (time_interval, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[7] = callbacks.response;
                }
                var data = {
                    "cmd": 1179657,
                    "description": "tup_cmpt_get_cpu_usage",
                    "param": {
                        "time_interval": time_interval
                    }
                };
                _this.sendData(data);
            };
            this.memoryUsage = function (time_interval, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[10] = callbacks.response;
                }
                var data = {
                    "cmd": 1179658,
                    "description": "tup_cmpt_get_meomory_usage",
                    "param": {
                        "time_interval": time_interval
                    }
                };
                _this.sendData(data);
            };
            this.section_id = 0x120000;
            this.name = "Cmpt";
            this.notifyFuncs = new Array();
            this.rspFuncs = new Array();
            var serviceAddr = opts.svrAddr || "127.0.0.1";
            if (opts.socket) {
                this.uniSocket = opts.socket;
                this.uniSocket.registerService(this);
            }
            else {
                var pcol = "ws://";
                if (opts.ssl === 1) {
                    pcol = "wss://";
                }
                this.wsocket = new WebSocket(pcol + serviceAddr + ":7684", "tup_cmpt_service_protocol");
                this.wsocket.onopen = opts.ready;
                this.wsocket.onclose = opts.close;
                this.wsocket.onmessage = function (msg) {
                    var data = JSON.parse(msg.data);
                    util_1.default.debug("tupCmpt", msg.data);
                    _this.msgProcessor(data);
                };
            }
        }
        ;
        TUPCmpt.prototype.msgProcessor = function (data) {
            if (data.notify > 0) {
                var notifyIdx = data.notify & 0x7fff;
                if (typeof this.notifyFuncs[notifyIdx] == "function") {
                    this.notifyFuncs[notifyIdx](data);
                }
            }
            if (data.rsp > 0) {
                var rspIdx = data.rsp & 0x7fff;
                if (typeof this.rspFuncs[rspIdx] == "function")
                    this.rspFuncs[rspIdx](data);
            }
        };
        TUPCmpt.prototype.sendData = function (data) {
            var sendStr = JSON.stringify(data);
            if (this.uniSocket) {
                this.uniSocket.sendData(sendStr);
            }
            else {
                this.wsocket.send(sendStr);
            }
        };
        ;
        return TUPCmpt;
    }());
    exports.default = TUPCmpt;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 354 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, util_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TUPLogin = (function () {
        function TUPLogin(opts) {
            var _this = this;
            this.notifyFuncs = [];
            this.rspFuncs = [];
            this.wsocket = {};
            this.msgProcessor = function (data) {
                if (data.notify > 0) {
                    var notifyIdx = data.notify & 0x7fff;
                    if (typeof _this.notifyFuncs[notifyIdx] == "function") {
                        _this.notifyFuncs[notifyIdx](data);
                    }
                }
                if (data.rsp > 0) {
                    var rspIdx = data.rsp & 0x7fff;
                    if (typeof _this.rspFuncs[rspIdx] == "function")
                        _this.rspFuncs[rspIdx](data);
                }
            };
            this.downloadconfig = function (file_path, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[26] = callbacks.response;
                }
                if (callbacks && typeof callbacks.onDownloadConfig == "function") {
                    _this.notifyFuncs[13] = callbacks.onDownloadConfig;
                }
                var data = {
                    "cmd": 327706,
                    "description": "tup_login_download_config",
                    "param": {
                        "file_path": file_path
                    }
                };
                _this.sendData(data);
            };
            this.getprojectcode = function (param, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[27] = callbacks.response;
                }
                if (callbacks && typeof callbacks.onGetProjectionCode == "function") {
                    _this.notifyFuncs[22] = callbacks.onGetProjectionCode;
                }
                var data = {
                    "cmd": 327707,
                    "description": "tup_login_get_projection_code",
                    "param": param
                };
                _this.sendData(data);
            };
            this.getredirectaddr = function (server, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[28] = callbacks.response;
                }
                if (callbacks && typeof callbacks.onGetRedirectAddr == "function") {
                    _this.notifyFuncs[20] = callbacks.onGetRedirectAddr;
                }
                var data = {
                    "cmd": 327708,
                    "description": "tup_login_get_redirect_addr",
                    "param": {
                        "server": server
                    }
                };
                _this.sendData(data);
            };
            this.setcipher = function (cipherlist, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[29] = callbacks.response;
                }
                var data = {
                    "cmd": 327709,
                    "description": "tup_login_set_cipher",
                    "param": {
                        "cipherlist": cipherlist
                    }
                };
                _this.sendData(data);
            };
            this.updatestgauthinfo = function (auth_info, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[23] = callbacks.response;
                }
                var data = {
                    "cmd": 327703,
                    "description": "tup_login_update_stg_auth_info",
                    "param": auth_info
                };
                _this.sendData(data);
                data.param.auth_info = "";
            };
            this.setcfg = function (param, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[2] = callbacks.response;
                }
                var data = {
                    "cmd": 327682,
                    "description": "tup_login_set_cfg",
                    "param": param
                };
                _this.sendData(data);
            };
            this.section_id = 0x50000;
            this.name = "Login";
            this.notifyFuncs = new Array();
            this.rspFuncs = new Array();
            var serviceAddr = opts.svrAddr || "127.0.0.1";
            var pcol = "ws://";
            if (opts.ssl === 1) {
                pcol = "wss://";
            }
            if (opts.socket) {
                this.uniSocket = opts.socket;
                this.uniSocket.registerService(this);
            }
            else {
                this.wsocket = new WebSocket(pcol + serviceAddr + ":7684", "tup_login_service_protocol");
                this.wsocket.onopen = opts.ready;
                this.wsocket.onclose = opts.close;
                this.wsocket.onmessage = function (msg) {
                    var data = JSON.parse(msg.data);
                    util_1.default.debug("tupLogin", msg.data);
                    _this.msgProcessor(data);
                };
            }
        }
        ;
        TUPLogin.prototype.sendData = function (data) {
            var sendStr = JSON.stringify(data);
            if (this.uniSocket)
                this.uniSocket.sendData(sendStr);
            else
                this.wsocket.send(sendStr);
        };
        ;
        TUPLogin.prototype.setInitParam = function (init_param, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[18] = callbacks.response;
            }
            var data = {
                "cmd": 327698,
                "description": "tup_login_set_init_param",
                "param": {
                    "init_param": init_param
                }
            };
            this.sendData(data);
        };
        ;
        TUPLogin.prototype.logStart = function (log_path, file_count, log_level, max_size_kb, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[15] = callbacks.response;
            }
            var data = {
                "cmd": 327695,
                "description": "tup_login_log_start",
                "param": {
                    "log_path": log_path, "file_count": file_count, "log_level": log_level, "max_size_kb": max_size_kb
                }
            };
            this.sendData(data);
        };
        ;
        TUPLogin.prototype.logStop = function (callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[16] = callbacks.response;
            }
            var data = {
                "cmd": 327696,
                "description": "tup_login_log_stop"
            };
            this.sendData(data);
        };
        ;
        TUPLogin.prototype.init = function (cert_path, verify_mode, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[13] = callbacks.response;
            }
            var data = {
                "cmd": 327693,
                "description": "tup_login_init",
                "param": {
                    "cert_path": cert_path, "verify_mode": verify_mode
                }
            };
            this.sendData(data);
        };
        ;
        TUPLogin.prototype.uninit = function (callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[14] = callbacks.response;
            }
            var data = {
                "cmd": 327694,
                "description": "tup_login_uninit"
            };
            this.sendData(data);
        };
        ;
        TUPLogin.prototype.subscribeConfig = function (server_info, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[1] = callbacks.response;
            }
            var data = {
                "cmd": 327684,
                "description": "tup_login_subscribe_config",
                "param": {
                    "server_info": server_info
                }
            };
            this.sendData(data);
        };
        ;
        TUPLogin.prototype.setLicenseManageParam = function (license_manage_param, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[5] = callbacks.response;
            }
            var data = {
                "cmd": 327685,
                "description": "tup_login_set_license_manage_param",
                "param": {
                    "license_manage_param": license_manage_param
                }
            };
            this.sendData(data);
        };
        ;
        TUPLogin.prototype.active = function (server_info, ePlatformType, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[9] = callbacks.response;
            }
            var data = {
                "cmd": 327689,
                "description": "tup_login_active",
                "param": {
                    "server_info": server_info, "ePlatformType": ePlatformType
                }
            };
            this.sendData(data);
        };
        ;
        TUPLogin.prototype.searchServer = function (auth_server_info, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[10] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onSearchServerResult == "function") {
                this.notifyFuncs[8] = callbacks.onSearchServerResult;
            }
            var data = {
                "cmd": 327690,
                "description": "tup_login_search_server",
                "param": {
                    "auth_server_info": auth_server_info
                }
            };
            this.sendData(data);
        };
        ;
        TUPLogin.prototype.authorize = function (authorize_param, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[11] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onUportalAuthResult == "function") {
                this.notifyFuncs[10] = callbacks.onUportalAuthResult;
            }
            if (callbacks && typeof callbacks.onRefreshTokenResult == "function") {
                this.notifyFuncs[11] = callbacks.onRefreshTokenResult;
            }
            if (callbacks && typeof callbacks.IMSTokenRefresh == "function") {
                this.notifyFuncs[18] = callbacks.IMSTokenRefresh;
            }
            if (callbacks && typeof callbacks.onMediaxAuthResult == "function") {
                this.notifyFuncs[9] = callbacks.onMediaxAuthResult;
            }
            if (callbacks && typeof callbacks.onSMCAuthResult == "function") {
                this.notifyFuncs[14] = callbacks.onSMCAuthResult;
            }
            var data = {
                "cmd": 327691,
                "description": "tup_login_authorize",
                "param": {
                    "authorize_param": authorize_param
                }
            };
            this.sendData(data);
            data.param.authorize_param = "";
        };
        ;
        TUPLogin.prototype.refreshToken = function (callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[12] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onRefreshTokenResult == "function") {
                this.notifyFuncs[11] = callbacks.onRefreshTokenResult;
            }
            var data = {
                "cmd": 327692,
                "description": "tup_login_refresh_token"
            };
            this.sendData(data);
        };
        ;
        TUPLogin.prototype.firewallDetect = function (detect_server, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[19] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onFirewallDetectResult == "function") {
                this.notifyFuncs[15] = callbacks.onFirewallDetectResult;
            }
            var data = {
                "cmd": 327699,
                "description": "tup_login_firewall_detect",
                "param": {
                    "detect_server": detect_server
                }
            };
            this.sendData(data);
        };
        ;
        TUPLogin.prototype.buildStgTunnel = function (server, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[20] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onStgBuildTunnelResult == "function") {
                this.notifyFuncs[16] = callbacks.onStgBuildTunnelResult;
            }
            var data = {
                "cmd": 327700,
                "description": "tup_login_build_stg_tunnel",
                "param": {
                    "server": server
                }
            };
            this.sendData(data);
            data.param.server = "";
        };
        ;
        TUPLogin.prototype.destoryStgTunnel = function (callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[21] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onStgDestoryTunnelResult == "function") {
                this.notifyFuncs[17] = callbacks.onStgDestoryTunnelResult;
            }
            var data = {
                "cmd": 327701,
                "description": "tup_login_destory_stg_tunnel"
            };
            this.sendData(data);
        };
        ;
        TUPLogin.prototype.getLicenseType = function (callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[6] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onGetLicenseTypeResult == "function") {
                this.notifyFuncs[2] = callbacks.onGetLicenseTypeResult;
            }
            var data = {
                "cmd": 327686,
                "description": "tup_login_get_license_type"
            };
            this.sendData(data);
        };
        ;
        TUPLogin.prototype.applyLicense = function (callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[7] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onApplyLicenseResult == "function") {
                this.notifyFuncs[3] = callbacks.onApplyLicenseResult;
            }
            var data = {
                "cmd": 327687,
                "description": "tup_login_apply_license"
            };
            this.sendData(data);
        };
        ;
        TUPLogin.prototype.releaseLicense = function (callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[8] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onReleaseLicenseResult == "function") {
                this.notifyFuncs[5] = callbacks.onReleaseLicenseResult;
            }
            var data = {
                "cmd": 327688,
                "description": "tup_login_release_license"
            };
            this.sendData(data);
        };
        ;
        TUPLogin.prototype.setProxy = function (proxy_param, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[22] = callbacks.response;
            }
            var data = {
                "cmd": 327702,
                "description": "tup_login_set_proxy",
                "param": {
                    proxy_param: proxy_param
                }
            };
            this.sendData(data);
            data.param.proxy_param = "";
        };
        ;
        TUPLogin.prototype.getBestLocalIp = function (param, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[24] = callbacks.response;
            }
            var data = {
                "cmd": 327704,
                "description": "tup_login_get_local_ip",
                "param": param
            };
            this.sendData(data);
        };
        ;
        TUPLogin.prototype.getSiteInfo = function (params, callbacks) {
            if (callbacks && typeof callbacks.onGetEndPointMsg == "function") {
                this.notifyFuncs[25] = callbacks.onGetEndPointMsg;
            }
            var data = {
                "cmd": 327705,
                "description": "tup_login_get_site_info",
                "param": {
                    "get_site_info_param": params
                }
            };
            this.sendData(data);
        };
        ;
        TUPLogin.prototype.logSetParams = function (log_path, file_count, log_level, max_size_kb, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[31] = callbacks.response;
            }
            var data = {
                "cmd": 0x5001F,
                "description": "tup_login_set_log_params",
                "param": {
                    "log_path": log_path, "file_count": file_count, "log_level": log_level, "max_size_kb": max_size_kb
                }
            };
            this.sendData(data);
        };
        ;
        TUPLogin.prototype.getTempUserInfo = function (confinfo_param, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[34] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onGetTempUserResult == "function") {
                this.notifyFuncs[26] = callbacks.onGetTempUserResult;
            }
            var data = {
                "cmd": 327714,
                "description": "tup_login_get_tempuserinfo_from_confinfo",
                "param": {
                    "confinfo_param": confinfo_param
                }
            };
            this.sendData(data);
            data.param.confinfo_param = "";
        };
        ;
        return TUPLogin;
    }());
    exports.default = TUPLogin;
    ;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 355 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(1), __webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, util_1, util) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TUPUniSock = (function () {
        function TUPUniSock(opts) {
            var _this = this;
            this.wsocket = {};
            this.sendData = function (data) {
                _this.wsocket.send(data);
            };
            this.registerService = function (service) {
                if (service && service.section_id)
                    _this.serviceMap.set(service.section_id, service);
                else
                    util_1.default.info("tupUniCmdSocket", "service without section id is not available for unicmd");
            };
            this.serviceMap = new Map();
            var serviceAddr = opts.svrAddr || "127.0.0.1";
            var pcol = "ws://";
            if (opts.ssl === 1) {
                pcol = "wss://";
            }
            this.wsocket = new WebSocket(pcol + serviceAddr + ":7684", "tup_unicmd_service_protocol");
            this.wsocket.onopen = opts.ready;
            this.wsocket.onclose = opts.close;
            this.wsocket.onmessage = function (msg) {
                var data = JSON.parse(msg.data);
                var logInfo = util.replaceLogInfo(data);
                util_1.default.debug("tupUniCmdSocket", logInfo);
                if (data.notify > 0) {
                    var section = data.notify & 0xff0000;
                    if (_this.serviceMap.get(section)) {
                        _this.serviceMap.get(section).msgProcessor(data);
                    }
                }
                if (data.rsp > 0) {
                    var section = data.rsp & 0xff0000;
                    if (_this.serviceMap.get(section)) {
                        _this.serviceMap.get(section).msgProcessor(data);
                    }
                }
            };
        }
        ;
        TUPUniSock.prototype.closeChannel = function () {
            util_1.default.error("tupUniCmdSocket", "TUPUniSock close");
            this.wsocket.close();
        };
        return TUPUniSock;
    }());
    exports.default = TUPUniSock;
    ;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 356 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(39), __webpack_require__(11), __webpack_require__(14), __webpack_require__(1), __webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, tupLoginWrapper_1, enum_1, serverConfig_1, util, util_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Uportal = (function () {
        function Uportal() {
            var _this = this;
            this.updateSiteInfo = function (ret) {
                var siteInfo = ret.uportal_authorize_result.site_info;
                if (siteInfo && siteInfo[0]) {
                    var _a = siteInfo[0], num_of_server = _a.num_of_server, access_server = _a.access_server, tms_account = _a.tms_account, tms_password = _a.tms_password, tms_pwd = _a.tms_pwd;
                    var sipUri = "", sipTlsUri = "", svnUri = "", httpsProxy = "", eserverUri = "", stgUri = "", stgAccount = "", stgPassword = "", sipStgUri = "", isSiptls = 0, isSrtp = 0, eserverStgUri = "", maaUri = "";
                    var tmsServer = "", tmsAccount = "", tmsPwd = "", tmsPassword = "";
                    var dataUrl = "";
                    var passcode = "";
                    for (var i = 0; i < num_of_server; i++) {
                        if (!access_server || !access_server[i]) {
                            continue;
                        }
                        isSiptls = access_server[0].is_siptls;
                        isSrtp = access_server[0].is_srtp;
                        sipUri += access_server[i].sip_uri;
                        sipTlsUri = access_server[0].sip_tls_uri;
                        svnUri += access_server[i].svn_uri;
                        httpsProxy += access_server[i].httpsproxy_uri;
                        stgUri += access_server[i].stg_info.stg_uri;
                        sipStgUri += access_server[i].stg_info.sip_stg_uri;
                        eserverStgUri += access_server[i].stg_info.eserver_stg_uri;
                        stgAccount = access_server[0].stg_info.account;
                        stgPassword = access_server[0].stg_info.password;
                        dataUrl = "https://" + access_server[0].ms_param_uri + access_server[0].ms_param_path_uri;
                        if (!eserverUri) {
                            eserverUri = access_server[i].eserver_uri;
                        }
                        if (!maaUri) {
                            maaUri = access_server[i].maa_uri;
                        }
                        if (!tmsServer) {
                            tmsServer = access_server[i].tms_server;
                        }
                        if (!tmsAccount) {
                            tmsAccount = tms_account;
                        }
                        if (!tmsPwd) {
                            tmsPwd = tms_pwd;
                        }
                        if (!tmsPassword) {
                            tmsPassword = tms_password;
                        }
                        if (i != num_of_server - 1) {
                            sipUri += ';';
                            svnUri += ';';
                            httpsProxy += ';';
                            stgUri += ';';
                            sipStgUri += ';';
                            eserverStgUri += ';';
                        }
                    }
                    var _b = ret.uportal_authorize_result, auth_token = _b.auth_token, sip_account = _b.sip_account, sip_impi = _b.sip_impi, sip_password = _b.sip_password, password_type = _b.password_type, eab_server = _b.eab_server, group_server = _b.group_server, deploy_mode = _b.deploy_mode, sip_domain = _b.sip_domain, sip_short_num = _b.sip_short_num, _c = _b.auth_serinfo, server_uri = _c.server_uri, server_port = _c.server_port, real_user_account = _b.real_user_account, terminal_func_type = _b.terminal_func_type;
                    var _d = eserverUri.split(":"), eserver_address = _d[0], eserver_port = _d[1];
                    var sipUriList = sipUri.split(";");
                    var _e = sipUriList[0] ? sipUriList[0].split(":") : ["", "0"], sipserver_address = _e[0], sipserver_port = _e[1];
                    var _f = sipUriList[1] ? sipUriList[1].split(":") : ["", "0"], sipserver_address1 = _f[0], sipserver_port1 = _f[1];
                    var _g = sipUriList[2] ? sipUriList[2].split(":") : ["", "0"], sipserver_address2 = _g[0], sipserver_port2 = _g[1];
                    var loginInfo = {
                        authToken: auth_token,
                        sipAccount: sip_account,
                        sipImpi: sip_impi,
                        sipPassword: sip_password,
                        sipPasswordType: password_type,
                        eabUri: eab_server,
                        groupServer: group_server,
                        eServerAddress: eserver_address,
                        eServerPort: parseInt(eserver_port),
                        sipServerAddress: sipserver_address,
                        sipServerPort: parseInt(sipserver_port),
                        sipDomain: sip_domain,
                        sipServerBackup1: sipserver_address1,
                        sipServerPortBackup1: parseInt(sipserver_port1),
                        sipServerLocal: sipserver_address2,
                        sipServerPortLocal: parseInt(sipserver_port2),
                        authServerUri: server_uri,
                        authServerPort: server_port,
                        userAccount: real_user_account,
                        isSiptls: isSiptls,
                        isSrtp: isSrtp,
                        sipUri: sipUri,
                        sipTlsUri: sipTlsUri,
                        svnUri: svnUri,
                        httpsProxy: httpsProxy,
                        stgUri: stgUri,
                        stgAccount: stgAccount,
                        stgPassword: stgPassword,
                        sipStgUri: sipStgUri,
                        eserverStgUri: eserverStgUri,
                        deployMode: deploy_mode,
                        dataUrl: dataUrl,
                        passcode: passcode,
                        tmsServer: tmsServer,
                        tmsAccount: tmsAccount,
                        tmsPwd: tmsPwd,
                        tmsPassword: tmsPassword,
                        shortNumber: sip_short_num,
                        terminalFuncType: terminal_func_type,
                        maaUri: maaUri
                    };
                    _this.updateLoginInfo(loginInfo);
                    return loginInfo;
                }
                return {};
            };
            this.buildStgTunnel = function (stgUri, stgAccount, stgPassword) { return __awaiter(_this, void 0, void 0, function () {
                var stgUriList, stgNum, stgServers, i, _a, serverUri, serverPort, stgServer, ca_path, data, ret, stgInfo, err;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            stgUriList = stgUri.split(";");
                            stgNum = stgUriList.length;
                            stgServers = new Array();
                            for (i = 0; i < stgNum; i++) {
                                _a = stgUriList[i].split(":"), serverUri = _a[0], serverPort = _a[1];
                                stgServer = {
                                    server_uri: serverUri,
                                    server_port: parseInt(serverPort)
                                };
                                stgServers.push(stgServer);
                            }
                            ca_path = serverConfig_1.CloudEC_SERVERCONFIG.CA_PATH;
                            return [4, this.wrapper.buildStgTunnel(stgNum, stgServers, stgAccount, stgPassword, ca_path)];
                        case 1:
                            data = _b.sent();
                            ret = data.param;
                            if (!(ret.result === 0)) return [3, 3];
                            util_1.default.debug("uportal", "stg tunnel build success.");
                            return [4, this.updateStgInfo(ret)];
                        case 2:
                            stgInfo = _b.sent();
                            return [2, { result: true, stgInfo: stgInfo }];
                        case 3:
                            util_1.default.error("uportal", "stg tunnel build fail.");
                            err = { cmdId: data.notify, errorCode: ret.result, errorInfo: "stg tunnel build fail" };
                            Object.assign(err, util.getErrCode(data.notify, ret.result));
                            return [2, { result: false, info: err }];
                    }
                });
            }); };
            this.updateStgInfo = function (ret) {
                var stgUriUsed = ret.address;
                var isBuildStgSuc = (ret.result === 0) ? true : false;
                var loginInfo = JSON.parse(sessionStorage.cloudEC_loginInfo);
                var stgUri = loginInfo.stgUri, eserverStgUri = loginInfo.eserverStgUri, svnUri = loginInfo.svnUri, sipStgUri = loginInfo.sipStgUri, sipUri = loginInfo.sipUri;
                var eServerAddr = "";
                var svnUriUsed = "";
                var sipStgUriUesd = "";
                var sipUriList = sipUri.split(";");
                if (isBuildStgSuc) {
                    var eserverStgUriList = eserverStgUri.split(";");
                    var stgUriList = stgUri.split(";");
                    var svnUriList = svnUri.split(";");
                    var sipStgUriList = sipStgUri.split(";");
                    var stgUriNum = stgUriList.length;
                    if (!stgUriUsed) {
                        eServerAddr = eserverStgUriList[0];
                    }
                    else {
                        for (var i = 0; i < stgUriNum; i++) {
                            if (stgUriList[i].indexOf(stgUriUsed) != -1) {
                                eServerAddr = eserverStgUriList[i];
                                sipStgUriUesd = sipStgUriList[i];
                                svnUriUsed = svnUriList[i];
                                break;
                            }
                        }
                    }
                }
                var _a = eServerAddr.split(":"), eserver_address = _a[0], eserver_port = _a[1];
                var _b = ["", ""], sipserver_address = _b[0], sipserver_port = _b[1];
                if (enum_1.FIREWALL_MODE.LOGIN_E_FIREWALL_MODE_ONLY_HTTP === _this.fireWallConnectMode) {
                    _c = sipStgUriUesd.split(":"), sipserver_address = _c[0], sipserver_port = _c[1];
                }
                else if (enum_1.FIREWALL_MODE.LOGIN_E_FIREWALL_MODE_HTTP_AND_SVN === _this.fireWallConnectMode) {
                    _d = svnUriUsed.split(":"), sipserver_address = _d[0], sipserver_port = _d[1];
                }
                else {
                    _e = sipUriList[0].split(":"), sipserver_address = _e[0], sipserver_port = _e[1];
                }
                var stgInfo = {
                    stgUriUsed: stgUriUsed,
                    isBuildStgSuc: isBuildStgSuc,
                    eServerAddress: eserver_address,
                    eServerPort: parseInt(eserver_port),
                    sipServerAddress: sipserver_address,
                    sipServerPort: parseInt(sipserver_port),
                    sipServerBackup1: "",
                    sipServerPortBackup1: 0,
                    sipServerLocal: "",
                    sipServerPortLocal: 0,
                };
                _this.updateLoginInfo(stgInfo);
                return stgInfo;
                var _c, _d, _e;
            };
            this.fireWallDetect = function (svnUri) { return __awaiter(_this, void 0, void 0, function () {
                var svnUriList, serverNum, serverList, i, _a, serverUri, serverPort, server, ret;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            svnUriList = svnUri.split(";");
                            serverNum = svnUriList.length;
                            serverList = new Array();
                            for (i = 0; i < serverNum; i++) {
                                _a = svnUriList[i].split(":"), serverUri = _a[0], serverPort = _a[1];
                                server = {
                                    server_uri: serverUri,
                                    server_port: 0
                                };
                                serverList.push(server);
                            }
                            return [4, this.wrapper.fireWallDetect(serverNum, serverList)];
                        case 1:
                            ret = _b.sent();
                            if (!(ret && ret.result === 0)) return [3, 3];
                            util_1.default.debug("uportal", "fireWall detect success. The fireWall mode is  " + ret.fire_wall_mode);
                            this.fireWallConnectMode = ret.fire_wall_mode;
                            return [4, this.updateFireWallAndSipInfo(ret)];
                        case 2:
                            _b.sent();
                            return [3, 4];
                        case 3:
                            util_1.default.error("uportal", "fireWall detect fail.");
                            _b.label = 4;
                        case 4: return [2];
                    }
                });
            }); };
            this.updateFireWallAndSipInfo = function (data) {
                var fireWallMode = data.fire_wall_mode;
                var isGetFirewallRes = true;
                var fireWallAndSipInfo = {
                    fireWallMode: fireWallMode,
                    isGetFirewallRes: isGetFirewallRes
                };
                _this.updateLoginInfo(fireWallAndSipInfo);
            };
            this.destroyStgTunnel = function () { return __awaiter(_this, void 0, void 0, function () {
                var ret, stgInfo;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.wrapper.destroyStgTunnel()];
                        case 1:
                            ret = _a.sent();
                            if (ret.result === 0) {
                                stgInfo = {
                                    isBuildStgSuc: false,
                                };
                                this.updateLoginInfo(stgInfo);
                                util_1.default.debug("uportal", "stg tunnel destroy success.");
                                return [2, { result: true }];
                            }
                            else {
                                util_1.default.error("uportal", "stg tunnel destroy fail.");
                            }
                            return [2];
                    }
                });
            }); };
            this.initLoginInfo = function () {
                var loginInfo = {
                    userAccount: "",
                    account: "",
                    password: "",
                    serverAddress: "",
                    serverPort: "",
                    authToken: "",
                    isRememberPassword: false,
                    isAutoLogin: false,
                    loginHistoryList: [],
                    isLoading: false,
                    loginDisable: false,
                    isCapslock: false,
                    isOffline: false,
                    eabUri: "",
                    groupServer: "",
                    isSiptls: 0,
                    isSrtp: 0,
                    sipUri: "",
                    sipTlsUri: "",
                    svnUri: "",
                    httpsProxy: "",
                    stgUri: "",
                    stgAccount: "",
                    stgPassword: "",
                    sipStgUri: "",
                    eserverStgUri: "",
                    sipAccount: "",
                    sipImpi: "",
                    sipPassword: "",
                    sipPasswordType: 0,
                    sipOutgoingAccCode: null,
                    sipServerAddress: "",
                    sipServerPort: 0,
                    sipDomain: "",
                    sipServerBackup1: "",
                    sipServerPortBackup1: 0,
                    sipServerLocal: "",
                    sipServerPortLocal: 0,
                    eServerAddress: "",
                    eServerPort: 0,
                    umHttpServerUri: "",
                    umHttpsServerUri: "",
                    stgUriUsed: "",
                    isBuildStgSuc: false,
                    isGetFirewallRes: false,
                    fireWallMode: 3,
                    isEserverLoginSuccess: false,
                    isResuming: false,
                    funcType: 0,
                    deployMode: 3,
                    tmsServer: "",
                    tmsAccount: "",
                    tmsPwd: "",
                    shortNumber: "",
                    isTempUser: 0,
                    maaUri: "",
                    terminalFuncType: 0
                };
                var cloudEC_loginInfo = JSON.stringify(loginInfo);
                sessionStorage.cloudEC_loginInfo = cloudEC_loginInfo;
            };
            this.fireWallConnectMode = 2;
            this.wrapper = tupLoginWrapper_1.default.getInstance();
        }
        Uportal.prototype.do_action = function () {
            return __awaiter(this, void 0, void 0, function () {
                var sdkInfo, versionInfo, ret, _a, stgUri, stgAccount, stgPassword, svnUri, stgTunnelBuiltResult;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.initLoginInfo();
                            return [4, this.wrapper.build()];
                        case 1:
                            _b.sent();
                            return [4, this.wrapper.logStart()];
                        case 2:
                            _b.sent();
                            return [4, this.wrapper.init()];
                        case 3:
                            sdkInfo = _b.sent();
                            if (sdkInfo.result && sdkInfo.info != null && sdkInfo.info.version != null) {
                                versionInfo = void 0;
                                versionInfo = {
                                    compileDate: sdkInfo.info.compile_date,
                                    compileTime: sdkInfo.info.compile_time,
                                    version: sdkInfo.info.version,
                                };
                                this.updateLoginInfo({ "versionInfo": versionInfo });
                            }
                            return [4, this.loginUportal()];
                        case 4:
                            ret = _b.sent();
                            if (!ret.result) {
                                util_1.default.error("uportal", "login uportal failed.");
                                return [2, ret];
                            }
                            _a = ret.loginInfo, stgUri = _a.stgUri, stgAccount = _a.stgAccount, stgPassword = _a.stgPassword, svnUri = _a.svnUri;
                            if (!!(stgUri === undefined || stgUri === "" || stgUri === ";" || stgUri === ";;")) return [3, 6];
                            util_1.default.debug("uportal", " start startFireWallDetect， svnUri=" + svnUri);
                            return [4, this.fireWallDetect(svnUri)];
                        case 5:
                            _b.sent();
                            util_1.default.debug("uportal", " end startFireWallDetect");
                            _b.label = 6;
                        case 6:
                            if (!(enum_1.FIREWALL_MODE.LOGIN_E_FIREWALL_MODE_ONLY_HTTP === this.fireWallConnectMode || enum_1.FIREWALL_MODE.LOGIN_E_FIREWALL_MODE_HTTP_AND_SVN === this.fireWallConnectMode)) return [3, 8];
                            if (!!(stgUri === undefined || stgUri === "" || stgUri === ";" || stgUri === ";;")) return [3, 8];
                            util_1.default.debug("uportal", " start buildStgTunnel ");
                            return [4, this.buildStgTunnel(stgUri, stgAccount, stgPassword)];
                        case 7:
                            stgTunnelBuiltResult = _b.sent();
                            if (!stgTunnelBuiltResult.result) {
                                return [2, stgTunnelBuiltResult];
                            }
                            _b.label = 8;
                        case 8: return [2, { result: true }];
                    }
                });
            });
        };
        Uportal.prototype.loginUportal = function () {
            return __awaiter(this, void 0, void 0, function () {
                var CLOUDEC_LOGIN_INPUT_PARAM, authType, authParam, serverInfo, cleanAuthParam, cleanServerInfo, data, err, proxyParam, proxyParamTemp, err, ret, loginInfo, err;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            util_1.default.debug("uportal", "step in loginUportal");
                            CLOUDEC_LOGIN_INPUT_PARAM = sessionStorage.getItem("CLOUDEC_LOGIN_INPUT_PARAM");
                            authType = JSON.parse(CLOUDEC_LOGIN_INPUT_PARAM).authType;
                            authParam = JSON.parse(CLOUDEC_LOGIN_INPUT_PARAM).authParam;
                            serverInfo = JSON.parse(CLOUDEC_LOGIN_INPUT_PARAM).serverInfo;
                            CLOUDEC_LOGIN_INPUT_PARAM = {};
                            cleanAuthParam = {};
                            cleanServerInfo = {};
                            sessionStorage.setItem("CLOUDEC_LOGIN_INPUT_PARAM", JSON.stringify({ authType: authType, cleanAuthParam: cleanAuthParam, cleanServerInfo: cleanServerInfo }));
                            sessionStorage.removeItem("CLOUDEC_LOGIN_INPUT_PARAM");
                            return [4, this.wrapper.getBestLocalIp(serverInfo.serverAddress)];
                        case 1:
                            data = _a.sent();
                            if (0 == data.result) {
                                sessionStorage.cloudEC_localIP = data.local_ip;
                                util_1.default.debug("uportal", "Get local IP is " + util.hideIPAddress(data.local_ip));
                            }
                            else {
                                util_1.default.error("uportal", "Get local IP failed");
                                err = { cmdId: 0, errorCode: -1, errorInfo: "Get local IP failed" };
                                Object.assign(err, util.getErrCode(data.rsp, data.result));
                                return [2, { result: false, info: err }];
                            }
                            proxyParam = { proxyAddress: "", proxyPort: 0, proxyAccount: "", proxyPassword: "" };
                            if (!(serverInfo.extensions != undefined && serverInfo.extensions != "")) return [3, 3];
                            proxyParamTemp = JSON.parse(serverInfo.extensions);
                            proxyParam = {
                                proxyAddress: proxyParamTemp.proxyAddress,
                                proxyPort: parseInt(proxyParamTemp.proxyPort),
                                proxyAccount: proxyParamTemp.proxyAccount,
                                proxyPassword: proxyParamTemp.proxyPassword
                            };
                            proxyParamTemp = "";
                            return [4, this.wrapper.setProxy(proxyParam)];
                        case 2:
                            data = _a.sent();
                            if (0 == data.result) {
                                sessionStorage.cloudEC_proxy = JSON.stringify(proxyParam);
                                proxyParam.proxyPassword = "";
                                util_1.default.debug("uportal", "Set proxy success");
                            }
                            else {
                                util_1.default.error("uportal", "Set proxy failed");
                                err = { cmdId: 0, errorCode: -1, errorInfo: "Set proxy failed" };
                                Object.assign(err, util.getErrCode(data.rsp, data.result));
                                return [2, { result: false, info: err }];
                            }
                            _a.label = 3;
                        case 3: return [4, this.wrapper.loginAuthorize(authType, authParam, serverInfo, proxyParam)];
                        case 4:
                            data = _a.sent();
                            authParam.passwd = "";
                            proxyParam.proxyPassword = "";
                            ret = data.param;
                            if (ret.uportal_authorize_result && ret.uportal_authorize_result.is_first_login) {
                                util_1.default.debug("uportal", "this is the first login");
                            }
                            if (!(ret.result == 0)) return [3, 6];
                            return [4, this.updateSiteInfo(ret)];
                        case 5:
                            loginInfo = _a.sent();
                            util_1.default.debug("uportal", "login Uportal success!");
                            return [2, { result: true, loginInfo: loginInfo }];
                        case 6:
                            util_1.default.error("uportal", "login Uportal failed error_code=" + ret.result);
                            err = { cmdId: 0, errorCode: -1, errorInfo: "login Uportal failed" };
                            Object.assign(err, util.getErrCode(data.notify, ret.result));
                            return [2, { result: false, info: err }];
                    }
                });
            });
        };
        Uportal.prototype.updateLoginInfo = function (data) {
            var loginInfo = JSON.parse(sessionStorage.cloudEC_loginInfo);
            Object.assign(loginInfo, data);
            var cloudEC_loginInfo = JSON.stringify(loginInfo);
            sessionStorage.cloudEC_loginInfo = cloudEC_loginInfo;
        };
        return Uportal;
    }());
    exports.default = Uportal;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 357 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(358), __webpack_require__(51), __webpack_require__(137), __webpack_require__(1), __webpack_require__(11), __webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, sipCallConfig_1, tupCallWrapper_1, callManager_1, util, enum_1, util_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var SipServer = (function () {
        function SipServer() {
            var _this = this;
            this.sipserverLogin = function () { return __awaiter(_this, void 0, void 0, function () {
                var cloudEC_loginInfo, loginInfo, sipPassword, sipImpi, sipAccount, fireWallMode, configLogInfo, configSipInfo, configCallInfo, configMKIInfo, configRTPInfo, configVideoInfo, configBFCPInfo, configSessionTimerInfo, configBandwidthLimitInfo, initIPTParamInfo, i, ret, err;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            cloudEC_loginInfo = sessionStorage.cloudEC_loginInfo;
                            loginInfo = JSON.parse(cloudEC_loginInfo);
                            sipPassword = loginInfo.sipPassword, sipImpi = loginInfo.sipImpi, sipAccount = loginInfo.sipAccount, fireWallMode = loginInfo.fireWallMode;
                            if (enum_1.FIREWALL_MODE.LOGIN_E_FIREWALL_MODE_ONLY_HTTP === loginInfo.fire_wall_mode) {
                                this.wrapper.stopLocalServer();
                            }
                            configLogInfo = sipCallConfig_1.configLog();
                            return [4, this.wrapper.config(configLogInfo)];
                        case 1:
                            _a.sent();
                            configSipInfo = sipCallConfig_1.configSip();
                            return [4, this.wrapper.config(configSipInfo)];
                        case 2:
                            _a.sent();
                            configCallInfo = sipCallConfig_1.configCall();
                            return [4, this.wrapper.config(configCallInfo)];
                        case 3:
                            _a.sent();
                            configMKIInfo = sipCallConfig_1.configMKI();
                            return [4, this.wrapper.config(configMKIInfo)];
                        case 4:
                            _a.sent();
                            configRTPInfo = sipCallConfig_1.configRTP();
                            return [4, this.wrapper.config(configRTPInfo)];
                        case 5:
                            _a.sent();
                            return [4, sipCallConfig_1.configVideo()];
                        case 6:
                            configVideoInfo = _a.sent();
                            return [4, this.wrapper.config(configVideoInfo)];
                        case 7:
                            _a.sent();
                            configBFCPInfo = sipCallConfig_1.configBFCP();
                            return [4, this.wrapper.config(configBFCPInfo)];
                        case 8:
                            _a.sent();
                            configSessionTimerInfo = sipCallConfig_1.configSessionTimer();
                            return [4, this.wrapper.config(configSessionTimerInfo)];
                        case 9:
                            _a.sent();
                            configBandwidthLimitInfo = sipCallConfig_1.configBandwidthLimit();
                            return [4, this.wrapper.config(configBandwidthLimitInfo)];
                        case 10:
                            _a.sent();
                            initIPTParamInfo = sipCallConfig_1.initIPTParam();
                            i = 0;
                            _a.label = 11;
                        case 11:
                            if (!(i < initIPTParamInfo.length)) return [3, 14];
                            return [4, this.wrapper.config(initIPTParamInfo[i])];
                        case 12:
                            _a.sent();
                            _a.label = 13;
                        case 13:
                            i++;
                            return [3, 11];
                        case 14:
                            if (sipAccount.indexOf("sip:") != -1) {
                                sipAccount = sipAccount.substring(4);
                            }
                            return [4, this.wrapper.register(sipImpi, sipAccount, sipPassword)];
                        case 15:
                            ret = _a.sent();
                            if (ret.result == 0) {
                                util_1.default.debug("sipserver", "sip register execute success.");
                                return [2, { result: true }];
                            }
                            else {
                                this.wrapper.deRegister(sipImpi);
                                util_1.default.error("sipserver", "sip register execute fail. ");
                                err = { cmdId: 0, errorCode: -1, errorInfo: "sip register execute fail" };
                                Object.assign(err, util.getErrCode(ret.notify, ret.result));
                                return [2, { result: false, info: err }];
                            }
                            return [2];
                    }
                });
            }); };
            this.sipserverDerigister = function () { return __awaiter(_this, void 0, void 0, function () {
                var cloudEC_loginInfo, loginInfo, sipImpi;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            cloudEC_loginInfo = sessionStorage.cloudEC_loginInfo;
                            loginInfo = JSON.parse(cloudEC_loginInfo);
                            sipImpi = loginInfo.sipImpi;
                            util_1.default.debug("sipserver", "sipserverDerigister");
                            return [4, this.wrapper.deRegister(sipImpi)];
                        case 1:
                            _a.sent();
                            return [2];
                    }
                });
            }); };
            this.stopLocalServer = function () {
                util_1.default.debug("sipserver", "stop local server.");
                _this.wrapper.stopLocalServer();
            };
            this.wrapper = tupCallWrapper_1.default.getInstance();
        }
        SipServer.prototype.do_action = function () {
            return __awaiter(this, void 0, void 0, function () {
                var ret;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.wrapper.build()];
                        case 1:
                            _a.sent();
                            return [4, this.sipserverLogin()];
                        case 2:
                            ret = _a.sent();
                            return [4, callManager_1.default.registerCallEvent()];
                        case 3:
                            _a.sent();
                            return [4, callManager_1.default.nativewndBuild()];
                        case 4:
                            _a.sent();
                            return [2, ret];
                    }
                });
            });
        };
        return SipServer;
    }());
    exports.default = SipServer;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 358 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(11), __webpack_require__(14), __webpack_require__(135), __webpack_require__(1), __webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, enum_1, serverConfig_1, userConfig_1, util_1, util) {
    "use strict";
    var _this = this;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.configLog = function () {
        var logConfig = {
            log_level: serverConfig_1.CloudEC_SERVERCONFIG.LOG_LEVEL,
            max_size: serverConfig_1.CloudEC_SERVERCONFIG.LOG_FILE_SIZE,
            file_count: serverConfig_1.CloudEC_SERVERCONFIG.LOG_FILE_COUNT,
            log_path: serverConfig_1.CloudEC_SERVERCONFIG.LOG_PATH
        };
        util_1.default.debug("sipCallConfig, LogConfig =", JSON.stringify(logConfig));
        return logConfig;
    };
    exports.configHMELog = function () {
        var hmeLogSize = 10;
        if (userConfig_1.CloudEC_CLIENTCONFIG.IS_DEBUG) {
            hmeLogSize = 228;
        }
        var HMEConfig = {
            audio_log_level: 3,
            audio_max_size: 10,
            video_log_level: 3,
            video_max_size: hmeLogSize
        };
        util_1.default.debug("sipCallConfig", "HMEConfig =" + JSON.stringify(HMEConfig));
        return HMEConfig;
    };
    exports.configSip = function () {
        var cloudEC_loginInfo = sessionStorage.cloudEC_loginInfo;
        var loginInfo = JSON.parse(cloudEC_loginInfo);
        var sipServerAddress = loginInfo.sipServerAddress, sipServerPort = loginInfo.sipServerPort, sipServerBackup1 = loginInfo.sipServerBackup1, sipServerPortBackup1 = loginInfo.sipServerPortBackup1, sipServerLocal = loginInfo.sipServerLocal, sipServerPortLocal = loginInfo.sipServerPortLocal, sipPasswordType = loginInfo.sipPasswordType, sipOutgoingAccCode = loginInfo.sipOutgoingAccCode, fireWallMode = loginInfo.fireWallMode, sipDomain = loginInfo.sipDomain, serverAddress = loginInfo.serverAddress, isSiptls = loginInfo.isSiptls, sipTlsUri = loginInfo.sipTlsUri, terminalFuncType = loginInfo.terminalFuncType, eServerAddress = loginInfo.eServerAddress, maaUri = loginInfo.maaUri;
        var env = 0;
        var stgModeForCall = enum_1.CALL_FIREWALL_MODE.CALL_E_FIREWALL_MODE_LINE;
        if (enum_1.FIREWALL_MODE.LOGIN_E_FIREWALL_MODE_ONLY_HTTP === fireWallMode) {
            stgModeForCall = enum_1.CALL_FIREWALL_MODE.CALL_E_FIREWALL_MODE_STG;
        }
        else if (enum_1.FIREWALL_MODE.LOGIN_E_FIREWALL_MODE_HTTP_AND_SVN === fireWallMode) {
            stgModeForCall = enum_1.CALL_FIREWALL_MODE.CALL_E_FIREWALL_MODE_INNERSVN;
        }
        else {
            stgModeForCall = enum_1.CALL_FIREWALL_MODE.CALL_E_FIREWALL_MODE_LINE;
        }
        var user_agent = "eSDK-Desktop";
        var isTlsEnable = false;
        if (0 == (terminalFuncType & 0x0002) || (!eServerAddress && !maaUri)) {
            user_agent = "Huawei TE Desktop";
        }
        if (stgModeForCall === enum_1.CALL_FIREWALL_MODE.CALL_E_FIREWALL_MODE_STG) {
            isTlsEnable = false;
            isSiptls = 0;
        }
        if (isSiptls === 1) {
            isTlsEnable = true;
            if (sipTlsUri != "") {
                var sipTlsPort = parseInt(sipTlsUri.split(":")[1]);
                sipServerPort = sipTlsPort;
                sipServerPortBackup1 = sipTlsPort;
                sipServerPortLocal = sipTlsPort;
            }
            else {
                sipServerPort = 5061;
                sipServerPortBackup1 = 5061;
                sipServerPortLocal = 5061;
            }
        }
        var configSipInfo = {
            log_path: serverConfig_1.CloudEC_SERVERCONFIG.LOG_PATH,
            network: {
                sip_svr_addr: sipDomain,
                sip_svr_port: sipServerPort,
                backup1_addr: sipServerBackup1,
                backup1_port: sipServerPortBackup1,
                local_addr: sipServerLocal,
                local_ipv4: sessionStorage.cloudEC_localIP,
                user_agent: user_agent,
                net_environment: env,
                proxy_addr: sipServerAddress,
                proxy_port: sipServerPort,
            },
            account: {
                account_pwd_type: parseInt(sipPasswordType) || 0
            },
            call: {
                param_outgoingcode: sipOutgoingAccCode,
                cfg_firewall_mode: stgModeForCall
            },
            sip: {
                audvie_mode: 1,
                user_type: 0
            }
        };
        if (isTlsEnable) {
            Object.assign(configSipInfo, {
                sip: {
                    trans_mode: 1,
                    root_cert_path: serverConfig_1.CloudEC_SERVERCONFIG.CA_PATH,
                    tls_version: 0x01 | 0x02 | 0x04,
                    tls_rootcertpath: "./root_cert_huawei.pem",
                    tls_anonymous_enable: 1,
                }
            });
        }
        var logInfo = util.replaceLogInfo(configSipInfo);
        util_1.default.debug("sipCallConfig", "configSipInfo =" + logInfo);
        return configSipInfo;
    };
    exports.configCall = function () {
        var cloudEC_loginInfo = sessionStorage.cloudEC_loginInfo;
        var loginInfo = JSON.parse(cloudEC_loginInfo);
        var fireWallMode = loginInfo.fireWallMode, serverAddress = loginInfo.serverAddress;
        var openNETATE = 2;
        var noStreamHangUp = parseInt(userConfig_1.CloudEC_CLIENTCONFIG["Device.ComCfg.Media.StreamAutomaticallyHangUp"]);
        var audio_codec_set = "112,9,8,0,98,18";
        var configCallInfo = {
            audio: {
                audio_codec: audio_codec_set,
                dtmf_mode: 1,
                net_ate_level: openNETATE,
                netate_redpt_switch: 0,
                audio_pkt_red_num_in_stg: {
                    opus_repeat_num: 1,
                    other_repeat_num: 2
                },
                audio_rfc2198: {
                    switch: 1,
                    red_pt: 121,
                    red_level: 3
                },
                audio_anr: 3,
                audio_aec: 1,
                audio_agc: 1,
                ilbcmode: 20,
                audio_band_limit: {
                    lowest_band_width: 64,
                    lowest_audio_codec: "112,98,18",
                    lower_band_width: 384,
                    lower_audio_codec: "112,98,18,9,8,0"
                }
            },
            media: {
                video_preview_type: 2,
                lowbandwidth_ability: 1,
                loose_port_nego: 1,
                chan_upd_dyn: 1
            },
            call: {
                stream_detect_enable: noStreamHangUp,
                stream_detect_inrval: 15
            }
        };
        util_1.default.debug("sipCallConfig", "configCallInfo =" + JSON.stringify(configCallInfo));
        return configCallInfo;
    };
    exports.configMKI = function () {
        var isMKIEnable = parseInt(userConfig_1.CloudEC_CLIENTCONFIG["Device.ComCfg.Media.EncryptCalloutUseMKI"]);
        var configMKIInfo = {
            media: {
                srtp_mki: isMKIEnable
            }
        };
        util_1.default.debug("sipCallConfig", "configMKIInfo =" + JSON.stringify(configMKIInfo));
        return configMKIInfo;
    };
    exports.configRTP = function () {
        var cloudEC_loginInfo = sessionStorage.cloudEC_loginInfo;
        var loginInfo = JSON.parse(cloudEC_loginInfo);
        var isSrtp = loginInfo.isSrtp;
        var SRTPMode = isSrtp == 1 ? 1 : 0;
        var rtpPriority = 2;
        if (SRTPMode === 0) {
            rtpPriority = 1;
        }
        var configRTPInfo = {
            media: {
                srtp_mode: SRTPMode,
                rtp_priority: rtpPriority,
                merge_srtp_rtp: 1
            }
        };
        if (userConfig_1.CloudEC_CLIENTCONFIG.is_use_vchosting === 1) {
            configRTPInfo.media.srtp_mode = 0;
        }
        util_1.default.debug("sipCallConfig", "configRTPInfo =" + JSON.stringify(configRTPInfo));
        return configRTPInfo;
    };
    exports.configVideo = function () { return __awaiter(_this, void 0, void 0, function () {
        var configVideoSetting, _a, configVideoSECandARQ, configVideoAutoAdjust, configVideoHP, configVideoInfo;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    configVideoSetting = {};
                    _a = configVideoSetting;
                    return [4, exports.initVideoSettingParam()];
                case 1:
                    _a.media = _b.sent();
                    configVideoSECandARQ = {};
                    configVideoSECandARQ.media = initVideoSECandARQ();
                    configVideoAutoAdjust = {};
                    configVideoAutoAdjust.media = initVideoAutoAdjust();
                    configVideoHP = {};
                    configVideoHP.media = initVideoHP();
                    configVideoInfo = {
                        media: {}
                    };
                    configVideoInfo.media = Object.assign({}, configVideoSetting.media, configVideoSECandARQ.media, configVideoAutoAdjust.media, configVideoHP.media);
                    util_1.default.debug("sipCallConfig", "configVideoInfo =" + JSON.stringify(configVideoInfo));
                    return [2, configVideoInfo];
            }
        });
    }); };
    exports.configBFCP = function () {
        var configBFCPInfo = {};
        configBFCPInfo.media = initBFCP();
        return configBFCPInfo;
    };
    exports.configSessionTimer = function () {
        var sessionTimerEnable = parseInt(userConfig_1.CloudEC_CLIENTCONFIG["Device.ComCfg.Sip.enableSessionTimer"]);
        var sessionTime = parseInt(userConfig_1.CloudEC_CLIENTCONFIG["Device.ComCfg.Sip.SessionTime"]);
        var configSessionTimerInfo = {
            sip: {
                sessiontimer_enable: sessionTimerEnable,
                session_time: sessionTime
            }
        };
        util_1.default.debug("sipCallConfig", "configSessionTimerInfo =" + JSON.stringify(configSessionTimerInfo));
        return configSessionTimerInfo;
    };
    exports.configBandwidthLimit = function () {
        var isBandwidthLimitEnable = parseInt(userConfig_1.CloudEC_CLIENTCONFIG["Device.ComCfg.Media.BandwidthLimit"]);
        var configBandwidthLimitInfo = {
            media: {
                video_bitrate_limited: isBandwidthLimitEnable,
            }
        };
        util_1.default.debug("sipCallConfig", "configBandwidthLimitInfo =" + JSON.stringify(configBandwidthLimitInfo));
        return configBandwidthLimitInfo;
    };
    var initBFCP = function () {
        var config = userConfig_1.CloudEC_CLIENTCONFIG;
        var cloudEC_loginInfo = sessionStorage.cloudEC_loginInfo;
        var loginInfo = JSON.parse(cloudEC_loginInfo);
        var fireWallMode = loginInfo.fireWallMode, serverAddress = loginInfo.serverAddress;
        var bfcpMode = parseInt(config["Device.ComCfg.Media.BFCPMode"]);
        var decodeLevel = config.DATA_CONFIG_MEDIA_LEVEL;
        var max_mbps = config.DATA_CONFIG_MEDIA_MAX_MBPS;
        var max_br = config.DATA_CONFIG_MEDIA_MAX_BR;
        var max_fs = config.DATA_CONFIG_MEDIA_MAX_FS;
        var bandwidth = parseInt(config["Device.ComCfg.Media.TotalBandwidth"]);
        var netLossrate = parseInt(config["Device.ComCfg.Media.DataNetRat"]);
        var keyframeInterval = parseInt(config["Device.ComCfg.Media.DataKeyFrameIntervalNetRat"]);
        if (userConfig_1.CloudEC_CLIENTCONFIG.ISMOBILE) {
            netLossrate = 5;
            keyframeInterval = 5;
        }
        var data_resolution_table;
        if (!userConfig_1.CloudEC_CLIENTCONFIG.ISMOBILE) {
            decodeLevel = 31;
            max_mbps = 90000;
            max_fs = 9000;
            data_resolution_table = {
                table_num: 6,
                param_set: [
                    { band_width: 512, width: 1920, height: 1080, max_frame_rate: 5, min_frame_rate: 1, max_bit_rate: 512, min_bit_rate: 32 },
                    { band_width: 384, width: 1920, height: 1080, max_frame_rate: 3, min_frame_rate: 1, max_bit_rate: 384, min_bit_rate: 32 },
                    { band_width: 256, width: 1920, height: 1080, max_frame_rate: 2, min_frame_rate: 1, max_bit_rate: 256, min_bit_rate: 32 },
                    { band_width: 192, width: 1920, height: 1080, max_frame_rate: 1, min_frame_rate: 1, max_bit_rate: 192, min_bit_rate: 32 },
                    { band_width: 128, width: 1920, height: 1080, max_frame_rate: 1, min_frame_rate: 1, max_bit_rate: 128, min_bit_rate: 32 },
                    { band_width: 64, width: 1920, height: 1080, max_frame_rate: 1, min_frame_rate: 1, max_bit_rate: 64, min_bit_rate: 32 }
                ]
            };
        }
        else {
            if (bandwidth >= 384) {
                decodeLevel = 22;
                max_mbps = 27000;
                max_fs = 9000;
            }
            else {
                decodeLevel = 20;
                max_mbps = 10800;
                max_fs = 3600;
            }
            data_resolution_table = {
                table_num: 4,
                param_set: [
                    { band_width: 300, width: 1280, height: 720, max_frame_rate: 3, min_frame_rate: 1, max_bit_rate: 300, min_bit_rate: 32 },
                    { band_width: 192, width: 1280, height: 720, max_frame_rate: 3, min_frame_rate: 1, max_bit_rate: 192, min_bit_rate: 32 },
                    { band_width: 128, width: 1280, height: 720, max_frame_rate: 3, min_frame_rate: 1, max_bit_rate: 128, min_bit_rate: 32 },
                    { band_width: 64, width: 1280, height: 720, max_frame_rate: 3, min_frame_rate: 1, max_bit_rate: 64, min_bit_rate: 32 }
                ]
            };
        }
        var dataBW = 512;
        if (userConfig_1.CloudEC_CLIENTCONFIG.ISMOBILE) {
            dataBW = (bandwidth >= 512) ? 300 : (bandwidth / 2);
        }
        else {
            if (bandwidth < 256) {
                dataBW = 64;
            }
            else if (bandwidth < 384) {
                dataBW = 128;
            }
            else if (bandwidth < 768) {
                dataBW = 192;
            }
            else if (bandwidth < 1024) {
                dataBW = 256;
            }
            else if (bandwidth < 1472) {
                dataBW = 384;
            }
            else if (bandwidth <= 4096) {
                dataBW = 512;
            }
            else {
            }
        }
        var isStgMode = false;
        if (enum_1.FIREWALL_MODE.LOGIN_E_FIREWALL_MODE_ONLY_HTTP === fireWallMode) {
            isStgMode = true;
            if (userConfig_1.CloudEC_CLIENTCONFIG.ISMOBILE) {
                dataBW = (bandwidth >= 384) ? 192 : (bandwidth / 2);
            }
            else {
                if (bandwidth >= 768 && bandwidth < 1024) {
                    dataBW = 192;
                }
                else if (bandwidth >= 1024 && bandwidth <= 4096) {
                    dataBW = 256;
                }
                else {
                }
            }
        }
        var harq = (serverConfig_1.CloudEC_SERVERCONFIG.IS_TLS_SUPPORT || isStgMode) ? 0 : parseInt(config["Device.ComCfg.Media.DataHarq"]);
        var ars = serverConfig_1.CloudEC_SERVERCONFIG.IS_TLS_SUPPORT ? 0 : parseInt(config["Device.ComCfg.Media.DataARS"]);
        var ars_frameSize = serverConfig_1.CloudEC_SERVERCONFIG.IS_TLS_SUPPORT ? 0 : parseInt(config["Device.ComCfg.Media.DataARSFrameSize"]);
        var ars_frameRate = serverConfig_1.CloudEC_SERVERCONFIG.IS_TLS_SUPPORT ? 0 : parseInt(config["Device.ComCfg.Media.DataARSFrameRate"]);
        var ars_bitRate = serverConfig_1.CloudEC_SERVERCONFIG.IS_TLS_SUPPORT ? 0 : parseInt(config["Device.ComCfg.Media.DataARSBitRate"]);
        var ars_fec = serverConfig_1.CloudEC_SERVERCONFIG.IS_TLS_SUPPORT ? 0 : parseInt(config["Device.ComCfg.Media.DataArsFec"]);
        var ars_dataShaping = serverConfig_1.CloudEC_SERVERCONFIG.IS_TLS_SUPPORT ? 0 : parseInt(config["Device.ComCfg.Media.DataShaping"]);
        var dataLimit = isStgMode ? 512 : 384;
        var media = {
            enable_bfcp: serverConfig_1.CloudEC_SERVERCONFIG.CONF_CONTROL_PROTOCOL,
            enable_audio_bfcp: serverConfig_1.CloudEC_SERVERCONFIG.CONF_CONTROL_PROTOCOL,
            enable_data: 0,
            bfcp_param: {
                floor_ctrl: 3,
                setup: 3,
                trans_type: bfcpMode
            },
            bfcp_port_range: {
                min_port: 5070,
                max_port: 5090,
                ulTlsPort: 5071
            },
            data_framesize: {
                decode_framesize: 16,
                framesize: 3
            },
            data_framerate: {
                frame_rate: 3,
                min_frame_rate: 1
            },
            data_port_range: {
                min_port: 10580 + 2,
                max_port: 10599 + 2
            },
            data_level: {
                level: decodeLevel,
                max_fs: max_fs,
                max_mbps: max_mbps
            },
            data_datarate: {
                max_bw: dataBW
            },
            tmmbr_threshold: {
                data_limit: dataLimit,
                min_data_bandwidth: 64,
                min_video_bandwidth: 64
            },
            data_codec: "106",
            data_arq: parseInt(config["Device.ComCfg.Media.DataArq"]),
            data_harq: harq,
            data_errorcorrecting: config.DATA_CONFIG_MEDIA_DATA_ERRORCORRECTING,
            data_net_lossrate: netLossrate,
            data_keyframe_interval: keyframeInterval,
            data_ars: {
                ars: ars,
                ars_ctrl_framesize: ars_frameSize,
                ars_ctrl_framerate: ars_frameRate,
                ars_ctrl_bitrate: ars_bitRate,
                ars_ctrl_fec: ars_fec,
                ars_data_shaping: ars_dataShaping
            },
            data_h264_quality_level_table: {
                param_setnumber: 4,
                quality_level_param_set: [
                    { codec_name: "", pt: 105, profile_idc: 66, packet_mode: 1, level_asymmetry: 1, priority: 3 },
                    { codec_name: "", pt: 106, profile_idc: 66, packet_mode: 0, level_asymmetry: 1, priority: 4 },
                    { codec_name: "", pt: 107, profile_idc: 100, packet_mode: 1, level_asymmetry: 1, priority: 1 },
                    { codec_name: "", pt: 108, profile_idc: 100, packet_mode: 0, level_asymmetry: 1, priority: 2 }
                ]
            }
        };
        media.data_resolution_table = data_resolution_table;
        util_1.default.debug("sipCallConfig", "media:BFCP params media =" + JSON.stringify(media));
        return media;
    };
    var initVideoSECandARQ = function () {
        var config = userConfig_1.CloudEC_CLIENTCONFIG;
        var cloudEC_loginInfo = sessionStorage.cloudEC_loginInfo;
        var loginInfo = JSON.parse(cloudEC_loginInfo);
        var fireWallMode = loginInfo.fireWallMode, serverAddress = loginInfo.serverAddress;
        var isStgMode = false;
        if (enum_1.FIREWALL_MODE.LOGIN_E_FIREWALL_MODE_ONLY_HTTP === fireWallMode) {
            isStgMode = true;
        }
        var netLossrate = parseInt(config["Device.ComCfg.Media.VideoNetRat"]);
        var keyframeInterval = parseInt(config["Device.ComCfg.Media.VideoKeyFrameIntervalNetRat"]);
        var harq = (serverConfig_1.CloudEC_SERVERCONFIG.IS_TLS_SUPPORT || isStgMode) ? 0 : parseInt(config["Device.ComCfg.Media.VideoHarq"]);
        if (userConfig_1.CloudEC_CLIENTCONFIG.ISMOBILE) {
            netLossrate = 20;
            keyframeInterval = 150;
        }
        var media = {
            video_errorcorrecting: config.VIDEO_CONFIG_MEDIA_VIDEO_ERRORCORRECTING,
            video_arq: parseInt(config["Device.ComCfg.Media.VideoArq"]),
            video_harq: harq,
            ec_pkt_in_rtp: parseInt(config["Device.ComCfg.Media.EcPktInRtp"]),
            net_lossrate: netLossrate,
            keyframe_interval: keyframeInterval
        };
        util_1.default.debug("sipCallConfig", " media:Video anti-lost packet configuration parameters media =" + JSON.stringify(media));
        return media;
    };
    exports.initVideoSettingParam = function () { return __awaiter(_this, void 0, void 0, function () {
        var config, cloudEC_loginInfo, loginInfo, fireWallMode, serverAddress, decodeLevel, max_mbps, max_br, max_fs, bandwidth, mtu, media, bandwidth_calc_policy, video_resolution_table, video_resolution_adj_num, fluid_control, isSupportHdacc, openHdacc, video_hdaccelerate, mediaHdaccInfo;
        return __generator(this, function (_a) {
            config = userConfig_1.CloudEC_CLIENTCONFIG;
            cloudEC_loginInfo = sessionStorage.cloudEC_loginInfo;
            loginInfo = JSON.parse(cloudEC_loginInfo);
            fireWallMode = loginInfo.fireWallMode, serverAddress = loginInfo.serverAddress;
            decodeLevel = config.VIDEO_CONFIG_MEDIA_LEVEL;
            max_mbps = config.VIDEO_CONFIG_MEDIA_MAX_MBPS;
            max_br = config.VIDEO_CONFIG_MEDIA_MAX_BR;
            max_fs = config.VIDEO_CONFIG_MEDIA_MAX_FS;
            bandwidth = parseInt(config["Device.ComCfg.Media.TotalBandwidth"]);
            mtu = 1500;
            if (enum_1.FIREWALL_MODE.LOGIN_E_FIREWALL_MODE_ONLY_HTTP === fireWallMode) {
                mtu = 1280;
            }
            if (!userConfig_1.CloudEC_CLIENTCONFIG.ISMOBILE && bandwidth >= 1024 && enum_1.FIREWALL_MODE.LOGIN_E_FIREWALL_MODE_ONLY_HTTP !== fireWallMode) {
                decodeLevel = 40;
            }
            if (userConfig_1.CloudEC_CLIENTCONFIG.ISMOBILE) {
                decodeLevel = 30;
                max_mbps = 72000;
                max_fs = 3600;
            }
            media = {
                video_level: {
                    level: decodeLevel,
                    max_mbps: max_mbps,
                    max_br: config.VIDEO_CONFIG_MEDIA_MAX_BR,
                    max_fs: max_fs
                },
                sdp_ct: bandwidth,
                video_mtu: mtu,
                video_datarate: {
                    max_bw: bandwidth
                },
                clarity_fluency_enable: config.VIDEO_CONFIG_MEDIA_CLARITY_FLUENCY_ENABLE,
                video_tatic: config.VIDEO_CONFIG_MEDIA_VIDEO_TATIC,
                video_h264_force_single_pt: config.VIDEO_CONFIG_MEDIA_H264_FORCE_SINGLE_PT,
                sec_version: {
                    sec10: config.VIDEO_CONFIG_MEDIA_SEC_VERSION,
                    sec20: config.VIDEO_CONFIG_MEDIA_SEC_VERSION,
                    sec21: config.VIDEO_CONFIG_MEDIA_SEC_VERSION,
                    sec30: config.VIDEO_CONFIG_MEDIA_SEC_VERSION
                }
            };
            video_resolution_adj_num = 4;
            fluid_control = serverConfig_1.CloudEC_SERVERCONFIG.IS_TLS_SUPPORT ? 0 : parseInt(config["Device.ComCfg.Media.TmmbrControl"]);
            isSupportHdacc = 0;
            openHdacc = 0;
            if (userConfig_1.CloudEC_CLIENTCONFIG.ISMOBILE) {
                bandwidth_calc_policy = {
                    is_video_bw_include_audio: 1,
                    is_video_bw_subduct_aux: 1,
                    is_h264_hp_same_with_bp: 1,
                    is_video_bw_subduct_aux_recv: 0
                };
                mediaHdaccInfo = {
                    hd_accelerate: {
                        hdencoder: 0,
                        hddecoder: 0
                    }
                };
                if (isSupportHdacc === 1 && bandwidth > 256) {
                    openHdacc = 1;
                }
                if (openHdacc) {
                    video_resolution_table = {
                        table_num: 7,
                        param_set: [
                            { band_width: 1024 - 64, width: 1280, height: 720, max_frame_rate: 20, min_frame_rate: 15, max_bit_rate: 1260, min_bit_rate: 896, adjust_bit_rate: 1260 },
                            { band_width: 768 - 64, width: 768, height: 432, max_frame_rate: 20, min_frame_rate: 15, max_bit_rate: 896, min_bit_rate: 640, adjust_bit_rate: 896 },
                            { band_width: 512 - 64, width: 640, height: 368, max_frame_rate: 20, min_frame_rate: 15, max_bit_rate: 640, min_bit_rate: 448, adjust_bit_rate: 640 },
                            { band_width: 384 - 64, width: 480, height: 272, max_frame_rate: 20, min_frame_rate: 15, max_bit_rate: 448, min_bit_rate: 320, adjust_bit_rate: 448 },
                            { band_width: 256 - 64, width: 320, height: 176, max_frame_rate: 20, min_frame_rate: 15, max_bit_rate: 320, min_bit_rate: 32, adjust_bit_rate: 320 },
                            { band_width: 128 - 0, width: 320, height: 176, max_frame_rate: 20, min_frame_rate: 15, max_bit_rate: 192, min_bit_rate: 32, adjust_bit_rate: 192 },
                            { band_width: 64 - 0, width: 320, height: 176, max_frame_rate: 20, min_frame_rate: 15, max_bit_rate: 96, min_bit_rate: 32, adjust_bit_rate: 96 }
                        ]
                    };
                }
                else {
                    video_resolution_table = {
                        table_num: 7,
                        param_set: [
                            { band_width: 1024 - 64, width: 640, height: 368, max_frame_rate: 20, min_frame_rate: 15, max_bit_rate: 1260, min_bit_rate: 448, adjust_bit_rate: 1260 },
                            { band_width: 768 - 64, width: 640, height: 368, max_frame_rate: 20, min_frame_rate: 15, max_bit_rate: 896, min_bit_rate: 448, adjust_bit_rate: 896 },
                            { band_width: 512 - 64, width: 640, height: 368, max_frame_rate: 20, min_frame_rate: 15, max_bit_rate: 640, min_bit_rate: 448, adjust_bit_rate: 640 },
                            { band_width: 384 - 64, width: 480, height: 272, max_frame_rate: 20, min_frame_rate: 15, max_bit_rate: 448, min_bit_rate: 320, adjust_bit_rate: 448 },
                            { band_width: 256 - 64, width: 320, height: 176, max_frame_rate: 20, min_frame_rate: 15, max_bit_rate: 320, min_bit_rate: 192, adjust_bit_rate: 320 },
                            { band_width: 128 - 0, width: 176, height: 96, max_frame_rate: 20, min_frame_rate: 15, max_bit_rate: 192, min_bit_rate: 32, adjust_bit_rate: 192 },
                            { band_width: 64 - 0, width: 176, height: 96, max_frame_rate: 20, min_frame_rate: 15, max_bit_rate: 96, min_bit_rate: 32, adjust_bit_rate: 96 }
                        ]
                    };
                }
            }
            else {
                bandwidth_calc_policy = {
                    is_video_bw_include_audio: 1,
                    is_video_bw_subduct_aux: 1,
                    is_h264_hp_same_with_bp: 1,
                    is_video_bw_subduct_aux_recv: 0
                };
                video_resolution_table = {
                    table_num: 11,
                    param_set: [
                        { band_width: 2048 - 64, width: 1280, height: 720, max_frame_rate: 30, min_frame_rate: 22, max_bit_rate: 2304, min_bit_rate: 896, adjust_bit_rate: 2304 },
                        { band_width: 1920 - 64, width: 1280, height: 720, max_frame_rate: 30, min_frame_rate: 22, max_bit_rate: 2176, min_bit_rate: 896, adjust_bit_rate: 2176 },
                        { band_width: 1536 - 64, width: 1280, height: 720, max_frame_rate: 30, min_frame_rate: 22, max_bit_rate: 1792, min_bit_rate: 896, adjust_bit_rate: 1792 },
                        { band_width: 1472 - 64, width: 1280, height: 720, max_frame_rate: 30, min_frame_rate: 22, max_bit_rate: 1728, min_bit_rate: 896, adjust_bit_rate: 1728 },
                        { band_width: 1024 - 64, width: 1280, height: 720, max_frame_rate: 30, min_frame_rate: 22, max_bit_rate: 1280, min_bit_rate: 896, adjust_bit_rate: 1280 },
                        { band_width: 768 - 64, width: 960, height: 544, max_frame_rate: 30, min_frame_rate: 22, max_bit_rate: 896, min_bit_rate: 640, adjust_bit_rate: 896 },
                        { band_width: 512 - 64, width: 768, height: 432, max_frame_rate: 25, min_frame_rate: 10, max_bit_rate: 640, min_bit_rate: 192, adjust_bit_rate: 640 },
                        { band_width: 384 - 64, width: 768, height: 432, max_frame_rate: 25, min_frame_rate: 10, max_bit_rate: 512, min_bit_rate: 192, adjust_bit_rate: 512 },
                        { band_width: 256 - 64, width: 768, height: 432, max_frame_rate: 25, min_frame_rate: 10, max_bit_rate: 384, min_bit_rate: 192, adjust_bit_rate: 384 },
                        { band_width: 128 - 0, width: 512, height: 288, max_frame_rate: 15, min_frame_rate: 10, max_bit_rate: 192, min_bit_rate: 96, adjust_bit_rate: 192 },
                        { band_width: 64 - 0, width: 512, height: 288, max_frame_rate: 15, min_frame_rate: 10, max_bit_rate: 96, min_bit_rate: 32, adjust_bit_rate: 96 }
                    ]
                };
            }
            media.video_resolution_table = video_resolution_table;
            media.video_resolution_adj_num = video_resolution_adj_num;
            media.fluid_control = fluid_control;
            media.bandwidth_calc_policy = bandwidth_calc_policy;
            video_hdaccelerate = {
                hd_encoder: openHdacc,
                hd_decoder: 0
            };
            media.video_hdaccelerate = video_hdaccelerate;
            util_1.default.debug("sipCallConfig", "media:Video configuration parameters (set downshift table), media =" + JSON.stringify(media));
            return [2, media];
        });
    }); };
    var initVideoAutoAdjust = function () {
        var config = userConfig_1.CloudEC_CLIENTCONFIG;
        var cloudEC_loginInfo = sessionStorage.cloudEC_loginInfo;
        var loginInfo = JSON.parse(cloudEC_loginInfo);
        var serverAddress = loginInfo.serverAddress;
        var dataShaping = serverConfig_1.CloudEC_SERVERCONFIG.IS_TLS_SUPPORT ? 0 : parseInt(config["Device.ComCfg.Media.VideoShaping"]);
        var rtpHeaderExtend = serverConfig_1.CloudEC_SERVERCONFIG.IS_TLS_SUPPORT ? 0 : 1;
        var media = {
            rtp_hdr_ext: rtpHeaderExtend,
            video_ars: {
                ars: parseInt(config["Device.ComCfg.Media.VideoARS"]),
                ars_ctrl_framesize: parseInt(config["Device.ComCfg.Media.VideoARSFrameSize"]),
                ars_ctrl_framerate: parseInt(config["Device.ComCfg.Media.VideoARSFrameRate"]),
                ars_ctrl_bitrate: parseInt(config["Device.ComCfg.Media.VideoARSBitRate"]),
                ars_ctrl_fec: parseInt(config["Device.ComCfg.Media.VideoArsFec"]),
                ars_data_shaping: dataShaping
            }
        };
        util_1.default.debug("sipCallConfig", "media:Automatic speed reduction configuration parameters, media =" + JSON.stringify(media));
        return media;
    };
    var initVideoHP = function () {
        var media = {
            h264_quality_level_table: {
                param_setnumber: 4,
                quality_level_param_set: [
                    { codec_name: "", pt: 105, profile_idc: 66, packet_mode: 1, level_asymmetry: 1, priority: 3 },
                    { codec_name: "", pt: 106, profile_idc: 66, packet_mode: 0, level_asymmetry: 1, priority: 4 },
                    { codec_name: "", pt: 107, profile_idc: 100, packet_mode: 1, level_asymmetry: 1, priority: 1 },
                    { codec_name: "", pt: 108, profile_idc: 100, packet_mode: 0, level_asymmetry: 1, priority: 2 }
                ]
            }
        };
        util_1.default.debug("sipCallConfig", "media:BP/HP parameters, media =" + JSON.stringify(media));
        return media;
    };
    exports.initIPTParam = function () {
        var noReplyForwardCfg = {
            service: {
                server_right: {
                    type: 17,
                    right: 1,
                    register: 0,
                    active_accesscode: "**61*",
                    deactive_accesscode: "##61#"
                }
            }
        };
        var callWaitCfg = {
            service: {
                server_right: {
                    type: 39,
                    right: 1,
                    register: 0,
                    active_accesscode: "*43#",
                    deactive_accesscode: "#43#"
                }
            }
        };
        var DNDCfg = {
            service: {
                server_right: {
                    type: 13,
                    right: 1,
                    register: 0,
                    active_accesscode: "*56*#",
                    deactive_accesscode: "#56#"
                }
            }
        };
        var unConditionForwardCfg = {
            service: {
                server_right: {
                    type: 15,
                    right: 1,
                    register: 0,
                    active_accesscode: "**21*",
                    deactive_accesscode: "##21#"
                }
            }
        };
        var busyForwardCfg = {
            service: {
                server_right: {
                    type: 16,
                    right: 1,
                    register: 0,
                    active_accesscode: "**67*",
                    deactive_accesscode: "##67#"
                }
            }
        };
        var offLineForwardCfg = {
            service: {
                server_right: {
                    type: 18,
                    right: 1,
                    register: 0,
                    active_accesscode: "**45*",
                    deactive_accesscode: "##45#"
                }
            }
        };
        var iptParam = [noReplyForwardCfg, callWaitCfg, DNDCfg, unConditionForwardCfg, busyForwardCfg, offLineForwardCfg];
        return iptParam;
    };
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 359 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(360), __webpack_require__(28), __webpack_require__(1), __webpack_require__(14)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, TUPRender_1, observer_1, util_1, serverConfig_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TUPCall = (function () {
        function TUPCall(opts) {
            var _this = this;
            this.notifyFuncs = [];
            this.rspFuncs = [];
            this.wsocket = {};
            this.dropFrame = 2;
            this.setVideoRender = function (localView, remoteView) {
                observer_1.default.subscribe('VideoSocketResult', function (ret) {
                    if (ret.result && "local_frame" == ret.info.canvasType) {
                        _this.localRState = 1;
                    }
                    else if (ret.result && "remote_frame" == ret.info.canvasType) {
                        _this.remoteRState = 1;
                    }
                    else if (!ret.result && "local_frame" == ret.info.errorInfo.canvasType) {
                        _this.localRState = 0;
                    }
                    else if (!ret.result && "remote_frame" == ret.info.errorInfo.canvasType) {
                        _this.remoteRState = 0;
                        _this.dropFrame = _this.dropFrame + 1;
                    }
                });
                if (typeof _this.localR == "undefined" || _this.localRState == 0) {
                    if (typeof _this.localR != "undefined") {
                        _this.localR.closeChannel();
                    }
                    _this.localR = new TUPRender_1.default({ getUri: "local_frame", canvas: localView, svrAddr: serverConfig_1.CloudEC_SERVERCONFIG.ENTERPRISE_DOMAIN, ssl: serverConfig_1.CloudEC_SERVERCONFIG.IS_WSS });
                }
                else {
                    _this.localR.makeYUVCanvas(localView);
                }
                if (typeof _this.remoteR == "undefined" || _this.remoteRState == 0) {
                    if (typeof _this.remoteR != "undefined") {
                        _this.remoteR.closeChannel();
                    }
                    _this.remoteR = new TUPRender_1.default({ getUri: "remote_frame", canvas: remoteView, svrAddr: serverConfig_1.CloudEC_SERVERCONFIG.ENTERPRISE_DOMAIN, ssl: serverConfig_1.CloudEC_SERVERCONFIG.IS_WSS });
                }
                else {
                    _this.remoteR.makeYUVCanvas(remoteView);
                }
            };
            this.setDataRender = function (dataView) {
                if (typeof _this.dataR == "undefined") {
                    _this.dataR = new TUPRender_1.default({ getUri: "data_frame", canvas: dataView });
                }
                else {
                    _this.dataR.makeYUVCanvas(dataView);
                }
            };
            this.setLocalViewWH = function (width, height) {
                _this.localR.setViewWH(width, height);
            };
            this.setRemoteViewWH = function (width, height) {
                _this.remoteR.setViewWH(width, height);
            };
            this.setDataViewWH = function (width, height) {
                _this.dataR.setViewWH(width, height);
            };
            this.sendData = function (data) {
                var sendStr = JSON.stringify(data);
                if (_this.uniSocket)
                    _this.uniSocket.sendData(sendStr);
                else
                    _this.wsocket.send(sendStr);
            };
            this.config = function (params, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x1] = callbacks.response;
                }
                var data = {
                    "cmd": 0x10001,
                    "description": "tup_call_config",
                    "param": params
                };
                _this.sendData(data);
            };
            this.register = function (sip_num, sip_name, sip_pwd, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x2] = callbacks.response;
                }
                if (callbacks && typeof callbacks.onRegStatusUpdate == "function") {
                    _this.notifyFuncs[1] = callbacks.onRegStatusUpdate;
                }
                if (callbacks && typeof callbacks.onForceUnReg == "function") {
                    _this.notifyFuncs[131] = callbacks.onForceUnReg;
                }
                var data = {
                    "cmd": 0x10002,
                    "description": "tup_call_register",
                    "param": {
                        "name": sip_name,
                        "number": sip_num,
                        "pwd": sip_pwd
                    }
                };
                _this.sendData(data);
                data.param.pwd = "";
            };
            this.deRegister = function (sip_num, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x3] = callbacks.response;
                }
                var data = {
                    "cmd": 0x10003,
                    "description": "tup_call_deregister",
                    "param": {
                        "number": sip_num
                    }
                };
                _this.sendData(data);
            };
            this.setBasicCallEvent = function (callbacks) {
                if (callbacks && typeof callbacks.onCallIncoming == "function") {
                    _this.notifyFuncs[3] = callbacks.onCallIncoming;
                }
                if (callbacks && typeof callbacks.onCallOutGoing == "function") {
                    _this.notifyFuncs[4] = callbacks.onCallOutGoing;
                }
                if (callbacks && typeof callbacks.onCallRingBack == "function") {
                    _this.notifyFuncs[5] = callbacks.onCallRingBack;
                }
                if (callbacks && typeof callbacks.onCallConnected == "function") {
                    _this.notifyFuncs[6] = callbacks.onCallConnected;
                }
                if (callbacks && typeof callbacks.onCallEnded == "function") {
                    _this.notifyFuncs[7] = callbacks.onCallEnded;
                }
                if (callbacks && typeof callbacks.onCallDestroy == "function") {
                    _this.notifyFuncs[8] = callbacks.onCallDestroy;
                }
                if (callbacks && typeof callbacks.onCallRtpCreated == "function") {
                    _this.notifyFuncs[9] = callbacks.onCallRtpCreated;
                }
                if (callbacks && typeof callbacks.onSessionModified == "function") {
                    _this.notifyFuncs[37] = callbacks.onSessionModified;
                }
                if (callbacks && typeof callbacks.onCallEvtidoOverBfcp == "function") {
                    _this.notifyFuncs[250] = callbacks.onCallEvtidoOverBfcp;
                }
                if (callbacks && typeof callbacks.onServerConfBeTransferToPrereceConf == "function") {
                    _this.notifyFuncs[156] = callbacks.onServerConfBeTransferToPrereceConf;
                }
                if (callbacks && typeof callbacks.onServerConfDataConfParam == "function") {
                    _this.notifyFuncs[144] = callbacks.onServerConfDataConfParam;
                }
                if (callbacks && typeof callbacks.onNewServiceRight == "function") {
                    _this.notifyFuncs[136] = callbacks.onNewServiceRight;
                }
                if (callbacks && typeof callbacks.onSetIptServiceSuccess == "function") {
                    _this.notifyFuncs[50] = callbacks.onSetIptServiceSuccess;
                }
                if (callbacks && typeof callbacks.onSetIptServiceFailed == "function") {
                    _this.notifyFuncs[51] = callbacks.onSetIptServiceFailed;
                }
                if (callbacks && typeof callbacks.onCallHoldSuccess == "function") {
                    _this.notifyFuncs[39] = callbacks.onCallHoldSuccess;
                }
                if (callbacks && typeof callbacks.onCallHoldFailed == "function") {
                    _this.notifyFuncs[40] = callbacks.onCallHoldFailed;
                }
                if (callbacks && typeof callbacks.onCallBldTransferRecvSucRsp == "function") {
                    _this.notifyFuncs[45] = callbacks.onCallBldTransferRecvSucRsp;
                }
                if (callbacks && typeof callbacks.onCallBldTransferFailed == "function") {
                    _this.notifyFuncs[47] = callbacks.onCallBldTransferFailed;
                }
                if (callbacks && typeof callbacks.onCallBldTransferSuccess == "function") {
                    _this.notifyFuncs[46] = callbacks.onCallBldTransferSuccess;
                }
            };
            this.setVideoCallEvent = function (callbacks) {
                if (callbacks && typeof callbacks.onCallAddVideo == "function") {
                    _this.notifyFuncs[10] = callbacks.onCallAddVideo;
                }
                if (callbacks && typeof callbacks.onCallDelVideo == "function") {
                    _this.notifyFuncs[11] = callbacks.onCallDelVideo;
                }
                if (callbacks && typeof callbacks.onCallModifyVideoResult == "function") {
                    _this.notifyFuncs[12] = callbacks.onCallModifyVideoResult;
                }
            };
            this.setdataEvent = function (callbacks) {
                if (callbacks && typeof callbacks.onDataSending == "function") {
                    _this.notifyFuncs[33] = callbacks.onDataSending;
                }
                if (callbacks && typeof callbacks.onDataRecving == "function") {
                    _this.notifyFuncs[34] = callbacks.onDataRecving;
                }
                if (callbacks && typeof callbacks.onDataStopped == "function") {
                    _this.notifyFuncs[36] = callbacks.onDataStopped;
                }
            };
            this.startCall = function (callee_num, is_video_call, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x4] = callbacks.response;
                }
                var data = {
                    "cmd": 0x10004,
                    "description": "tup_call_start_call",
                    "param": {
                        "callee_num": callee_num,
                        "call_type": (is_video_call || 0)
                    }
                };
                _this.sendData(data);
            };
            this.acceptCall = function (callid, is_video_call, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x5] = callbacks.response;
                }
                var data = {
                    "cmd": 0x10005,
                    "description": "tup_call_accept_call",
                    "param": {
                        "call_id": callid,
                        "is_video": (is_video_call || 0)
                    }
                };
                _this.sendData(data);
            };
            this.endCall = function (callid, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x6] = callbacks.response;
                }
                var data = {
                    "cmd": 0x10006,
                    "description": "tup_call_end_call",
                    "param": {
                        "call_id": callid
                    }
                };
                _this.sendData(data);
            };
            this.dtmf = function (callid, keyTone, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x7] = callbacks.response;
                }
                var tone;
                if (keyTone == "*") {
                    tone = 10;
                }
                else if (keyTone == "#") {
                    tone = 11;
                }
                else {
                    tone = Number(keyTone);
                }
                var data = {
                    "cmd": 0x10007,
                    "description": "tup_call_dtmf",
                    "param": {
                        "call_id": callid,
                        "dtmf_tone": tone
                    }
                };
                _this.sendData(data);
            };
            this.operateMic = function (callid, to_mute, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x8] = callbacks.response;
                }
                var data = {
                    "cmd": 0x10008,
                    "description": "tup_call_media_mute_mic",
                    "param": {
                        "call_id": callid,
                        "is_on": to_mute
                    }
                };
                _this.sendData(data);
            };
            this.setMobileAudioRoute = function (device, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x9] = callbacks.response;
                }
                var data = {
                    "cmd": 0x10009,
                    "description": "tup_call_set_mobile_audio_route",
                    "param": {
                        "device": device
                    }
                };
                _this.sendData(data);
            };
            this.getMobileAudioRoute = function (callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x55] = callbacks.response;
                }
                var data = {
                    "cmd": 0x10055,
                    "description": "tup_call_get_mobile_audio_route"
                };
                _this.sendData(data);
            };
            this.setVolumUpdate = function (callbacks) {
                if (callbacks && typeof callbacks.onSpeakVolumeChange == "function") {
                    _this.notifyFuncs[22] = callbacks.onSpeakVolumeChange;
                }
                if (callbacks && typeof callbacks.onMicVolumeChange == "function") {
                    _this.notifyFuncs[23] = callbacks.onMicVolumeChange;
                }
            };
            this.getMicVol = function (callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0xa] = callbacks.response;
                }
                var data = {
                    "cmd": 0x1000a,
                    "description": "tup_call_media_get_mic_volume"
                };
                _this.sendData(data);
            };
            this.setMicVol = function (volume, device, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0xb] = callbacks.response;
                }
                var data = {
                    "cmd": 0x1000b,
                    "description": "tup_call_media_set_mic_volume",
                    "param": {
                        "device": device || 1,
                        "volume": volume
                    }
                };
                _this.sendData(data);
            };
            this.getSpkVol = function (callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0xc] = callbacks.response;
                }
                var data = {
                    "cmd": 0x1000c,
                    "description": "tup_call_media_get_speak_volume"
                };
                _this.sendData(data);
            };
            this.setSpkVol = function (volume, device, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0xd] = callbacks.response;
                }
                var data = {
                    "cmd": 0x1000d,
                    "description": "tup_call_media_set_speak_volume",
                    "param": {
                        "device": device || 0,
                        "volume": volume
                    }
                };
                _this.sendData(data);
            };
            this.alertingCall = function (callid, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x10] = callbacks.response;
                }
                var data = {
                    "cmd": 0x10010,
                    "description": "tup_call_alerting_call",
                    "param": {
                        "call_id": callid
                    }
                };
                _this.sendData(data);
            };
            this.holdCall = function (call_id, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x12] = callbacks.response;
                }
                var data = {
                    "cmd": 0x10012,
                    "description": "tup_call_hold_call",
                    "param": {
                        "call_id": call_id
                    }
                };
                _this.sendData(data);
            };
            this.unholdCall = function (call_id, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x13] = callbacks.response;
                }
                if (callbacks && typeof callbacks.onCallUnHoldSuccess == "function") {
                    _this.notifyFuncs[41] = callbacks.onCallUnHoldSuccess;
                }
                if (callbacks && typeof callbacks.onCallUnHoldFailed == "function") {
                    _this.notifyFuncs[42] = callbacks.onCallUnHoldFailed;
                }
                var data = {
                    "cmd": 0x10013,
                    "description": "tup_call_unhold_call",
                    "param": {
                        "call_id": call_id
                    }
                };
                _this.sendData(data);
            };
            this.divertCall = function (call_id, divert_number, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x14] = callbacks.response;
                }
                if (callbacks && typeof callbacks.onCallDivertFailed == "function") {
                    _this.notifyFuncs[44] = callbacks.onCallDivertFailed;
                }
                var data = {
                    "cmd": 0x10014,
                    "description": "tup_call_divert_call",
                    "param": {
                        "call_id": call_id,
                        "divert_number": divert_number
                    }
                };
                _this.sendData(data);
            };
            this.blindTransfer = function (call_id, transto_number, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x15] = callbacks.response;
                }
                var data = {
                    "cmd": 0x10015,
                    "description": "tup_call_blind_transfer",
                    "param": {
                        "call_id": call_id,
                        "transto_number": transto_number
                    }
                };
                _this.sendData(data);
            };
            this.consultTransfer = function (call_id, transto_callid, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x16] = callbacks.response;
                }
                if (callbacks && typeof callbacks.success == "function") {
                    _this.notifyFuncs[48] = callbacks.success;
                }
                if (callbacks && typeof callbacks.fail == "function") {
                    _this.notifyFuncs[49] = callbacks.fail;
                }
                var data = {
                    "cmd": 0x10016,
                    "description": "tup_call_consult_transfer",
                    "param": {
                        "call_id": call_id,
                        "transto_callid": transto_callid
                    }
                };
                _this.sendData(data);
            };
            this.replyAddVideo = function (call_id, is_accept, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x1A] = callbacks.response;
                }
                var data = {
                    "cmd": 0x1001A,
                    "description": "tup_call_reply_add_video",
                    "param": {
                        "call_id": call_id,
                        "is_accept": is_accept
                    }
                };
                _this.sendData(data);
            };
            this.addVideo = function (call_id, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x1B] = callbacks.response;
                }
                var data = {
                    "cmd": 0x1001B,
                    "description": "tup_call_add_video",
                    "param": {
                        "call_id": call_id
                    }
                };
                _this.sendData(data);
            };
            this.delVideo = function (call_id, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x1C] = callbacks.response;
                }
                var data = {
                    "cmd": 0x1001C,
                    "description": "tup_call_del_video",
                    "param": {
                        "call_id": call_id
                    }
                };
                _this.sendData(data);
            };
            this.startPreview = function (video_index, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x1D] = callbacks.response;
                }
                var data = {
                    "cmd": 0x1001D,
                    "description": "tup_call_open_preview",
                    "param": {
                        "handle": 0,
                        "index": 0
                    }
                };
                _this.sendData(data);
            };
            this.stopPreview = function (callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x1E] = callbacks.response;
                }
                var data = {
                    "cmd": 0x1001E,
                    "description": "tup_call_close_preview"
                };
                _this.sendData(data);
            };
            this.muteSpeaker = function (callid, to_mute, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x21] = callbacks.response;
                }
                var data = {
                    "cmd": 0x10021,
                    "description": "tup_call_media_mute_speak",
                    "param": {
                        "call_id": callid,
                        "is_on": to_mute
                    }
                };
                _this.sendData(data);
            };
            this.startRecode = function (call_id, file_name, is_video, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x23] = callbacks.response;
                }
                var data = {
                    "cmd": 0x10023,
                    "description": "tup_call_media_startrecord",
                    "param": {
                        "call_id": call_id,
                        "file_name": file_name,
                        "is_on": is_video || 0
                    }
                };
                _this.sendData(data);
            };
            this.stopRecode = function (call_id, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x24] = callbacks.response;
                }
                var data = {
                    "cmd": 0x10024,
                    "description": "tup_call_media_stoprecord",
                    "param": {
                        "call_id": call_id,
                    }
                };
                _this.sendData(data);
            };
            this.startPlayMediaFile = function (path, loop_times, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x25] = callbacks.response;
                }
                var data = {
                    "cmd": 0x10025,
                    "description": "tup_call_media_startplay",
                    "param": {
                        "play_file": path,
                        "loops": loop_times || 0
                    }
                };
                _this.sendData(data);
            };
            this.stopPlayMediaFile = function (play_handle, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x27] = callbacks.response;
                }
                var data = {
                    "cmd": 0x10027,
                    "description": "tup_call_media_stopplay",
                    "param": {
                        "play_handle": play_handle
                    }
                };
                _this.sendData(data);
            };
            this.setVideoIdx = function (index, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x2A] = callbacks.response;
                }
                var data = {
                    "cmd": 0x1002A,
                    "description": "tup_call_media_set_video_index",
                    "param": {
                        "index": index
                    }
                };
                _this.sendData(data);
            };
            this.setAudioInGain = function (gain, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x2E] = callbacks.response;
                }
                var data = {
                    "cmd": 0x1002E,
                    "description": "tup_call_media_set_audio_ingain",
                    "param": {
                        "in_gain": gain
                    }
                };
                _this.sendData(data);
            };
            this.getAudioInGain = function (callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x2F] = callbacks.response;
                }
                var data = {
                    "cmd": 0x1002F,
                    "description": "tup_call_media_get_audio_ingain"
                };
                _this.sendData(data);
            };
            this.setAudioOutGain = function (gain, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x30] = callbacks.response;
                }
                var data = {
                    "cmd": 0x10030,
                    "description": "tup_call_media_set_audio_outgain",
                    "param": {
                        "out_gain": gain
                    }
                };
                _this.sendData(data);
            };
            this.getAudioOutGain = function (callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x31] = callbacks.response;
                }
                var data = {
                    "cmd": 0x10031,
                    "description": "tup_call_media_get_audio_outgain"
                };
                _this.sendData(data);
            };
            this.getMediaDevices = function (type, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x32] = callbacks.response;
                }
                var data = {
                    "cmd": 0x10032,
                    "description": "tup_call_media_get_devices",
                    "param": {
                        "device_type": type
                    }
                };
                _this.sendData(data);
            };
            this.setForwardIPTService = function (type, forward_num, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x33] = callbacks.response;
                }
                var data = {
                    "cmd": 0x10033,
                    "description": "tup_call_set_IPTservice",
                    "param": {
                        "type": type,
                        "forward_num": forward_num
                    }
                };
                _this.sendData(data);
            };
            this.setHMELog = function () {
                var data = {
                    "cmd": 0x1004D,
                    "description": "tup_call_hme_log_info",
                    "param": {
                        "audio_log_level": 3,
                        "audio_max_size": 10,
                        "video_log_level": 3,
                        "video_max_size": 10
                    }
                };
                _this.sendData(data);
            };
            this.setCaptureFile = function (call_id, file_name, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x5C] = callbacks.response;
                }
                var data = {
                    "cmd": 0x1005C,
                    "description": "tup_call_set_video_capture_file",
                    "param": {
                        "call_id": call_id,
                        "file_name": file_name
                    }
                };
                _this.sendData(data);
            };
            this.getChannelInfo = function (callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x88] = callbacks.response;
                }
                var data = {
                    "cmd": 0x10088,
                    "description": "tup_call_get_channelinfo",
                    "param": {
                        "accountid": 0
                    }
                };
                _this.sendData(data);
            };
            this.setVideoWindow = function (count, call_window, callid, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x14A] = callbacks.response;
                }
                var data = {
                    "cmd": 0x1014A,
                    "description": "tup_call_set_video_window",
                    "param": {
                        "count": count,
                        "callid": callid,
                        "win": call_window
                    }
                };
                _this.sendData(data);
            };
            this.mediaMuteVideo = function (callid, is_on, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x22] = callbacks.response;
                }
                var data = {
                    "cmd": 0x10022,
                    "description": "tup_call_media_mute_video",
                    "param": {
                        "call_id": callid,
                        "is_on": is_on
                    }
                };
                _this.sendData(data);
            };
            this.setMicIndex = function (idx, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x28] = callbacks.response;
                }
                var data = {
                    "cmd": 0x10028,
                    "description": "tup_call_media_set_mic_index",
                    "param": {
                        "index": idx
                    }
                };
                _this.sendData(data);
            };
            this.mediaGetMicIndex = function (callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x2B] = callbacks.response;
                }
                var data = {
                    "cmd": 0x1002B,
                    "description": "tup_call_media_get_mic_index",
                };
                _this.sendData(data);
            };
            this.setSpeakIndex = function (idx, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x29] = callbacks.response;
                }
                var data = {
                    "cmd": 0x10029,
                    "description": "tup_call_media_set_speak_index",
                    "param": {
                        "index": idx
                    }
                };
                _this.sendData(data);
            };
            this.mediaGetSpeakIndex = function (callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x2C] = callbacks.response;
                }
                var data = {
                    "cmd": 0x1002C,
                    "description": "tup_call_media_get_speak_index",
                };
                _this.sendData(data);
            };
            this.mediaGetVideoIndex = function (callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x2D] = callbacks.response;
                }
                var data = {
                    "cmd": 0x1002D,
                    "description": "tup_call_media_get_video_index",
                };
                _this.sendData(data);
            };
            this.startData = function (callid, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x56] = callbacks.response;
                }
                var data = {
                    "cmd": 0x10056,
                    "description": "tup_call_start_data",
                    "param": {
                        "call_id": callid
                    }
                };
                _this.sendData(data);
            };
            this.stopData = function (callid, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x57] = callbacks.response;
                }
                var data = {
                    "cmd": 0x10057,
                    "description": "tup_call_stop_data",
                    "param": {
                        "call_id": callid
                    }
                };
                _this.sendData(data);
            };
            this.dataControl = function (data_control, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x54] = callbacks.response;
                }
                var data = {
                    "cmd": 0x10054,
                    "description": "tup_call_data_control",
                    "param": {
                        "data_control": data_control
                    }
                };
                _this.sendData(data);
            };
            this.getDataMaxFrameSize = function (call_id, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x50] = callbacks.response;
                }
                var data = {
                    "cmd": 0x10050,
                    "description": "tup_call_data_control",
                    "param": {
                        "call_id": call_id
                    }
                };
                _this.sendData(data);
            };
            this.accessReservedConf = function (access_code, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x4B] = callbacks.response;
                }
                var data = {
                    "cmd": 0x1004B,
                    "description": "tup_call_serverconf_access_reservedconf",
                    "param": {
                        "access_code": access_code
                    }
                };
                _this.sendData(data);
            };
            this.accessReservedConfEx = function (call_id, call_type, pstconfparam, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x6D] = callbacks.response;
                }
                var data = {
                    "cmd": 0x1006D,
                    "description": "tup_call_serverconf_access_reservedconf_ex",
                    "param": {
                        "call_type": call_type,
                        "pstconfparam": pstconfparam
                    }
                };
                _this.sendData(data);
            };
            this.TransferToConfEx = function (conf_call_id, call_id, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x14C] = callbacks.response;
                }
                if (callbacks && typeof callbacks.OnServerConfTransferToConfSuccess == "function") {
                    _this.notifyFuncs[157] = callbacks.OnServerConfTransferToConfSuccess;
                }
                if (callbacks && typeof callbacks.OnServerConfTransferToConfFailed == "function") {
                    _this.notifyFuncs[158] = callbacks.OnServerConfTransferToConfFailed;
                }
                var data = {
                    "cmd": 0x1014C,
                    "description": "tup_call_serverconf_transferto_conf_ex",
                    "param": {
                        "conf_call_id": conf_call_id,
                        "call_id": call_id
                    }
                };
                _this.sendData(data);
            };
            this.videoControl = function (is_sync, call_id, module, operation, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x53] = callbacks.response;
                }
                var data = {
                    "cmd": 0x10053,
                    "description": "tup_call_video_control",
                    "param": {
                        "is_sync": is_sync,
                        "call_id": call_id,
                        "module": module,
                        "operation": operation
                    }
                };
                _this.sendData(data);
            };
            this.setVideoEncLinkedInfo = function (callId, link_info, link_type) {
                var data = {
                    "cmd": 0x1014E,
                    "description": "tup_call_set_enc_linked_info",
                    "param": {
                        "callId": callId,
                        "link_info": link_info,
                        "link_type": link_type,
                    }
                };
                _this.sendData(data);
            };
            this.stopLocalServer = function () {
                var data = {
                    "cmd": 0x1014D,
                    "description": "tup_call_stop_local_server"
                };
                _this.sendData(data);
            };
            this.getCallMediaParams = function (params, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[0x11] = callbacks.response;
                }
                var data = {
                    "cmd": 0x10011,
                    "description": "tup_call_get_callstatics",
                    "param": params
                };
                _this.sendData(data);
            };
            this.section_id = 0x10000;
            this.name = "Call";
            this.notifyFuncs = new Array();
            this.rspFuncs = new Array();
            var callServiceAddr = opts.callSvrAddr || "127.0.0.1";
            if (opts.socket) {
                this.uniSocket = opts.socket;
                this.uniSocket.registerService(this);
            }
            else {
                var pcol = "ws://";
                if (opts.ssl === 1) {
                    pcol = "wss://";
                }
                this.wsocket = new WebSocket(pcol + callServiceAddr + ":7684", "tup_call_service_protocol");
                this.wsocket.onopen = opts.ready;
                this.wsocket.onclose = opts.close;
                this.wsocket.onmessage = function (msg) {
                    var data = JSON.parse(msg.data);
                    if (((data.notify < 0x18011 || data.notify > 0x18015) && data.notify != 0x1801c) || data.rsp > 0) {
                        util_1.default.debug("tupCall", msg.data);
                    }
                    _this.msgProcessor(data);
                };
            }
        }
        TUPCall.prototype.msgProcessor = function (data) {
            if (data.notify > 0) {
                var notifyIdx = data.notify & 0x7fff;
                if (typeof this.notifyFuncs[notifyIdx] == "function") {
                    this.notifyFuncs[notifyIdx](data);
                }
            }
            if (data.rsp > 0) {
                var rspIdx = data.rsp & 0x7fff;
                if (typeof this.rspFuncs[rspIdx] == "function")
                    this.rspFuncs[rspIdx](data);
            }
        };
        return TUPCall;
    }());
    exports.default = TUPCall;
    ;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 360 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(136), __webpack_require__(11), __webpack_require__(14), __webpack_require__(28), __webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, YUVCanvas_1, enum_1, serverConfig_1, observer_1, util_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TUPRender = (function () {
        function TUPRender(opts) {
            var _this = this;
            var serviceAddr = opts.svrAddr || "localhost";
            var serviceName = opts.serviceName || "tup_call_video_service_protocol";
            var pcol = "ws://";
            if (opts.ssl === 1) {
                pcol = "wss://";
            }
            this.wsocket = new WebSocket(pcol + serviceAddr + ":7684/" + opts.getUri, serviceName);
            this.url = opts.getUri;
            this.wsocket.binaryType = "arraybuffer";
            this.channel_status = enum_1.CLOUDEC_CHANNEL_STATUS.IDLE;
            this.is_enable = 1;
            this.frameCnt = 0;
            this.makeYUVCanvas(opts.canvas);
            this.wsocket.onerror = function () {
                util_1.default.error("tupRender", "wsocket.onerror:" + opts.getUri);
            };
            this.wsocket.onclose = function () {
                util_1.default.error("tupRender", "wsocket.onclose:" + opts.getUri);
                observer_1.default.publish('VideoSocketResult', { result: false, info: { cmdId: 300000000, errorCode: 390000002, errorInfo: { canvasType: opts.getUri, description: " wsocket.onclose：your computer CPU performance can't catch with video,close the video of meeting" } } });
                _this.channel_status = enum_1.CLOUDEC_CHANNEL_STATUS.CLOSED;
            };
            this.wsocket.onopen = function () {
                util_1.default.info("tupRender", "wsocket.onopen" + opts.getUri);
                observer_1.default.publish('VideoSocketResult', { result: true, info: { canvasType: opts.getUri, description: " wsocket.onopen" } });
                var data = {
                    "width": _this.width,
                    "height": _this.height
                };
                var sendStr = JSON.stringify(data);
                _this.channel_status = enum_1.CLOUDEC_CHANNEL_STATUS.CONNECTED;
                _this.wsocket.send(sendStr);
                _this.setDropFrame(serverConfig_1.CloudEC_SERVERCONFIG.DROP_FRAME_COUNT);
            };
            this.wsocket.onmessage = function (msg) {
                if (typeof msg.data === "string") {
                    var videoParam = JSON.parse(msg.data);
                    util_1.default.debug("tupRender", videoParam);
                    _this.width = videoParam.width;
                    _this.height = videoParam.height;
                    _this.ylen = _this.width * _this.height;
                    _this.uvlen = (_this.width / 2) * (_this.height / 2);
                    _this.or_width = videoParam.original_width;
                    _this.or_height = videoParam.original_height;
                    if (_this.yuvCanvas == null) {
                        _this.yuvCanvas = new YUVCanvas_1.default({ canvas: _this.canvas, width: _this.width, height: _this.height });
                        if (!_this.yuvCanvas.isWebGL()) {
                            util_1.default.error("tupRender", "Could not initialise WebGL");
                        }
                    }
                }
                else {
                    _this.frameCnt++;
                    if (_this.frameCnt % 30 == 0) {
                        _this.frameCnt = 0;
                    }
                    if (_this.is_enable) {
                        _this.drawImage(msg.data);
                    }
                }
            };
        }
        ;
        TUPRender.prototype.drawImage = function (data) {
            var bytes = new Uint8Array(data);
            var ylen = this.width * this.height;
            var uvlen = (this.width / 2) * (this.height / 2);
            this.yuvCanvas.drawNextOutputPicture({
                yData: bytes.subarray(0, ylen),
                uData: bytes.subarray(ylen, ylen + uvlen),
                vData: bytes.subarray(ylen + uvlen, ylen + uvlen + uvlen),
                yDataPerRow: this.width,
                yRowCnt: this.height,
                uDataPerRow: this.width / 2,
                uRowCnt: this.height / 2
            });
        };
        TUPRender.prototype.sendData = function (data) {
            var sendStr = JSON.stringify(data);
            this.wsocket.send(sendStr);
        };
        TUPRender.prototype.makeYUVCanvas = function (_canvas) {
            delete this.canvas;
            this.canvas = _canvas;
            this.height = _canvas.height;
            this.width = _canvas.width;
            this.is_enable = 1;
            this.yuvCanvas = new YUVCanvas_1.default({ canvas: this.canvas, width: this.width, height: this.height });
            if (!this.yuvCanvas.isWebGL()) {
                util_1.default.error("tupRender", "Could not initialise WebGL");
            }
            ;
        };
        TUPRender.prototype.setViewWH = function (width, height) {
            this.is_enable = 1;
            if (this.channel_status === enum_1.CLOUDEC_CHANNEL_STATUS.CONNECTED) {
                var data = {
                    "width": width,
                    "height": height
                };
                this.sendData(data);
            }
            this.viewW = width;
            this.viewH = height;
            if (this.yuvCanvas) {
                this.yuvCanvas.changeCanvasSize(width, height);
            }
        };
        ;
        TUPRender.prototype.closeChannel = function () {
            util_1.default.error("tupRender", "websocket close");
            this.wsocket.close();
        };
        TUPRender.prototype.setRenderEnableFlag = function (is_enable) {
            this.is_enable = is_enable;
        };
        TUPRender.prototype.setDropFrame = function (count) {
            if (count === void 0) { count = 2; }
            util_1.default.info("tupRender", "setDropFrame count=" + count);
            var data = {
                "drop_frame": count
            };
            this.sendData(data);
        };
        return TUPRender;
    }());
    exports.default = TUPRender;
    ;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 361 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(138), __webpack_require__(51), __webpack_require__(28), __webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, callService_1, tupCallWrapper_1, observer_1, util_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var AudioCallService = (function (_super) {
        __extends(AudioCallService, _super);
        function AudioCallService(data) {
            var _this = _super.call(this, data) || this;
            if (!data) {
                util_1.default.error("audioCallService", 'can not create AudioCallService object');
                return _this;
            }
            return _this;
        }
        AudioCallService.prototype.acceptCall = function () {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper, res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            wrapper = tupCallWrapper_1.default.getInstance();
                            return [4, wrapper.acceptCall(this.callInfo.callId, 0)];
                        case 1:
                            res = _a.sent();
                            if (0 === res.result) {
                                util_1.default.info("audioCallService", 'accept call success');
                            }
                            else {
                                util_1.default.debug("audioCallService", 'accept call failed, result = ' + res.result);
                            }
                            return [2];
                    }
                });
            });
        };
        AudioCallService.prototype.holdCall = function () {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper, res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            wrapper = tupCallWrapper_1.default.getInstance();
                            return [4, wrapper.holdCall(this.callInfo.callId)];
                        case 1:
                            res = _a.sent();
                            if (0 === res.result) {
                                util_1.default.info("audioCallService", 'hold call success');
                            }
                            else {
                                util_1.default.debug("audioCallService", 'hold call failed, result = ' + res.result);
                            }
                            return [2];
                    }
                });
            });
        };
        AudioCallService.prototype.unHoldCall = function () {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper, res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            wrapper = tupCallWrapper_1.default.getInstance();
                            return [4, wrapper.unholdCall(this.callInfo.callId)];
                        case 1:
                            res = _a.sent();
                            if (0 === res.result) {
                                util_1.default.info("audioCallService", 'unhold call success');
                            }
                            else {
                                util_1.default.debug("audioCallService", 'unhold call failed, result = ' + res.result);
                            }
                            return [2];
                    }
                });
            });
        };
        AudioCallService.prototype.divertCall = function (divertNumber) {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper, res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            wrapper = tupCallWrapper_1.default.getInstance();
                            return [4, wrapper.divertCall(this.callInfo.callId, divertNumber)];
                        case 1:
                            res = _a.sent();
                            if (0 === res.result) {
                                util_1.default.info("audioCallService", 'divert call success');
                            }
                            else {
                                util_1.default.debug("audioCallService", 'divert call failed, result = ' + res.result);
                            }
                            return [2];
                    }
                });
            });
        };
        AudioCallService.prototype.blindTransfer = function (transtoNumber) {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper, res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            wrapper = tupCallWrapper_1.default.getInstance();
                            return [4, wrapper.blindTransfer(this.callInfo.callId, transtoNumber)];
                        case 1:
                            res = _a.sent();
                            if (0 === res.result) {
                                util_1.default.info("audioCallService", 'blind transfer call success');
                            }
                            else {
                                util_1.default.debug("audioCallService", 'blind transfer call failed, result = ' + res.result);
                            }
                            return [2];
                    }
                });
            });
        };
        AudioCallService.prototype.consultTransfer = function (transtoCallId) {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper, res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            wrapper = tupCallWrapper_1.default.getInstance();
                            return [4, wrapper.consultTransfer(this.callInfo.callId, transtoCallId)];
                        case 1:
                            res = _a.sent();
                            if (0 === res.result) {
                                util_1.default.info("audioCallService", 'consult transfer call success');
                            }
                            else {
                                util_1.default.debug("audioCallService", 'consult transfer call failed, result = ' + res.result);
                            }
                            return [2];
                    }
                });
            });
        };
        AudioCallService.prototype.addVideo = function () {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper, res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            wrapper = tupCallWrapper_1.default.getInstance();
                            return [4, wrapper.addVideo(this.callInfo.callId)];
                        case 1:
                            res = _a.sent();
                            if (0 === res.result) {
                                util_1.default.info("audioCallService", 'add video call success');
                            }
                            else {
                                util_1.default.debug("audioCallService", 'add video call failed, result = ' + res.result);
                            }
                            return [2];
                    }
                });
            });
        };
        AudioCallService.prototype.replyAddVideo = function (is_accept) {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper, res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            wrapper = tupCallWrapper_1.default.getInstance();
                            return [4, wrapper.replyAddVideo(this.callInfo.callId, is_accept)];
                        case 1:
                            res = _a.sent();
                            if (0 === res.result) {
                                util_1.default.info("audioCallService", 'reply add video success');
                            }
                            else {
                                util_1.default.debug("audioCallService", 'reply add video failed, result = ' + res.result);
                            }
                            return [2];
                    }
                });
            });
        };
        AudioCallService.prototype.handleCallHoldSuccess = function (callInfo) {
            this.callInfo.callState = callInfo.param.call_state;
            observer_1.default.publish('CallHoldSuccess', callInfo.param);
            util_1.default.debug("audioCallService", 'CallHoldSuccess, param=' + JSON.stringify(callInfo.param));
        };
        AudioCallService.prototype.handleCallHoldFailed = function (callInfo) {
            this.callInfo.callState = callInfo.param.call_state;
            observer_1.default.publish('CallHoldFailed', callInfo.param);
            util_1.default.debug("audioCallService", 'CallHoldFailed, param=' + JSON.stringify(callInfo.param));
        };
        AudioCallService.prototype.handleCallUnHoldSuccess = function (callInfo) {
            this.callInfo.callState = callInfo.param.call_state;
            observer_1.default.publish('CallUnHoldSuccess', callInfo.param);
            util_1.default.debug("audioCallService", 'CallUnHoldSuccess, param=' + JSON.stringify(callInfo.param));
        };
        AudioCallService.prototype.handleCallUnHoldFailed = function (callInfo) {
            this.callInfo.callState = callInfo.param.call_state;
            observer_1.default.publish('CallUnHoldFailed', callInfo.param);
            util_1.default.debug("audioCallService", 'CallUnHoldFailed, param=' + JSON.stringify(callInfo.param));
        };
        AudioCallService.prototype.handleCallDivertFailed = function (callInfo) {
            this.callInfo.callState = callInfo.param.call_state;
            observer_1.default.publish('CallDivertFailed', callInfo.param);
            util_1.default.debug("audioCallService", 'CallDivertFailed, param= ' + JSON.stringify(callInfo.param));
        };
        AudioCallService.prototype.handleCallBldTransferFailed = function (callInfo) {
            this.callInfo.callState = callInfo.param.call_state;
            observer_1.default.publish('CallBldTransferFailed', callInfo.param);
            util_1.default.debug("audioCallService", 'CallBldTransferFailed, param= ' + JSON.stringify(callInfo.param));
        };
        return AudioCallService;
    }(callService_1.default));
    exports.default = AudioCallService;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 362 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(138), __webpack_require__(51), __webpack_require__(28), __webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, callService_1, tupCallWrapper_1, observer_1, util_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var VideoCallService = (function (_super) {
        __extends(VideoCallService, _super);
        function VideoCallService(data) {
            var _this = _super.call(this, data) || this;
            if (!data) {
                util_1.default.error("videoCallService", 'can not create VideoCallService object');
                return _this;
            }
            return _this;
        }
        VideoCallService.prototype.acceptCall = function () {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper, res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            wrapper = tupCallWrapper_1.default.getInstance();
                            util_1.default.debug("videoCallService", "<video> acceptCall,callId = " + this.callInfo.callId);
                            return [4, wrapper.acceptCall(this.callInfo.callId, 1)];
                        case 1:
                            res = _a.sent();
                            if (!(res && 0 === res.result)) {
                                util_1.default.error("videoCallService", '<video>accept call failed, result = ' + JSON.stringify(res));
                            }
                            return [2];
                    }
                });
            });
        };
        VideoCallService.prototype.delVideo = function () {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper, res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            wrapper = tupCallWrapper_1.default.getInstance();
                            return [4, wrapper.delVideo(this.callInfo.callId)];
                        case 1:
                            res = _a.sent();
                            if (0 === res.result) {
                                util_1.default.info("videoCallService", 'delete video success');
                            }
                            else {
                                util_1.default.debug("videoCallService", 'delete video failed, result = ' + res.result);
                            }
                            return [2, res];
                    }
                });
            });
        };
        VideoCallService.prototype.handleVideoRefreshView = function (data) {
            util_1.default.debug("videoCallService", "<video> handleVideoRefreshView,data.param= " + JSON.stringify(data.param));
            observer_1.default.publish('VideoRefreshView', data.param);
        };
        VideoCallService.prototype.handleVideoDecodeSuccess = function (data) {
            util_1.default.debug("videoCallService", "<video> handleVideoDecodeSuccess,data.param= " + JSON.stringify(data.param));
            observer_1.default.publish('VideoDecodeSuccess', data.param);
        };
        VideoCallService.prototype.handleBfcpDecodeSuccess = function (callID) {
            util_1.default.debug("videoCallService", "<video> handleBfcpDecodeSuccess callID =  " + callID);
            observer_1.default.publish('BFCPDecodeSuc', callID);
        };
        VideoCallService.resUpdateFn = function (videoParam, getUri) {
            var videoWH = {};
            if ("local_frame_share" === getUri) {
                videoWH.width = videoParam.width || videoParam.original_width;
                videoWH.height = videoParam.height || videoParam.original_height;
                videoWH.isRemote = 0;
                util_1.default.debug("videoCallService", "<video> auto adjust video, local original_width = " + videoParam.original_width + ",original_height = " + videoParam.original_height + ",show_width = " + videoWH.width + ",show_height = " + videoWH.height);
            }
            else {
                videoWH.width = videoParam.original_width || videoParam.width;
                videoWH.height = videoParam.original_height || videoParam.height;
                videoWH.isRemote = 1;
                util_1.default.debug("videoCallService", "<video> auto adjust video, remote original_width = " + videoParam.original_width + ",original_height = " + videoParam.original_height + ",show_width = " + videoWH.width + ",show_height = " + videoWH.height);
            }
            util_1.default.debug("videoCallService", "<video> handleVideoWHGet,videoWH= " + videoWH);
            observer_1.default.publish('VideoWHGet', videoWH);
        };
        return VideoCallService;
    }(callService_1.default));
    exports.default = VideoCallService;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 363 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(364), __webpack_require__(14), __webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, pluginNativeWnd_1, serverConfig_1, util_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tupNativeWndWrapper = (function () {
        function tupNativeWndWrapper() {
            if (tupNativeWndWrapper._instance) {
                throw new Error("Error: Instantiation failed: Use tupNativeWndWrapper.getInstance() instead of new.");
            }
            tupNativeWndWrapper._instance = this;
        }
        tupNativeWndWrapper.getInstance = function () {
            return tupNativeWndWrapper._instance;
        };
        tupNativeWndWrapper.prototype.build = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                var promise;
                return __generator(this, function (_a) {
                    util_1.default.info("tupNativeWndWrapper", "step in tupNativeWndWrapper to build");
                    if (!tupNativeWndWrapper.pluginNativeWind) {
                        promise = new Promise(function (resolve, reject) {
                            _this.onNativeWndReady = function () {
                                resolve();
                            },
                                _this.onNativeWndClose = function () {
                                    reject();
                                };
                        });
                        tupNativeWndWrapper.pluginNativeWind = new pluginNativeWnd_1.default({
                            svrAddr: serverConfig_1.CloudEC_SERVERCONFIG.ENTERPRISE_DOMAIN,
                            ready: this.onNativeWndReady,
                            close: this.onNativeWndClose,
                            ssl: serverConfig_1.CloudEC_SERVERCONFIG.IS_WSS,
                        });
                        return [2, promise];
                    }
                    return [2];
                });
            });
        };
        tupNativeWndWrapper.prototype.getPromise = function () {
            var p = {};
            p.promise = new Promise(function (resolve, reject) {
                p.resolve = resolve;
                p.reject = reject;
            });
            return p;
        };
        tupNativeWndWrapper.prototype.nativeWndInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                var callbacks, promise, parentExeName, param;
                return __generator(this, function (_a) {
                    callbacks = { response: {} };
                    promise = new Promise(function (resolve, reject) {
                        callbacks.response = function (ret) {
                            if (ret.result == 0) {
                                util_1.default.debug("tupNativeWndWrapper", "init success");
                                resolve(ret);
                            }
                            else {
                                util_1.default.error("tupNativeWndWrapper", "init failed! result=" + ret.result);
                                reject(ret);
                            }
                        };
                    });
                    parentExeName = this.getExplorerInfo();
                    param = {
                        "parent_info": {
                            "need_attach": serverConfig_1.CloudEC_SERVERCONFIG.NATIVE_NEED_ATTACH,
                            "exe_name": parentExeName,
                            "title": document.title
                        },
                        "x_offset": serverConfig_1.CloudEC_SERVERCONFIG.NATIVE_WINDOW_X_OFFSET,
                        "y_offset": serverConfig_1.CloudEC_SERVERCONFIG.NATIVE_WINDOW_Y_OFFSET,
                        "x_offset_rate": serverConfig_1.CloudEC_SERVERCONFIG.NATIVE_WINDOW_X_OFFSET_RATE / 100,
                        "y_offset_rate": serverConfig_1.CloudEC_SERVERCONFIG.NATIVE_WINDOW_Y_OFFSET_RATE / 100,
                        "frame_width": serverConfig_1.CloudEC_SERVERCONFIG.NATIVE_WINDOW_WIDTH,
                        "frame_height": serverConfig_1.CloudEC_SERVERCONFIG.NATIVE_WINDOW_HEIGHT,
                        "layout": 4,
                        "version": 0
                    };
                    tupNativeWndWrapper.pluginNativeWind.init(param, callbacks);
                    return [2, promise];
                });
            });
        };
        tupNativeWndWrapper.prototype.createWindow = function (count, frameHwnd) {
            return __awaiter(this, void 0, void 0, function () {
                var callbacks, promise;
                return __generator(this, function (_a) {
                    callbacks = { response: {} };
                    promise = new Promise(function (resolve, reject) {
                        callbacks.response = function (ret) {
                            if (ret.result == 0) {
                                util_1.default.debug("tupNativeWndWrapper", "create window success");
                                resolve(ret);
                            }
                            else {
                                util_1.default.error("tupNativeWndWrapper", "create window failed! result=" + ret.result);
                                reject(ret);
                            }
                        };
                    });
                    tupNativeWndWrapper.pluginNativeWind.creatWindow(count, frameHwnd, 0, callbacks);
                    return [2, promise];
                });
            });
        };
        tupNativeWndWrapper.prototype.destroyWindow = function (frameHwnd, frameHwndList) {
            return __awaiter(this, void 0, void 0, function () {
                var callbacks, promise, windowsList, i;
                return __generator(this, function (_a) {
                    callbacks = { response: {} };
                    promise = new Promise(function (resolve, reject) {
                        callbacks.response = function (ret) {
                            if (ret.result == 0) {
                                util_1.default.debug("tupNativeWndWrapper", "destroy window success");
                                resolve(ret);
                            }
                            else {
                                util_1.default.error("tupNativeWndWrapper", "destroy window failed! result=" + ret.result);
                                reject(ret);
                            }
                        };
                    });
                    windowsList = new Array();
                    if (frameHwndList) {
                        for (i = 0; i < frameHwndList.length; i++) {
                            windowsList[i] = frameHwndList[i].hwnd;
                        }
                    }
                    tupNativeWndWrapper.pluginNativeWind.destroyWindow(frameHwnd, windowsList, callbacks);
                    return [2, promise];
                });
            });
        };
        tupNativeWndWrapper.prototype.uninit = function (frameHwnd) {
            return __awaiter(this, void 0, void 0, function () {
                var callbacks, promise;
                return __generator(this, function (_a) {
                    callbacks = { response: {} };
                    promise = new Promise(function (resolve, reject) {
                        callbacks.response = function (ret) {
                            if (ret.result == 0) {
                                util_1.default.debug("tupNativeWndWrapper", "uninit success");
                                resolve(ret);
                            }
                            else {
                                util_1.default.error("tupNativeWndWrapper", "uninit failed! result=" + ret.result);
                                reject(ret);
                            }
                        };
                    });
                    tupNativeWndWrapper.pluginNativeWind.uninit(frameHwnd, callbacks);
                    return [2, promise];
                });
            });
        };
        tupNativeWndWrapper.prototype.attachByName = function (frameHwnd, nativeWndParam) {
            return __awaiter(this, void 0, void 0, function () {
                var callbacks, promise, xOffsetRate, yOffsetRate, relativaPosition, frameSize;
                return __generator(this, function (_a) {
                    callbacks = { response: {} };
                    promise = new Promise(function (resolve, reject) {
                        callbacks.response = function (ret) {
                            if (ret.result == 0) {
                                util_1.default.debug("tupNativeWndWrapper", "attachByName success");
                                resolve(ret);
                            }
                            else {
                                util_1.default.error("tupNativeWndWrapper", "attachByName failed! result=" + ret.result);
                                reject(ret);
                            }
                        };
                    });
                    xOffsetRate = nativeWndParam.xOffsetRate ? nativeWndParam.xOffsetRate / 100 : null;
                    yOffsetRate = nativeWndParam.yOffsetRate ? nativeWndParam.yOffsetRate / 100 : null;
                    relativaPosition = {
                        "x_offset_rate": xOffsetRate,
                        "y_offset_rate": yOffsetRate,
                    };
                    frameSize = {
                        "width": nativeWndParam.width,
                        "height": nativeWndParam.height,
                    };
                    tupNativeWndWrapper.pluginNativeWind.attachByName(frameHwnd, relativaPosition, frameSize, callbacks);
                    return [2, promise];
                });
            });
        };
        tupNativeWndWrapper.prototype.getExplorerInfo = function () {
            var explorer = window.navigator.userAgent.toLowerCase();
            var exeName = "";
            if (explorer.indexOf("chrome") >= 0) {
                exeName = "chrome.exe";
            }
            else if (explorer.indexOf("firefox") >= 0) {
                exeName = "firefox.exe";
            }
            else if (explorer.indexOf("trident") >= 0 && explorer.indexOf("rv")) {
                exeName = "iexplore.exe";
            }
            else if (explorer.indexOf("msie") >= 0) {
                exeName = "iexplore.exe";
            }
            return exeName;
        };
        tupNativeWndWrapper._instance = new tupNativeWndWrapper();
        return tupNativeWndWrapper;
    }());
    exports.default = tupNativeWndWrapper;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 364 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, util_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PluginNativeWind = (function () {
        function PluginNativeWind(opts) {
            var _this = this;
            this.rspFuncs = new Array();
            this.notifyFuncs = new Array();
            this.wsocket = {};
            this.section_id = 0x00000;
            this.name = "NativeWind";
            this.notifyFuncs = new Array();
            this.rspFuncs = new Array();
            var serviceAddr = opts.svrAddr || "127.0.0.1";
            var getUri = opts.getUri || "nativewnd_plugin";
            if (opts.socket) {
                this.uniSocket = opts.socket;
                this.uniSocket.registerService(this);
            }
            else {
                var pcol = "ws://";
                if (opts.ssl === 1) {
                    pcol = "wss://";
                }
                this.wsocket = new WebSocket(pcol + serviceAddr + ":7684/" + getUri, "tup_plugin_service_protocol");
                this.wsocket.onopen = opts.ready;
                this.wsocket.onclose = opts.close;
                this.wsocket.onmessage = function (msg) {
                    var data = JSON.parse(msg.data);
                    util_1.default.debug("pluginNativeWind", msg.data);
                    _this.msgProcessor(data);
                };
            }
        }
        ;
        PluginNativeWind.prototype.msgProcessor = function (data) {
            if (data.notify > 0) {
                var notifyIdx = data.notify & 0x7fff;
                if (typeof this.notifyFuncs[notifyIdx] == "function") {
                    this.notifyFuncs[notifyIdx](data);
                }
            }
            if (data.rsp > 0) {
                var rspIdx = data.rsp & 0x7fff;
                if (typeof this.rspFuncs[rspIdx] == "function")
                    this.rspFuncs[rspIdx](data);
            }
        };
        PluginNativeWind.prototype.sendData = function (data) {
            var sendStr = JSON.stringify(data);
            util_1.default.debug("pluginNativeWind", "send data: " + sendStr);
            if (this.uniSocket) {
                this.uniSocket.sendData(sendStr);
            }
            else {
                this.wsocket.send(sendStr);
            }
        };
        ;
        PluginNativeWind.prototype.attachByName = function (frame_hwnd, relative_position, frame_size, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[1] = callbacks.response;
            }
            var data = {
                "cmd": 1,
                "description": "nativewnd_attach_update",
                "param": {
                    "frame_hwnd": frame_hwnd,
                    "relative_position": relative_position,
                    "size": frame_size
                }
            };
            this.sendData(data);
        };
        ;
        PluginNativeWind.prototype.detach = function (callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[2] = callbacks.response;
            }
            var data = {
                "cmd": 2,
                "description": "nativewnd_detach"
            };
            this.sendData(data);
        };
        ;
        PluginNativeWind.prototype.init = function (init_params, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[3] = callbacks.response;
            }
            var data = {
                "cmd": 3,
                "description": "nativewnd_init",
                "param": init_params
            };
            this.sendData(data);
        };
        ;
        PluginNativeWind.prototype.uninit = function (hwnd, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[4] = callbacks.response;
            }
            var data = {
                "cmd": 4,
                "description": "nativewnd_uninit",
                "param": {
                    "frameHwnd": hwnd
                }
            };
            this.sendData(data);
        };
        ;
        PluginNativeWind.prototype.creatWindow = function (count, frameHwnd, insert_before, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[5] = callbacks.response;
            }
            var data = {
                "cmd": 5,
                "description": "nativewnd_creat_window",
                "param": {
                    "count": count,
                    "frameHwnd": frameHwnd,
                    "insert_before": insert_before
                }
            };
            this.sendData(data);
        };
        ;
        PluginNativeWind.prototype.destroyWindow = function (frame_hwnd, windows_list, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[6] = callbacks.response;
            }
            var data = {
                "cmd": 6,
                "description": "nativewnd_destroy_window",
                "param": {
                    "frameHwnd": frame_hwnd,
                    "hwndList": windows_list
                }
            };
            this.sendData(data);
        };
        ;
        PluginNativeWind.prototype.setWindowText = function (info_list, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[7] = callbacks.response;
            }
            var data = {
                "cmd": 7,
                "description": "nativewnd_set_window_text",
                "param": {
                    "info_list": info_list
                }
            };
            this.sendData(data);
        };
        ;
        PluginNativeWind.prototype.highlightWindow = function (window, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[8] = callbacks.response;
            }
            var data = {
                "cmd": 8,
                "description": "nativewnd_highlight_window",
                "param": {
                    "window": window
                }
            };
            this.sendData(data);
        };
        ;
        PluginNativeWind.prototype.updateWindowPos = function (window, insert_before, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[9] = callbacks.response;
            }
            var data = {
                "cmd": 9,
                "description": "nativewnd_update_window_position",
                "param": {
                    "window": window,
                    "insert_before": insert_before
                }
            };
            this.sendData(data);
        };
        ;
        PluginNativeWind.prototype.setLayoutMode = function (layout, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[10] = callbacks.response;
            }
            var data = {
                "cmd": 10,
                "description": "nativewnd_set_layout_mode",
                "param": {
                    "layout": layout
                }
            };
            this.sendData(data);
        };
        ;
        PluginNativeWind.prototype.pageSwitch = function (type, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[11] = callbacks.response;
            }
            var data = {
                "cmd": 11,
                "description": "nativewnd_page_switch",
                "param": {
                    "type": type
                }
            };
            this.sendData(data);
        };
        ;
        PluginNativeWind.prototype.enablePageSwtich = function (left_enable, right_enable, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[12] = callbacks.response;
            }
            var data = {
                "cmd": 12,
                "description": "nativewnd_enabel_page_swtich",
                "param": {
                    "left_enable": left_enable,
                    "right_enable": right_enable
                }
            };
            this.sendData(data);
        };
        ;
        return PluginNativeWind;
    }());
    exports.default = PluginNativeWind;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 365 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(366), __webpack_require__(14), __webpack_require__(39), __webpack_require__(11), __webpack_require__(1), __webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, tupConfctrl_1, serverConfig_1, tupLoginWrapper_1, enum_1, util_1, util) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tupConfctrlWrapper = (function () {
        function tupConfctrlWrapper() {
            if (tupConfctrlWrapper._instance) {
                throw new Error("Error: Instantiation failed: Use tupConfctrlWrapper.getInstance() instead of new.");
            }
            tupConfctrlWrapper._instance = this;
        }
        tupConfctrlWrapper.getInstance = function () {
            return tupConfctrlWrapper._instance;
        };
        tupConfctrlWrapper.prototype.build = function () {
            return __awaiter(this, void 0, void 0, function () {
                var flag;
                return __generator(this, function (_a) {
                    flag = false;
                    if (!this.tupConfctrl) {
                        this.tupConfctrl = new tupConfctrl_1.default({
                            socket: tupLoginWrapper_1.default.tupUniSock
                        });
                        flag = true;
                    }
                    this.initConfctrl();
                    this.setConfEventType();
                    this.setServerParam();
                    this.setToken();
                    this.setTempUserFlag();
                    this.setProxy();
                    return [2, flag];
                });
            });
        };
        tupConfctrlWrapper.prototype.initConfctrl = function () {
            var log = {
                "log_level": serverConfig_1.CloudEC_SERVERCONFIG.LOG_LEVEL,
                "maxsize_kb": serverConfig_1.CloudEC_SERVERCONFIG.LOG_FILE_SIZE,
                "file_count": serverConfig_1.CloudEC_SERVERCONFIG.LOG_FILE_COUNT,
                "log_path": serverConfig_1.CloudEC_SERVERCONFIG.LOG_PATH
            };
            var init_param = {
                "wait_msgp_thread": 1,
                "batch_update": 0,
                "connect_call": 1,
                "save_participant_list": 1,
                "confctrl_ido": serverConfig_1.CloudEC_SERVERCONFIG.CONF_CONTROL_PROTOCOL
            };
            this.tupConfctrl.init(log, init_param, {});
        };
        tupConfctrlWrapper.prototype.setConfEventType = function () {
            var cloudEC_loginInfo = sessionStorage.cloudEC_loginInfo;
            var loginInfo = JSON.parse(cloudEC_loginInfo);
            var deployMode = loginInfo.deployMode;
            if (deployMode == enum_1.CLOUDEC_LOGIN_E_DEPLOY_MODE.LOGIN_E_DEPLOY_ENTERPRISE_CC) {
                this.tupConfctrl.setConfEnvType(4, {});
            }
            else {
                this.tupConfctrl.setConfEnvType(deployMode, {});
            }
        };
        tupConfctrlWrapper.prototype.setServerParam = function () {
            var cloudEC_loginInfo = sessionStorage.cloudEC_loginInfo;
            var loginInfo = JSON.parse(cloudEC_loginInfo);
            var authServerUri = loginInfo.authServerUri, authServerPort = loginInfo.authServerPort;
            this.tupConfctrl.setServerParams({
                server_addr: authServerUri,
                port: authServerPort
            }, {});
        };
        tupConfctrlWrapper.prototype.setProxy = function () {
            var proxy_result = sessionStorage.cloudEC_proxy;
            if (proxy_result != undefined) {
                proxy_result = JSON.parse(proxy_result);
            }
            else {
                proxy_result = { proxyAddress: "", proxyPort: 0, proxyAccount: "", proxyPassword: "" };
            }
            this.tupConfctrl.setProxy({
                port: proxy_result.proxyPort,
                uri: proxy_result.proxyAddress,
                user_name: proxy_result.proxyAccount,
                password: proxy_result.proxyPassword
            }, {});
        };
        tupConfctrlWrapper.prototype.setToken = function () {
            var cloudEC_loginInfo = sessionStorage.cloudEC_loginInfo;
            var loginInfo = JSON.parse(cloudEC_loginInfo);
            var authToken = loginInfo.authToken;
            this.tupConfctrl.setToken(authToken, {});
            authToken = "";
        };
        tupConfctrlWrapper.prototype.createConf = function (subject, mediaType, attendees, assMedia, language, autoRecord) {
            return __awaiter(this, void 0, void 0, function () {
                var param, createConfPromise, callbacks, logInfo;
                return __generator(this, function (_a) {
                    param = {
                        subject: subject,
                        group_uri: "",
                        welcome_voice_enable: 0,
                        enter_prompt: 0,
                        leave_prompt: 0,
                        conf_filter: 0,
                        record_flag: autoRecord,
                        multi_stream_flag: 0,
                        media_type: mediaType,
                        language: language,
                        conf_encrypt_mode: 0,
                        user_type: 0,
                        num_of_attendee: attendees.length,
                        attendee: attendees,
                        assistant_media_params: assMedia
                    };
                    createConfPromise = this.getPromise();
                    callbacks = {
                        onCreateConfResult: function (data) {
                            if (0 === data.param.ret) {
                                createConfPromise.resolve(data);
                            }
                            else {
                                util_1.default.error("tupConfctrlWrapper", "Create instant conference failed!");
                                data.notify = 458754;
                                createConfPromise.reject(data);
                            }
                        }
                    };
                    logInfo = util.replaceLogInfo(param);
                    util_1.default.debug("tupConfctrlWrapper", 'createConfParam: ' + logInfo);
                    this.tupConfctrl.createConf(param, callbacks);
                    return [2, createConfPromise.promise];
                });
            });
        };
        tupConfctrlWrapper.prototype.getDataconfParams = function (param) {
            return __awaiter(this, void 0, void 0, function () {
                var confParamsPromise, callbacks;
                return __generator(this, function (_a) {
                    confParamsPromise = this.getPromise();
                    callbacks = {
                        onConfParamsResult: function (data) {
                            if (data.param.result === 0) {
                                confParamsPromise.resolve(data);
                            }
                            else {
                                util_1.default.error("tupConfctrlWrapper", "Get data conference param failed");
                                confParamsPromise.reject(data);
                            }
                        }
                    };
                    this.tupConfctrl.getDataconfParams(param, callbacks);
                    return [2, confParamsPromise.promise];
                });
            });
        };
        tupConfctrlWrapper.prototype.setBasicConfCallEvent = function (callbacks) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this.tupConfctrl.setBasicConfCallEvent(callbacks);
                    return [2];
                });
            });
        };
        tupConfctrlWrapper.prototype.setServerIndEvent = function (callbacks) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this.tupConfctrl.setServerIndEvent(callbacks);
                    return [2];
                });
            });
        };
        tupConfctrlWrapper.prototype.acceptConf = function (confHandle, mediaType, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var callbacks, promise;
                return __generator(this, function (_a) {
                    callbacks = { response: {} };
                    promise = new Promise(function (resolve, reject) {
                        callbacks.response = function (ret) {
                            if (ret.result == 0) {
                                util_1.default.debug("tupConfctrlWrapper", "access is Successful");
                                resolve(ret.result);
                            }
                            else {
                                util_1.default.error("tupConfctrlWrapper", "access conference failed! result=" + ret.result);
                                reject(ret.result);
                            }
                        };
                    });
                    this.tupConfctrl.acceptConfEx(confHandle, mediaType, callbacks);
                    return [2, promise];
                });
            });
        };
        tupConfctrlWrapper.prototype.rejectConf = function (confHandle, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var callbacks, promise;
                return __generator(this, function (_a) {
                    callbacks = { response: {} };
                    promise = new Promise(function (resolve, reject) {
                        callbacks.response = function (ret) {
                            if (ret.result == 0) {
                                util_1.default.debug("tupConfctrlWrapper", "access is Successful");
                                resolve(ret.result);
                            }
                            else {
                                util_1.default.error("tupConfctrlWrapper", "access conference failed! result=" + ret.result);
                                reject(ret.result);
                            }
                        };
                    });
                    this.tupConfctrl.rejectConf(confHandle, callbacks);
                    return [2, promise];
                });
            });
        };
        tupConfctrlWrapper.prototype.bookConf = function (mediaType, subject, startTime, duration, attendees, autoRecord, cycle, assMedia, language) {
            return __awaiter(this, void 0, void 0, function () {
                var bookConfInfoUportal, callbacks, promise;
                return __generator(this, function (_a) {
                    bookConfInfoUportal = {
                        size: attendees.length,
                        conf_type: 0,
                        media_type: mediaType,
                        start_time: startTime,
                        conf_len: duration,
                        subject: subject,
                        welcome_voice_enable: 0,
                        enter_prompt: 0,
                        leave_prompt: 0,
                        conf_filter: 0,
                        record_flag: autoRecord,
                        auto_prolong: 0,
                        multi_stream_flag: 0,
                        reminder: 0,
                        language: language,
                        conf_encrypt_mode: 0,
                        user_type: 0,
                        num_of_attendee: attendees.length,
                        attendee: attendees,
                        cycle_params: cycle,
                        assistant_media_params: assMedia
                    };
                    callbacks = { onUportalBookConfResult: {} };
                    promise = new Promise(function (resolve, reject) {
                        callbacks.onUportalBookConfResult = function (ret) {
                            if (ret.param.ret == 0) {
                                resolve(ret);
                            }
                            else {
                                ret.notify = 458778;
                                util_1.default.error("tupConfctrlWrapper", "bookConf failed");
                                reject(ret);
                            }
                        };
                    });
                    this.tupConfctrl.bookConf({ book_conf_info_uportal: bookConfInfoUportal }, callbacks);
                    return [2, promise];
                });
            });
        };
        tupConfctrlWrapper.prototype.addAttendee = function (confHandle, attendeeNum, attendees) {
            return __awaiter(this, void 0, void 0, function () {
                var addAttendeeInfo, addAttendeePromise, callbacks;
                return __generator(this, function (_a) {
                    addAttendeeInfo = {
                        num_of_attendee: attendeeNum,
                        attendee_info: attendees
                    };
                    addAttendeePromise = this.getPromise();
                    callbacks = {
                        onAddAttendeeResult: function (data) {
                            if (data.param.ret == 0) {
                                addAttendeePromise.resolve(data);
                            }
                            else {
                                addAttendeePromise.reject(data);
                            }
                        }
                    };
                    this.tupConfctrl.addAttendee(addAttendeeInfo, confHandle, "", callbacks);
                    return [2, addAttendeePromise.promise];
                });
            });
        };
        tupConfctrlWrapper.prototype.muteConf = function (confHandle, isMute) {
            return __awaiter(this, void 0, void 0, function () {
                var mutePromise, callbacks;
                return __generator(this, function (_a) {
                    mutePromise = this.getPromise();
                    callbacks = {
                        onMuteConfResult: function (data) {
                            if (data.param.ret == 0) {
                                mutePromise.resolve(data);
                            }
                            else {
                                mutePromise.reject(data);
                            }
                        }
                    };
                    this.tupConfctrl.muteConf(confHandle, isMute, callbacks);
                    return [2, mutePromise.promise];
                });
            });
        };
        tupConfctrlWrapper.prototype.muteAttendee = function (confHandle, isMute, attendeeNum) {
            return __awaiter(this, void 0, void 0, function () {
                var mutePromise, callbacks;
                return __generator(this, function (_a) {
                    mutePromise = this.getPromise();
                    callbacks = {
                        onMuteAttendeeResult: function (data) {
                            if (data.param.ret == 0) {
                                mutePromise.resolve(data);
                            }
                            else {
                                mutePromise.reject(data);
                            }
                        }
                    };
                    this.tupConfctrl.muteAttendee({ conf_handle: confHandle, to_mute: isMute, attendee: attendeeNum }, callbacks);
                    return [2, mutePromise.promise];
                });
            });
        };
        tupConfctrlWrapper.prototype.removeAttendee = function (confHandle, attendeeNum) {
            return __awaiter(this, void 0, void 0, function () {
                var params, removeAttendeePromise, callbacks;
                return __generator(this, function (_a) {
                    params = {
                        conf_handle: confHandle,
                        number: attendeeNum
                    };
                    removeAttendeePromise = this.getPromise();
                    callbacks = {
                        onDelAttendeeResult: function (data) {
                            if (data.param.ret == 0) {
                                removeAttendeePromise.resolve(data);
                            }
                            else {
                                removeAttendeePromise.reject(data);
                            }
                        }
                    };
                    this.tupConfctrl.removeAttendee(params, callbacks);
                    return [2, removeAttendeePromise.promise];
                });
            });
        };
        tupConfctrlWrapper.prototype.hangupAttendee = function (confHandle, attendeeNum) {
            return __awaiter(this, void 0, void 0, function () {
                var params, hangupAttendeePromise, callbacks;
                return __generator(this, function (_a) {
                    params = {
                        conf_handle: confHandle,
                        attendee: attendeeNum
                    };
                    hangupAttendeePromise = this.getPromise();
                    callbacks = {
                        onHangupAttendeeResult: function (data) {
                            if (data.param.ret == 0) {
                                hangupAttendeePromise.resolve(data);
                            }
                            else {
                                hangupAttendeePromise.reject(data);
                            }
                        }
                    };
                    this.tupConfctrl.hangUpAttendee(params, callbacks);
                    return [2, hangupAttendeePromise.promise];
                });
            });
        };
        tupConfctrlWrapper.prototype.releaseChairman = function (confHandle, phoneNum) {
            return __awaiter(this, void 0, void 0, function () {
                var releaseChairPromise, callbacks;
                return __generator(this, function (_a) {
                    releaseChairPromise = this.getPromise();
                    callbacks = {
                        onReleaseChairmanResult: function (data) {
                            if (data.param.ret === 0) {
                                releaseChairPromise.resolve({ result: true, info: "" });
                            }
                            else {
                                releaseChairPromise.reject({ result: false, info: data });
                            }
                        }
                    };
                    this.tupConfctrl.releaseChairman(confHandle, phoneNum, callbacks);
                    return [2, releaseChairPromise.promise];
                });
            });
        };
        tupConfctrlWrapper.prototype.requestChairman = function (confHandle, phoneNum, chairmanPwd) {
            return __awaiter(this, void 0, void 0, function () {
                var requestChairPromise, callbacks;
                return __generator(this, function (_a) {
                    requestChairPromise = this.getPromise();
                    callbacks = {
                        onReqChairmanResult: function (data) {
                            if (data.param.ret === 0) {
                                requestChairPromise.resolve({ result: true, info: "" });
                            }
                            else {
                                requestChairPromise.reject({ result: false, info: data });
                            }
                        }
                    };
                    this.tupConfctrl.requestChairman(chairmanPwd, confHandle, phoneNum, callbacks);
                    return [2, requestChairPromise.promise];
                });
            });
        };
        tupConfctrlWrapper.prototype.handup = function (attendee, confHandle, toHandle) {
            return __awaiter(this, void 0, void 0, function () {
                var handupPromise, callbacks;
                return __generator(this, function (_a) {
                    handupPromise = this.getPromise();
                    callbacks = {
                        onHandUpResult: function (data) {
                            if (data.param.ret === 0) {
                                handupPromise.resolve({ result: true, info: "" });
                            }
                            else {
                                handupPromise.reject({ result: false, info: data });
                            }
                        }
                    };
                    this.tupConfctrl.handup(attendee, confHandle, toHandle, callbacks);
                    return [2, handupPromise.promise];
                });
            });
        };
        tupConfctrlWrapper.prototype.leaveConf = function (confHandle) {
            return __awaiter(this, void 0, void 0, function () {
                var leaveConfPromise, callbacks;
                return __generator(this, function (_a) {
                    leaveConfPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result === 0) {
                                leaveConfPromise.resolve({ result: true, info: "" });
                            }
                            else {
                                leaveConfPromise.reject({ result: false, info: data });
                            }
                        }
                    };
                    this.tupConfctrl.leaveConf(confHandle, callbacks);
                    return [2, leaveConfPromise.promise];
                });
            });
        };
        tupConfctrlWrapper.prototype.endConf = function (confHandle) {
            return __awaiter(this, void 0, void 0, function () {
                var endConfPromise, callbacks;
                return __generator(this, function (_a) {
                    endConfPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result != 0) {
                                endConfPromise.reject({ result: false, info: data });
                            }
                        },
                        onEndConfResult: function (data) {
                            if (data.param.ret === 0) {
                                endConfPromise.resolve({ result: true, info: "" });
                            }
                            else {
                                endConfPromise.reject({ result: false, info: data });
                            }
                        }
                    };
                    this.tupConfctrl.endConf(confHandle, callbacks);
                    return [2, endConfPromise.promise];
                });
            });
        };
        tupConfctrlWrapper.prototype.setConfMode = function (confHandle, mode) {
            return __awaiter(this, void 0, void 0, function () {
                var setModePromise, callbacks;
                return __generator(this, function (_a) {
                    setModePromise = this.getPromise();
                    callbacks = {
                        onSetConfModeResult: function (data) {
                            if (data.param.ret === 0) {
                                setModePromise.resolve({ result: true, info: "" });
                            }
                            else {
                                setModePromise.reject({ result: false, info: data });
                            }
                        }
                    };
                    this.tupConfctrl.setConfMode(confHandle, mode, callbacks);
                    return [2, setModePromise.promise];
                });
            });
        };
        tupConfctrlWrapper.prototype.setConfMixedPicture = function (confHandle, mode, imageType, attendee) {
            var mixedPicturePromise = this.getPromise();
            var callbacks = {
                onSetConfMixedPictureResult: function (data) {
                    if (data.param.result === 0) {
                        mixedPicturePromise.resolve({ result: true, info: data });
                    }
                    else {
                        mixedPicturePromise.reject({ result: false, info: data });
                    }
                }
            };
            this.tupConfctrl.setConfMixedPicture(confHandle, mode, imageType, attendee, callbacks);
            return mixedPicturePromise.promise;
        };
        tupConfctrlWrapper.prototype.broadcastAttendee = function (confHandle, isBroad, attendee) {
            return __awaiter(this, void 0, void 0, function () {
                var broadcastPromise, callbacks, param;
                return __generator(this, function (_a) {
                    broadcastPromise = this.getPromise();
                    callbacks = {
                        onBroadcastAttendeeResult: function (data) {
                            if (data.param.operation_rsp_reason === 0) {
                                broadcastPromise.resolve({ result: true, info: { type: 1, description: "onBroadcastAttendeeResult" } });
                            }
                            else {
                                broadcastPromise.reject({ result: false, info: { type: 1, description: data } });
                            }
                        },
                        onCancelBroadcastAttendeeResult: function (data) {
                            if (data.param.ret === 0) {
                                broadcastPromise.resolve({ result: true, info: { type: 0, description: "onCancelBroadcastAttendeeResult" } });
                            }
                            else {
                                broadcastPromise.reject({ result: false, info: { type: 0, description: data } });
                            }
                        }
                    };
                    param = {
                        conf_handle: confHandle,
                        to_broadcast: isBroad,
                        number: attendee.number
                    };
                    this.tupConfctrl.broadcastAttendee(param, callbacks);
                    return [2, broadcastPromise.promise];
                });
            });
        };
        tupConfctrlWrapper.prototype.watchAttendee = function (confHandle, attendee) {
            return __awaiter(this, void 0, void 0, function () {
                var watchPromise, callbacks, param, logInfo;
                return __generator(this, function (_a) {
                    watchPromise = this.getPromise();
                    callbacks = {
                        onWatchAttendeeResult: function (data) {
                            util_1.default.debug("tupConfctrlWrapper", 'onWatchAttendeeResult');
                            if (data.param.operation_rsp_reason == 0) {
                                watchPromise.resolve({ result: true, info: "" });
                            }
                            else {
                                watchPromise.reject({ result: false, info: data });
                            }
                        }
                    };
                    param = {
                        conf_handle: confHandle,
                        watch_attendee: { attendee: [{ number: attendee.number }] }
                    };
                    logInfo = util.replaceLogInfo(param);
                    util_1.default.debug("tupConfctrlWrapper", 'watchAttendeeparam= ' + logInfo);
                    this.tupConfctrl.watchAttendee(param, callbacks);
                    return [2, watchPromise.promise];
                });
            });
        };
        tupConfctrlWrapper.prototype.getConfList = function (pageIndex, pageSize) {
            return __awaiter(this, void 0, void 0, function () {
                var param, getConfListPromise, callbacks, logInfo;
                return __generator(this, function (_a) {
                    param = {
                        account_id: "",
                        conf_id: "",
                        subject: "",
                        conf_right: 2,
                        include_end: 0,
                        page_index: pageIndex,
                        page_size: pageSize
                    };
                    getConfListPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result != 0) {
                                getConfListPromise.reject(data);
                            }
                        },
                        onGetConfListResult: function (data) {
                            if (data.param.result != 0) {
                                getConfListPromise.reject(data);
                            }
                            else {
                                getConfListPromise.resolve(data);
                            }
                        }
                    };
                    logInfo = util.replaceLogInfo(param);
                    util_1.default.debug("tupConfctrlWrapper", 'getConfListParam= ' + logInfo);
                    this.tupConfctrl.getConfList(param, callbacks);
                    return [2, getConfListPromise.promise];
                });
            });
        };
        tupConfctrlWrapper.prototype.getConfInfo = function (confId) {
            return __awaiter(this, void 0, void 0, function () {
                var param, getConfInfoPromise, callbacks;
                return __generator(this, function (_a) {
                    param = {
                        conf_id: confId,
                        page_index: 1,
                        page_size: 20
                    };
                    getConfInfoPromise = this.getPromise();
                    callbacks = {
                        onGetConfInfoResult: function (data) {
                            if (data.param.result === 0) {
                                getConfInfoPromise.resolve({ result: true, info: data });
                            }
                            else {
                                getConfInfoPromise.reject({ result: false, info: data });
                            }
                        }
                    };
                    this.tupConfctrl.getConfInfo(param, callbacks);
                    return [2, getConfInfoPromise.promise];
                });
            });
        };
        tupConfctrlWrapper.prototype.release = function (confHandle) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this.tupConfctrl.destroyConfHandle(confHandle);
                    return [2];
                });
            });
        };
        tupConfctrlWrapper.prototype.setTempUserFlag = function () {
            var cloudEC_loginInfo = sessionStorage.cloudEC_loginInfo;
            var loginInfo = JSON.parse(cloudEC_loginInfo);
            var isTempUser = loginInfo.isTempUser;
            util_1.default.debug("tupConfctrlWrapper", "isTempUser = " + isTempUser);
            this.tupConfctrl.setTempUserFlag(isTempUser, {});
        };
        tupConfctrlWrapper.prototype.p2pTransferToConf = function (confInfo, call_id) {
            return __awaiter(this, void 0, void 0, function () {
                var toConfPromise, callbacks, logInfo;
                return __generator(this, function (_a) {
                    toConfPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result == 0) {
                                toConfPromise.resolve({ result: true, info: data });
                            }
                            else {
                                toConfPromise.reject({ result: false, info: data });
                            }
                        }
                    };
                    logInfo = util.replaceLogInfo(confInfo);
                    util_1.default.debug("tupConfctrlWrapper", 'p2pTransferToConf= ' + logInfo);
                    this.tupConfctrl.p2pTransferToConf(confInfo, call_id, callbacks);
                    return [2, toConfPromise.promise];
                });
            });
        };
        tupConfctrlWrapper.prototype.getConfInfoSyn = function (confId) {
            return __awaiter(this, void 0, void 0, function () {
                var param, getConfInfoSynPromise, callbacks;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            param = {
                                conf_id: confId,
                                page_index: 1,
                                page_size: 2
                            };
                            getConfInfoSynPromise = this.getPromise();
                            callbacks = {
                                response: function (data) {
                                    if (data.result == 0) {
                                        getConfInfoSynPromise.resolve({ result: true, info: data });
                                    }
                                    else {
                                        getConfInfoSynPromise.reject({ result: false, info: data });
                                    }
                                }
                            };
                            return [4, this.tupConfctrl.getConfInfoSyn(param, callbacks)];
                        case 1:
                            _a.sent();
                            return [2, getConfInfoSynPromise.promise];
                    }
                });
            });
        };
        tupConfctrlWrapper.prototype.uninit = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.tupConfctrl.uninit({})];
                        case 1:
                            _a.sent();
                            return [2];
                    }
                });
            });
        };
        tupConfctrlWrapper.prototype.getPromise = function () {
            var p = {};
            p.promise = new Promise(function (resolve, reject) {
                p.resolve = resolve;
                p.reject = reject;
            });
            return p;
        };
        tupConfctrlWrapper._instance = new tupConfctrlWrapper();
        return tupConfctrlWrapper;
    }());
    exports.default = tupConfctrlWrapper;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 366 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, util_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TUPConfctrl = (function () {
        function TUPConfctrl(opts) {
            var _this = this;
            this.notifyFuncs = [];
            this.rspFuncs = [];
            this.wsocket = {};
            this.msgProcessor = function (data) {
                if (data.notify > 0) {
                    var notifyIdx = data.notify & 0x7fff;
                    if (typeof _this.notifyFuncs[notifyIdx] == "function") {
                        _this.notifyFuncs[notifyIdx](data);
                    }
                }
                if (data.rsp > 0) {
                    var rspIdx = data.rsp & 0x7fff;
                    if (typeof _this.rspFuncs[rspIdx] == "function")
                        _this.rspFuncs[rspIdx](data);
                }
            };
            this.endConfEx = function (conf_handle, is_destory_handle, callbacks) {
                if (callbacks && typeof callbacks.response == "function") {
                    _this.rspFuncs[8] = callbacks.response;
                }
                if (callbacks && typeof callbacks.onEndConfResult == "function") {
                    _this.notifyFuncs[27] = callbacks.onEndConfResult;
                }
                var data = {
                    "cmd": 458760,
                    "description": "tup_confctrl_end_conf",
                    "param": {
                        "conf_handle": conf_handle,
                        "is_destory_handle": is_destory_handle
                    }
                };
                _this.sendData(data);
            };
            this.section_id = 0x70000;
            this.name = "ConfCtrl";
            this.notifyFuncs = new Array();
            this.rspFuncs = new Array();
            var serviceAddr = opts.svrAddr || "127.0.0.1";
            var pcol = "ws://";
            if (opts.ssl === 1) {
                pcol = "wss://";
            }
            if (opts.socket) {
                this.uniSocket = opts.socket;
                this.uniSocket.registerService(this);
            }
            else {
                this.wsocket = new WebSocket(pcol + serviceAddr + ":7684", "tup_confctrl_service_protocol");
                this.wsocket.onopen = opts.ready;
                this.wsocket.onclose = opts.close;
                this.wsocket.onmessage = function (msg) {
                    var data = JSON.parse(msg.data);
                    util_1.default.debug("TupConfctrl", msg.data);
                    _this.msgProcessor(data);
                };
            }
        }
        ;
        TUPConfctrl.prototype.sendData = function (data) {
            var sendStr = JSON.stringify(data);
            if (this.uniSocket)
                this.uniSocket.sendData(sendStr);
            else
                this.wsocket.send(sendStr);
            sendStr = null;
        };
        TUPConfctrl.prototype.init = function (log, init_param, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[1] = callbacks.response;
            }
            var data = {
                "cmd": 458753,
                "description": "tup_confctrl_init",
                "param": {
                    "log": log, "init_param": init_param
                }
            };
            this.sendData(data);
        };
        TUPConfctrl.prototype.setServerIndEvent = function (callbacks) {
            if (callbacks && typeof callbacks.onAttendeeUpdate == "function") {
                this.notifyFuncs[7] = callbacks.onAttendeeUpdate;
            }
            if (callbacks && typeof callbacks.onChairmanInd == "function") {
                this.notifyFuncs[8] = callbacks.onChairmanInd;
            }
            if (callbacks && typeof callbacks.onChairmanReleasedInd == "function") {
                this.notifyFuncs[10] = callbacks.onChairmanReleasedInd;
            }
            if (callbacks && typeof callbacks.onBroadcastAttendeeInd == "function") {
                this.notifyFuncs[13] = callbacks.onBroadcastAttendeeInd;
            }
            if (callbacks && typeof callbacks.onCancelBroadcastAttendeeInd == "function") {
                this.notifyFuncs[14] = callbacks.onCancelBroadcastAttendeeInd;
            }
            if (callbacks && typeof callbacks.onAttendeeBroadcastedInd == "function") {
                this.notifyFuncs[17] = callbacks.onAttendeeBroadcastedInd;
            }
            if (callbacks && typeof callbacks.onLocalBroadcastStatusInd == "function") {
                this.notifyFuncs[18] = callbacks.onLocalBroadcastStatusInd;
            }
            if (callbacks && typeof callbacks.onFloorAttendeeInd == "function") {
                this.notifyFuncs[24] = callbacks.onFloorAttendeeInd;
            }
            if (callbacks && typeof callbacks.onAttendeeListUpdate == "function") {
                this.notifyFuncs[25] = callbacks.onAttendeeListUpdate;
            }
        };
        TUPConfctrl.prototype.setBasicConfCallEvent = function (callbacks) {
            if (callbacks && typeof callbacks.onConfIncomingInd == "function") {
                this.notifyFuncs[19] = callbacks.onConfIncomingInd;
            }
            if (callbacks && typeof callbacks.onConfConnectedInd == "function") {
                this.notifyFuncs[20] = callbacks.onConfConnectedInd;
            }
            if (callbacks && typeof callbacks.onConfInfoInd == "function") {
                this.notifyFuncs[21] = callbacks.onConfInfoInd;
            }
            if (callbacks && typeof callbacks.onEndConfInd == "function") {
                this.notifyFuncs[22] = callbacks.onEndConfInd;
            }
            if (callbacks && typeof callbacks.onBeTransToConfInd == "function") {
                this.notifyFuncs[23] = callbacks.onBeTransToConfInd;
            }
            if (callbacks && typeof callbacks.onAddDataConfInd == "function") {
                this.notifyFuncs[54] = callbacks.onAddDataConfInd;
            }
            if (callbacks && typeof callbacks.onConfRightResult == "function") {
                this.notifyFuncs[57] = callbacks.onConfRightResult;
            }
        };
        TUPConfctrl.prototype.createConf = function (create_conf_info, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[2] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onCreateConfResult == "function") {
                this.notifyFuncs[26] = callbacks.onCreateConfResult;
            }
            var data = {
                "cmd": 458754,
                "description": "tup_confctrl_create_conf",
                "param": {
                    "create_conf_info": create_conf_info
                }
            };
            this.sendData(data);
        };
        TUPConfctrl.prototype.addAttendee = function (add_attendee_info, conf_handle, cc_addterminal_info, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[3] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onAddAttendeeResult == "function") {
                this.notifyFuncs[28] = callbacks.onAddAttendeeResult;
            }
            var data = {
                "cmd": 458755,
                "description": "tup_confctrl_add_attendee",
                "param": {
                    "add_attendee_info": add_attendee_info, "conf_handle": conf_handle, "cc_addterminal_info": cc_addterminal_info
                }
            };
            this.sendData(data);
        };
        TUPConfctrl.prototype.removeAttendee = function (params, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[4] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onDelAttendeeResult == "function") {
                this.notifyFuncs[29] = callbacks.onDelAttendeeResult;
            }
            var data = {
                "cmd": 458756,
                "description": "tup_confctrl_remove_attendee",
                "param": params
            };
            this.sendData(data);
        };
        TUPConfctrl.prototype.acceptConfEx = function (conf_handle, join_video_conf, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[5] = callbacks.response;
            }
            var data = {
                "cmd": 458757,
                "description": "tup_confctrl_accept_conf",
                "param": {
                    "conf_handle": conf_handle,
                    "join_video_conf": join_video_conf
                }
            };
            this.sendData(data);
        };
        TUPConfctrl.prototype.acceptConf = function (conf_handle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[5] = callbacks.response;
            }
            var data = {
                "cmd": 458757,
                "description": "tup_confctrl_accept_conf",
                "param": {
                    "conf_handle": conf_handle
                }
            };
            this.sendData(data);
        };
        TUPConfctrl.prototype.rejectConf = function (conf_handle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[6] = callbacks.response;
            }
            var data = {
                "cmd": 458758,
                "description": "tup_confctrl_reject_conf",
                "param": {
                    "conf_handle": conf_handle
                }
            };
            this.sendData(data);
        };
        TUPConfctrl.prototype.leaveConf = function (conf_handle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[7] = callbacks.response;
            }
            var data = {
                "cmd": 458759,
                "description": "tup_confctrl_leave_conf",
                "param": {
                    "conf_handle": conf_handle
                }
            };
            this.sendData(data);
        };
        TUPConfctrl.prototype.endConf = function (conf_handle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[8] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onEndConfResult == "function") {
                this.notifyFuncs[27] = callbacks.onEndConfResult;
            }
            var data = {
                "cmd": 458760,
                "description": "tup_confctrl_end_conf",
                "param": {
                    "conf_handle": conf_handle
                }
            };
            this.sendData(data);
        };
        TUPConfctrl.prototype.muteConf = function (conf_handle, to_mute, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[9] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onMuteConfResult == "function") {
                this.notifyFuncs[35] = callbacks.onMuteConfResult;
            }
            var data = {
                "cmd": 458761,
                "description": "tup_confctrl_mute_conf",
                "param": {
                    "conf_handle": conf_handle, "to_mute": to_mute
                }
            };
            this.sendData(data);
        };
        TUPConfctrl.prototype.muteAttendee = function (params, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[10] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onMuteAttendeeResult == "function") {
                this.notifyFuncs[36] = callbacks.onMuteAttendeeResult;
            }
            var data = {
                "cmd": 458762,
                "description": "tup_confctrl_mute_attendee",
                "param": params
            };
            this.sendData(data);
        };
        TUPConfctrl.prototype.hangUpAttendee = function (params, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[11] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onHangupAttendeeResult == "function") {
                this.notifyFuncs[31] = callbacks.onHangupAttendeeResult;
            }
            var data = {
                "cmd": 458763,
                "description": "tup_confctrl_hang_up_attendee",
                "param": params
            };
            this.sendData(data);
        };
        TUPConfctrl.prototype.callAttendee = function (params, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[12] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onCallAttendeeResult == "function") {
                this.notifyFuncs[30] = callbacks.onCallAttendeeResult;
            }
            var data = {
                "cmd": 458764,
                "description": "tup_confctrl_call_attendee",
                "param": params
            };
            this.sendData(data);
        };
        TUPConfctrl.prototype.postponeConf = function (conf_handle, time, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[13] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onConfTimeRemnant == "function") {
                this.notifyFuncs[6] = callbacks.onConfTimeRemnant;
            }
            if (callbacks && typeof callbacks.onConfPostphoneResult == "function") {
                this.notifyFuncs[34] = callbacks.onConfPostphoneResult;
            }
            var data = {
                "cmd": 458765,
                "description": "tup_confctrl_postpone_conf",
                "param": {
                    "conf_handle": conf_handle, "time": time
                }
            };
            this.sendData(data);
        };
        TUPConfctrl.prototype.requestChairman = function (password, conf_handle, number, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[14] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onReqChairmanResult == "function") {
                this.notifyFuncs[32] = callbacks.onReqChairmanResult;
            }
            if (callbacks && typeof callbacks.onEnterPasswordToBeChairman == "function") {
                this.notifyFuncs[9] = callbacks.onEnterPasswordToBeChairman;
            }
            var data = {
                "cmd": 458766,
                "description": "tup_confctrl_request_chairman",
                "param": {
                    "password": password, "conf_handle": conf_handle, "number": number
                }
            };
            this.sendData(data);
            password = "";
            data.param.password = "";
        };
        TUPConfctrl.prototype.releaseChairman = function (conf_handle, number, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[15] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onReleaseChairmanResult == "function") {
                this.notifyFuncs[33] = callbacks.onReleaseChairmanResult;
            }
            var data = {
                "cmd": 458767,
                "description": "tup_confctrl_release_chairman",
                "param": {
                    "conf_handle": conf_handle, "number": number
                }
            };
            this.sendData(data);
        };
        TUPConfctrl.prototype.lockconf = function (to_lock, conf_handle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[16] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onLockConfResult == "function") {
                this.notifyFuncs[42] = callbacks.onLockConfResult;
            }
            var data = {
                "cmd": 458768,
                "description": "tup_confctrl_lockconf",
                "param": {
                    "to_lock": to_lock, "conf_handle": conf_handle
                }
            };
            this.sendData(data);
        };
        TUPConfctrl.prototype.handup = function (attendee, conf_handle, to_handup, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[17] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onHandUpResult == "function") {
                this.notifyFuncs[37] = callbacks.onHandUpResult;
            }
            var data = {
                "cmd": 458769,
                "description": "tup_confctrl_handup",
                "param": {
                    "attendee": attendee, "conf_handle": conf_handle, "to_handup": to_handup
                }
            };
            this.sendData(data);
        };
        TUPConfctrl.prototype.p2pTransferToConf = function (create_conf_info, call_id, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[19] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onTransToConfResult == "function") {
                this.notifyFuncs[39] = callbacks.onTransToConfResult;
            }
            var data = {
                "cmd": 458771,
                "description": "tup_confctrl_p2p_transfer_to_conf",
                "param": {
                    "create_conf_info": create_conf_info, "call_id": call_id
                }
            };
            this.sendData(data);
        };
        TUPConfctrl.prototype.getDataconfParamsSyn = function (conf_params, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[20] = callbacks.response;
            }
            var data = {
                "cmd": 458772,
                "description": "tup_confctrl_get_dataconf_params_syn",
                "param": {
                    "conf_params": conf_params
                }
            };
            this.sendData(data);
        };
        TUPConfctrl.prototype.setConfMode = function (conf_handle, mode, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[21] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onSetConfModeResult == "function") {
                this.notifyFuncs[40] = callbacks.onSetConfModeResult;
            }
            var data = {
                "cmd": 458773,
                "description": "tup_confctrl_set_conf_mode",
                "param": {
                    "conf_handle": conf_handle, "mode": mode
                }
            };
            this.sendData(data);
        };
        TUPConfctrl.prototype.setConfMixedPicture = function (conf_handle, mode, image_type, attendee, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[75] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onSetConfMixedPictureResult == "function") {
                this.notifyFuncs[76] = callbacks.onSetConfMixedPictureResult;
            }
            var data = {
                "description": "tup_confctrl_set_mixed_picture",
                "cmd": 0x7004B,
                "param": {
                    "conf_handle": conf_handle,
                    "mixed_picture_params": {
                        "conf_mode": mode,
                        "image_type": image_type,
                        "attendee": attendee
                    }
                }
            };
            this.sendData(data);
        };
        TUPConfctrl.prototype.setServerParams = function (server_para, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[22] = callbacks.response;
            }
            var data = {
                "cmd": 458774,
                "description": "tup_confctrl_set_server_params",
                "param": {
                    "server_para": server_para
                }
            };
            this.sendData(data);
        };
        TUPConfctrl.prototype.setConfEnvType = function (conf_type, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[23] = callbacks.response;
            }
            var data = {
                "cmd": 458775,
                "description": "tup_confctrl_set_conf_env_type",
                "param": {
                    "conf_type": conf_type
                }
            };
            this.sendData(data);
        };
        TUPConfctrl.prototype.setToken = function (token, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[24] = callbacks.response;
            }
            var data = {
                "cmd": 458776,
                "description": "tup_confctrl_set_token",
                "param": {
                    "token": token
                }
            };
            this.sendData(data);
            data.param.token = "";
        };
        TUPConfctrl.prototype.bookConf = function (params, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[26] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onUportalBookConfResult == "function") {
                this.notifyFuncs[47] = callbacks.onUportalBookConfResult;
            }
            if (callbacks && typeof callbacks.onBookConfResult == "function") {
                this.notifyFuncs[1] = callbacks.onBookConfResult;
            }
            var data = {
                "cmd": 458778,
                "description": "tup_confctrl_book_conf",
                "param": params
            };
            this.sendData(data);
        };
        TUPConfctrl.prototype.createConfHandle = function (mcu_conf_info, conf_id, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[27] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onConnected == "function") {
                this.notifyFuncs[5] = callbacks.onConnected;
            }
            var data = {
                "cmd": 458779,
                "description": "tup_confctrl_create_conf_handle",
                "param": {
                    "mcu_conf_info": mcu_conf_info, "conf_id": conf_id
                }
            };
            this.sendData(data);
        };
        TUPConfctrl.prototype.destroyConfHandle = function (conf_handle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[28] = callbacks.response;
            }
            var data = {
                "cmd": 458780,
                "description": "tup_confctrl_destroy_conf_handle",
                "param": {
                    "conf_handle": conf_handle
                }
            };
            this.sendData(data);
        };
        TUPConfctrl.prototype.watchAttendee = function (params, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[29] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onWatchAttendeeResult == "function") {
                this.notifyFuncs[15] = callbacks.onWatchAttendeeResult;
            }
            var data = {
                "cmd": 458781,
                "description": "tup_confctrl_watch_attendee",
                "param": params
            };
            this.sendData(data);
        };
        TUPConfctrl.prototype.broadcastAttendee = function (params, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[30] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onBroadcastAttendeeResult == "function") {
                this.notifyFuncs[11] = callbacks.onBroadcastAttendeeResult;
            }
            if (callbacks && typeof callbacks.onCancelBroadcastAttendeeResult == "function") {
                this.notifyFuncs[12] = callbacks.onCancelBroadcastAttendeeResult;
            }
            var data = {
                "cmd": 458782,
                "description": "tup_confctrl_broadcast_attendee",
                "param": params
            };
            this.sendData(data);
        };
        TUPConfctrl.prototype.subscribeConf = function (conf_handle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[33] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onSubscribeConfResult == "function") {
                this.notifyFuncs[41] = callbacks.onSubscribeConfResult;
            }
            var data = {
                "cmd": 458785,
                "description": "tup_confctrl_subscribe_conf",
                "param": {
                    "conf_handle": conf_handle
                }
            };
            this.sendData(data);
        };
        TUPConfctrl.prototype.getLoginParams = function (login_params_get, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[36] = callbacks.response;
            }
            var data = {
                "cmd": 458788,
                "description": "tup_confctrl_get_login_params",
                "param": {
                    "login_params_get": login_params_get
                }
            };
            this.sendData(data);
        };
        TUPConfctrl.prototype.getDataconfParams = function (conf_params, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[37] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onConfParamsResult == "function") {
                this.notifyFuncs[53] = callbacks.onConfParamsResult;
            }
            var data = {
                "cmd": 458789,
                "description": "tup_confctrl_get_dataconf_params",
                "param": {
                    "conf_params": conf_params
                }
            };
            this.sendData(data);
        };
        TUPConfctrl.prototype.upgradeConf = function (add_media, conf_handle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[38] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onUpgradeConfResult == "function") {
                this.notifyFuncs[45] = callbacks.onUpgradeConfResult;
            }
            var data = {
                "cmd": 458790,
                "description": "tup_confctrl_upgrade_conf",
                "param": {
                    "add_media": add_media, "conf_handle": conf_handle
                }
            };
            this.sendData(data);
        };
        TUPConfctrl.prototype.getConfInfo = function (get_conf_info, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[39] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onGetConfInfoResult == "function") {
                this.notifyFuncs[44] = callbacks.onGetConfInfoResult;
            }
            var data = {
                "cmd": 458791,
                "description": "tup_confctrl_get_conf_info",
                "param": {
                    "get_conf_info": get_conf_info
                }
            };
            this.sendData(data);
        };
        TUPConfctrl.prototype.getConfList = function (get_conf_list, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[40] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onGetConfListResult == "function") {
                this.notifyFuncs[43] = callbacks.onGetConfListResult;
            }
            var data = {
                "cmd": 458792,
                "description": "tup_confctrl_get_conf_list",
                "param": {
                    "get_conf_list": get_conf_list
                }
            };
            this.sendData(data);
        };
        TUPConfctrl.prototype.getVmrList = function (get_vrm_list, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[41] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onGetVrmListResult == "function") {
                this.notifyFuncs[46] = callbacks.onGetVrmListResult;
            }
            var data = {
                "cmd": 458793,
                "description": "tup_confctrl_get_vmr_list",
                "param": {
                    "get_vrm_list": get_vrm_list
                }
            };
            this.sendData(data);
        };
        TUPConfctrl.prototype.setProxy = function (proxy_param, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[43] = callbacks.response;
            }
            var data = {
                "cmd": 458795,
                "description": "tup_confctrl_set_proxy",
                "param": {
                    "proxy_param": proxy_param
                }
            };
            this.sendData(data);
        };
        TUPConfctrl.prototype.holdConf = function (conf_handle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[44] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onHoldConfResult == "function") {
                this.notifyFuncs[55] = callbacks.onHoldConfResult;
            }
            var data = {
                "cmd": 458796,
                "description": "tup_confctrl_hold_conf",
                "param": {
                    "conf_handle": conf_handle
                }
            };
            this.sendData(data);
        };
        TUPConfctrl.prototype.unholdConf = function (conf_handle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[45] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onUnHoldConfResult == "function") {
                this.notifyFuncs[56] = callbacks.onUnHoldConfResult;
            }
            var data = {
                "cmd": 458797,
                "description": "tup_confctrl_unhold_conf",
                "param": {
                    "conf_handle": conf_handle
                }
            };
            this.sendData(data);
        };
        TUPConfctrl.prototype.getConfResourceSyn = function (random, conf_url, attend_conf_reqbody, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[47] = callbacks.response;
            }
            var data = {
                "cmd": 458799,
                "description": "tup_confctrl_get_conf_resource_syn",
                "param": {
                    "random": random, "conf_url": conf_url, "attend_conf_reqbody": attend_conf_reqbody
                }
            };
            this.sendData(data);
        };
        TUPConfctrl.prototype.requestAttendeesNumber = function (conf_handle, param, reqtype, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[48] = callbacks.response;
            }
            var data = {
                "cmd": 458800,
                "description": "tup_confctrl_request_attendees_number",
                "param": {
                    "conf_handle": conf_handle, "param": param, "reqtype": reqtype
                }
            };
            this.sendData(data);
        };
        TUPConfctrl.prototype.watchSvcAttendees = function (watch_svc_attendees_info, conf_handle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[49] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onSvcWatchAttendeesResult == "function") {
                this.notifyFuncs[58] = callbacks.onSvcWatchAttendeesResult;
            }
            if (callbacks && typeof callbacks.onSvcWatchAttendeesInd == "function") {
                this.notifyFuncs[59] = callbacks.onSvcWatchAttendeesInd;
            }
            var data = {
                "cmd": 458801,
                "description": "tup_confctrl_watch_svc_attendees",
                "param": {
                    "watch_svc_attendees_info": watch_svc_attendees_info, "conf_handle": conf_handle
                }
            };
            this.sendData(data);
        };
        TUPConfctrl.prototype.setSpeakerReport = function (is_enable, conf_handle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[52] = callbacks.response;
            }
            var data = {
                "cmd": 458804,
                "description": "tup_confctrl_set_speaker_report",
                "param": {
                    "is_enable": is_enable,
                    "conf_handle": conf_handle
                }
            };
            this.sendData(data);
        };
        TUPConfctrl.prototype.uninit = function (callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[53] = callbacks.response;
            }
            var data = {
                "cmd": 458805,
                "description": "tup_confctrl_uninit"
            };
            this.sendData(data);
        };
        TUPConfctrl.prototype.getConfInfoSyn = function (get_conf_info, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[58] = callbacks.response;
            }
            var data = {
                "cmd": 458810,
                "description": "tup_confctrl_get_conf_info_syn",
                "param": {
                    "get_conf_info": get_conf_info
                }
            };
            this.sendData(data);
        };
        TUPConfctrl.prototype.setTempUserFlag = function (isTempUser, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[68] = callbacks.response;
            }
            var data = {
                "cmd": 458820,
                "description": "tup_confctrl_set_tempuser_flag",
                "param": {
                    "is_tempuser": isTempUser,
                }
            };
            this.sendData(data);
        };
        return TUPConfctrl;
    }());
    exports.default = TUPConfctrl;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 367 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(368), __webpack_require__(369), __webpack_require__(23), __webpack_require__(24), __webpack_require__(14), __webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, tupMeeting_1, tupDataRender_1, client_1, errorCode_1, serverConfig_1, util_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tupDataConfWrapper = (function () {
        function tupDataConfWrapper() {
            this.count = 5;
            if (tupDataConfWrapper._instance) {
                throw new Error("Error: Instantiation failed: Use tupDataConfWrapper.getInstance() instead of new.");
            }
            tupDataConfWrapper._instance = this;
        }
        tupDataConfWrapper.prototype.build = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                var promise;
                return __generator(this, function (_a) {
                    util_1.default.info("tupDataConfWrapper", "step in tupDataWrapper to build");
                    if (tupDataConfWrapper.tupMeeting && tupDataConfWrapper.tupMeeting.wsocket.readyState === 1) {
                        util_1.default.info("tupDataConfWrapper", "websocket is connecting");
                        return [2];
                    }
                    promise = new Promise(function (resolve, reject) {
                        _this.onMeetingReady = function () {
                            resolve();
                            util_1.default.info("tupDataConfWrapper", "The onMeetingReady websocket is ready!");
                        },
                            _this.onMeetingClose = function () {
                                util_1.default.error("tupDataConfWrapper", "tupmeeting socket disconnect");
                                if (tupDataConfWrapper._instance.count > 0) {
                                    util_1.default.error("tupDataConfWrapper", "unisock reconnection=" + tupDataConfWrapper._instance.count);
                                    if (tupDataConfWrapper.tupMeeting) {
                                        tupDataConfWrapper.tupMeeting.closeChannel();
                                    }
                                    setTimeout(function () {
                                        tupDataConfWrapper.tupMeeting = new tupMeeting_1.default({
                                            svrAddr: serverConfig_1.CloudEC_SERVERCONFIG.ENTERPRISE_DOMAIN,
                                            ready: tupDataConfWrapper._instance.onMeetingReady,
                                            close: tupDataConfWrapper._instance.onMeetingClose,
                                            ssl: serverConfig_1.CloudEC_SERVERCONFIG.IS_WSS,
                                        });
                                        tupDataConfWrapper._instance.count--;
                                    }, 10000);
                                }
                                else {
                                    client_1.default.notifyErr(errorCode_1.EC_SDK_ERROR.WEBSOCKET_IS_CLOSED("Meeting Module"));
                                }
                            };
                    });
                    tupDataConfWrapper.tupMeeting = new tupMeeting_1.default({
                        svrAddr: serverConfig_1.CloudEC_SERVERCONFIG.ENTERPRISE_DOMAIN,
                        ready: this.onMeetingReady,
                        close: this.onMeetingClose,
                        ssl: serverConfig_1.CloudEC_SERVERCONFIG.IS_WSS,
                    });
                    return [2, promise];
                });
            });
        };
        tupDataConfWrapper.prototype.getPromise = function () {
            var p = {};
            p.promise = new Promise(function (resolve, reject) {
                p.resolve = resolve;
                p.reject = reject;
            });
            return p;
        };
        tupDataConfWrapper.getInstance = function () {
            return tupDataConfWrapper._instance;
        };
        tupDataConfWrapper.prototype.init = function () {
            return __awaiter(this, void 0, void 0, function () {
                var initConferencePromise, callbacks, param;
                return __generator(this, function (_a) {
                    initConferencePromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.param.result === 0) {
                                initConferencePromise.resolve(data);
                            }
                            else {
                                initConferencePromise.reject(data);
                            }
                        }
                    };
                    param = {
                        log_path: serverConfig_1.CloudEC_SERVERCONFIG.LOG_PATH + "/dataconf",
                        temp_path: serverConfig_1.CloudEC_SERVERCONFIG.LOG_PATH,
                    };
                    tupDataConfWrapper.tupMeeting.init(param, callbacks);
                    return [2, initConferencePromise.promise];
                });
            });
        };
        tupDataConfWrapper.prototype.startJoinConference = function (param) {
            return __awaiter(this, void 0, void 0, function () {
                var startJoinConferencePromise, callbacks;
                return __generator(this, function (_a) {
                    startJoinConferencePromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.param.result === 0) {
                                startJoinConferencePromise.resolve(data);
                            }
                            else {
                                startJoinConferencePromise.reject(data);
                            }
                        }
                    };
                    tupDataConfWrapper.tupMeeting.startJoinConference(param, callbacks);
                    return [2, startJoinConferencePromise.promise];
                });
            });
        };
        tupDataConfWrapper.prototype.createConference = function (title, option, userType, userId, userName, hostKey, confId, encryptionKey, siteId, siteUrl, serverIp, serverInterip, userCapability, handle, logUrl, userM, userT) {
            return __awaiter(this, void 0, void 0, function () {
                var createConfPromise, callbacks;
                return __generator(this, function (_a) {
                    createConfPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.param.result === 0) {
                                createConfPromise.resolve(data);
                            }
                            else {
                                createConfPromise.reject(data);
                            }
                        }
                    };
                    tupDataConfWrapper.tupMeeting.newDataConf(hostKey, title, userId, option, siteId, userType, siteUrl, serverIp, serverInterip, encryptionKey, confId, userCapability, handle, userName, logUrl, userM, userT, callbacks);
                    return [2, createConfPromise.promise];
                });
            });
        };
        tupDataConfWrapper.prototype.joinConference = function (handle) {
            return __awaiter(this, void 0, void 0, function () {
                var joinConfPromise, callbacks;
                return __generator(this, function (_a) {
                    joinConfPromise = this.getPromise();
                    callbacks = {
                        onJoinConference: function (data) {
                            if (data.param.value1 === 0) {
                                util_1.default.debug("tupDataConfWrapper", "join data conference success");
                                joinConfPromise.resolve(data);
                            }
                            else {
                                util_1.default.error("tupDataConfWrapper", "join data conference failed, data= " + JSON.stringify(data));
                                joinConfPromise.reject(data);
                            }
                        }
                    };
                    tupDataConfWrapper.tupMeeting.join(handle, callbacks);
                    return [2, joinConfPromise.promise];
                });
            });
        };
        tupDataConfWrapper.prototype.loadComponent = function (confHandle, compts) {
            return __awaiter(this, void 0, void 0, function () {
                var callbacks;
                return __generator(this, function (_a) {
                    callbacks = { onComponentLoad: function (data) {
                            if (data.param.value2 == 1) {
                                tupDataConfWrapper.tupMeeting.dsSetBgcolor(4294967295, confHandle, 1, {});
                                tupDataConfWrapper.tupMeeting.dsSetDispmode(confHandle, 1, 0, {});
                                tupDataConfWrapper.tupMeeting.dsSetCanvasSize(confHandle, 1, 1, { "cx": 11250, "cy": 9750 }, {});
                                util_1.default.debug("tupDataConfWrapper", "##$$ doc share set finished");
                            }
                            else if (data.param.value2 == 512) {
                                tupDataConfWrapper.tupMeeting.dsSetBgcolor(4294967295, confHandle, 512, {});
                                tupDataConfWrapper.tupMeeting.dsSetDispmode(confHandle, 512, 0, {});
                                tupDataConfWrapper.tupMeeting.dsSetCanvasSize(confHandle, 512, 1, { "cx": 15360, "cy": 11520 }, {});
                                util_1.default.debug("tupDataConfWrapper", "##$$ white board set finished");
                            }
                            else if (data.param.value2 == 2) {
                                util_1.default.debug("tupDataConfWrapper", "##$$ screen share set finished");
                            }
                        } };
                    tupDataConfWrapper.tupMeeting.loadComponent(confHandle, compts, callbacks);
                    return [2];
                });
            });
        };
        tupDataConfWrapper.prototype.asSetparam = function (confHandle, ulPorpType, width, height) {
            tupDataConfWrapper.tupMeeting.asSetparam(confHandle, ulPorpType, width, height, {});
            util_1.default.debug("tupDataConfWrapper", "asSetparam" + "ulPorpType:" + ulPorpType + "width:" + width + "height:" + height);
        };
        tupDataConfWrapper.prototype.dsSetCanvasSize = function (confHandle, ciid, redraw, width, height) {
            tupDataConfWrapper.tupMeeting.dsSetCanvasSize(confHandle, ciid, redraw, { "cx": width, "cy": height }, {});
        };
        tupDataConfWrapper.prototype.annotationInit = function (confHandle, ciid) {
            tupDataConfWrapper.tupMeeting.annotationRegCustomerType(confHandle, ciid, {});
            tupDataConfWrapper.tupMeeting.annotationInitResource(confHandle, ciid, {});
            tupDataConfWrapper.tupMeeting.annotationSetConfig(confHandle, ciid, {});
            tupDataConfWrapper.tupMeeting.annotationSetPen(confHandle, ciid, { "style": 0, "color": 128, "width": 75 }, 1, {});
            tupDataConfWrapper.tupMeeting.annotationSetBrush(confHandle, ciid, { "style": 0, "color": 128 }, {});
        };
        tupDataConfWrapper.prototype.asSetOwner = function (confHandle, action, userid) {
            return __awaiter(this, void 0, void 0, function () {
                var callbacks;
                return __generator(this, function (_a) {
                    callbacks = { response: {} };
                    tupDataConfWrapper.tupMeeting.asSetOwner(action, confHandle, userid, callbacks);
                    return [2];
                });
            });
        };
        tupDataConfWrapper.prototype.asSetShareType = function (confHandle, shareType) {
            return __awaiter(this, void 0, void 0, function () {
                var callbacks;
                return __generator(this, function (_a) {
                    callbacks = { response: {} };
                    tupDataConfWrapper.tupMeeting.asSetSharetype(confHandle, shareType, callbacks);
                    return [2];
                });
            });
        };
        tupDataConfWrapper.prototype.asStart = function (confHandle) {
            return __awaiter(this, void 0, void 0, function () {
                var callbacks;
                return __generator(this, function (_a) {
                    callbacks = { response: {} };
                    tupDataConfWrapper.tupMeeting.asStart(confHandle, callbacks);
                    return [2];
                });
            });
        };
        tupDataConfWrapper.prototype.setDataRender = function (data) {
            if (data.type == "canvas") {
                this.asSetparam(data.info.confHandle, 6, Number(data.info.width), Number(data.info.height));
                this.tupDataRender = new tupDataRender_1.default({ canvas: data.info.canvas, width: data.info.width, height: data.info.height });
                this.tupDataRender.setViewWH(data.info.width, data.info.height);
            }
            else if (data.type == "data") {
                this.tupDataRender.setShareData(data.info);
            }
        };
        tupDataConfWrapper.prototype.setWBDataRender = function (data) {
            if (data.type == "canvas") {
                this.dsSetCanvasSize(data.info.confHandle, 512, 1, Number(data.info.width) * 15, Number(data.info.height) * 15);
                this.tupWBDataRender = new tupDataRender_1.default({ canvas: data.info.canvas, width: data.info.width, height: data.info.height });
                this.tupWBDataRender.setViewWH(data.info.width, data.info.height);
            }
            else if (data.type == "data") {
                this.tupWBDataRender.setShareData(data.info);
            }
        };
        tupDataConfWrapper.prototype.asStop = function (confHandle) {
            return __awaiter(this, void 0, void 0, function () {
                var callbacks;
                return __generator(this, function (_a) {
                    callbacks = { response: {} };
                    tupDataConfWrapper.tupMeeting.asStop(confHandle, callbacks);
                    return [2];
                });
            });
        };
        tupDataConfWrapper.prototype.createWhiteBoard = function (confHandle, callbacks) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    tupDataConfWrapper.tupMeeting.dsNewDoc(confHandle, callbacks);
                    return [2];
                });
            });
        };
        tupDataConfWrapper.prototype.wbNewPage = function (confHandle, docid, height, width) {
            return __awaiter(this, void 0, void 0, function () {
                var callbacks;
                return __generator(this, function (_a) {
                    callbacks = { response: {} };
                    tupDataConfWrapper.tupMeeting.dsNewPage(confHandle, docid, height, width, callbacks);
                    return [2];
                });
            });
        };
        tupDataConfWrapper.prototype.wbSetCurrentPage = function (confHandle, docid, currentPage, sync) {
            return __awaiter(this, void 0, void 0, function () {
                var callbacks;
                return __generator(this, function (_a) {
                    callbacks = { response: {} };
                    tupDataConfWrapper.tupMeeting.dsSetCurrentPage(currentPage, confHandle, 512, docid, sync, callbacks);
                    return [2];
                });
            });
        };
        tupDataConfWrapper.prototype.deleleWhiteBoradStop = function (confHandle, docid) {
            return __awaiter(this, void 0, void 0, function () {
                var callbacks;
                return __generator(this, function (_a) {
                    callbacks = { response: {} };
                    tupDataConfWrapper.tupMeeting.dsDeleteDoc(confHandle, docid, callbacks);
                    return [2];
                });
            });
        };
        tupDataConfWrapper.prototype.annotationCreateStart = function (point, subtype, ciid, type, confHandle, docid, pageid) {
            var callbacks = { response: {} };
            tupDataConfWrapper.tupMeeting.annotationCreateStart(pageid, point, subtype, docid, confHandle, ciid, type, callbacks);
        };
        tupDataConfWrapper.prototype.annotationCreateCustomerUpdate = function (confHandle, ciid, pdata) {
            var callbacks = { response: {} };
            tupDataConfWrapper.tupMeeting.annotationCreateCustomerUpdate(confHandle, ciid, pdata, callbacks);
        };
        tupDataConfWrapper.prototype.annotationCreateDrawingUpdate = function (confHandle, ciid, pdata) {
            var callbacks = { response: {} };
            tupDataConfWrapper.tupMeeting.annotationCreateDrawingUpdate(confHandle, ciid, pdata, callbacks);
        };
        tupDataConfWrapper.prototype.annotationCreateDone = function (confHandle, retAnnoid, ciid, bCancel) {
            var callbacks = { response: {} };
            tupDataConfWrapper.tupMeeting.annotationCreateDone(retAnnoid, confHandle, ciid, bCancel, callbacks);
        };
        tupDataConfWrapper.prototype.annotationSetselect = function (confHandle, selectmode, ciid, annoid, docid, pageid) {
            var callbacks = { response: {} };
            tupDataConfWrapper.tupMeeting.annotationSetselect(selectmode, confHandle, ciid, annoid, annoid.length, docid, pageid, callbacks);
        };
        tupDataConfWrapper.prototype.annotationDelete = function (confHandle, ciid, ids, ncount, pageid, docid) {
            var callbacks = { response: {} };
            tupDataConfWrapper.tupMeeting.annotationDelete(confHandle, ciid, ids, ncount, pageid, docid, callbacks);
        };
        tupDataConfWrapper.prototype.annotationEditStart = function (confHandle, refannotid, edittype, docid, pageid, ciid, startpoint, annoid) {
            var callbacks = { response: {} };
            tupDataConfWrapper.tupMeeting.annotationEditStart(pageid, refannotid, edittype, docid, confHandle, ciid, startpoint, annoid, callbacks);
        };
        tupDataConfWrapper.prototype.annotationEditUpdate = function (confHandle, ciid, currentpoint) {
            var callbacks = { response: {} };
            tupDataConfWrapper.tupMeeting.annotationEditUpdate(confHandle, ciid, currentpoint, callbacks);
        };
        tupDataConfWrapper.prototype.annotationEditDone = function (confHandle, cancel, ciid) {
            var callbacks = { response: {} };
            tupDataConfWrapper.tupMeeting.annotationEditDone(cancel, confHandle, ciid, callbacks);
        };
        tupDataConfWrapper.prototype.annotationTextCreate = function (confHandle, pInfo, retAnnoid, docid, pageid, ciid) {
            var callbacks = { response: {} };
            tupDataConfWrapper.tupMeeting.annotationTextCreate(pageid, pInfo, retAnnoid, docid, confHandle, ciid, callbacks);
        };
        tupDataConfWrapper.prototype.annotationTextUpdate = function (confHandle, redraw, pInfo, docid, pageid, ciid, annoid) {
            var callbacks = { response: {} };
            tupDataConfWrapper.tupMeeting.annotationTextUpdate(redraw, pageid, pInfo, docid, confHandle, ciid, annoid, callbacks);
        };
        tupDataConfWrapper.prototype.annotationTextGetinfo = function (confHandle, ciid, docid, pageid, annoid) {
            var callbacks = { response: {} };
            tupDataConfWrapper.tupMeeting.annotationTextGetinfo(pageid, confHandle, ciid, docid, annoid, callbacks);
        };
        tupDataConfWrapper.prototype.annotationHittest = function (confHandle, pt, hitmode, docid, pageid, ciid) {
            var callbacks = { response: {} };
            tupDataConfWrapper.tupMeeting.annotationHittest(pageid, pt, hitmode, docid, confHandle, ciid, callbacks);
        };
        tupDataConfWrapper.prototype.annotationHittestRect = function (confHandle, ciid, rect) {
            var callbacks = { response: {} };
            tupDataConfWrapper.tupMeeting.annotationHittestRect(confHandle, ciid, rect, callbacks);
        };
        tupDataConfWrapper.prototype.annotationLaserpointerStart = function (confHandle, picFormat, localIndex, ptOffset, picW, pData, dataLen, picH, bLocal, ciid, dispSize) {
            var callbacks = { response: {} };
            tupDataConfWrapper.tupMeeting.annotationLaserpointerStart(picFormat, localIndex, ptOffset, picW, pData, dataLen, picH, bLocal, confHandle, ciid, dispSize, callbacks);
        };
        tupDataConfWrapper.prototype.annotationLaserpointerMoveto = function (confHandle, ciid, point) {
            var callbacks = { response: {} };
            tupDataConfWrapper.tupMeeting.annotationLaserpointerMoveto(confHandle, ciid, point, callbacks);
        };
        tupDataConfWrapper.prototype.annotationLaserpointerStop = function (confHandle, ciid) {
            var callbacks = { response: {} };
            tupDataConfWrapper.tupMeeting.annotationLaserpointerStop(confHandle, ciid, callbacks);
        };
        tupDataConfWrapper.prototype.asRequestPrivilege = function (confHandle, privilege) {
            var callbacks = { response: {} };
            tupDataConfWrapper.tupMeeting.asRequestPrivilege(privilege, confHandle, callbacks);
        };
        tupDataConfWrapper.prototype.asSetPrivilege = function (confHandle, privilege, action, userid) {
            var callbacks = { response: {} };
            tupDataConfWrapper.tupMeeting.asSetPrivilege(privilege, action, confHandle, userid, callbacks);
        };
        tupDataConfWrapper.prototype.asInputWndMsg = function (confHandle, msgid, lparam, wparam, pt) {
            var callbacks = { response: {} };
            tupDataConfWrapper.tupMeeting.asInputWndMsg(confHandle, msgid, lparam, wparam, pt, callbacks);
        };
        tupDataConfWrapper.prototype.sendMessage = function (confHandle, userid, lpdata) {
            return __awaiter(this, void 0, void 0, function () {
                var callbacks;
                return __generator(this, function (_a) {
                    callbacks = { response: {} };
                    if (-1 == userid) {
                        tupDataConfWrapper.tupMeeting.chatSendMsg(confHandle, 0, 0, lpdata, callbacks);
                    }
                    else {
                        tupDataConfWrapper.tupMeeting.chatSendMsg(confHandle, 2, userid, lpdata, callbacks);
                    }
                    return [2];
                });
            });
        };
        tupDataConfWrapper.prototype.kickOutUser = function (confHandle, userId) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    tupDataConfWrapper.tupMeeting.userKickout(confHandle, userId, {});
                    return [2];
                });
            });
        };
        tupDataConfWrapper.prototype.setBasicMeetingEvent = function (callbacks) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    tupDataConfWrapper.tupMeeting.setBasicMeetingEvent(callbacks);
                    return [2];
                });
            });
        };
        tupDataConfWrapper.prototype.userSetRole = function (role, confHandle, userId) {
            return __awaiter(this, void 0, void 0, function () {
                var setRolePromise, callbacks;
                return __generator(this, function (_a) {
                    setRolePromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.param.result !== 0) {
                                setRolePromise.reject({ result: false, info: data });
                            }
                        },
                        onHostGiveCfm: function (data) {
                            if (data.param.ret === 0) {
                                setRolePromise.resolve({ result: true, info: "" });
                            }
                            else {
                                setRolePromise.reject({ result: false, info: data });
                            }
                        }
                    };
                    tupDataConfWrapper.tupMeeting.userSetRole(role, confHandle, userId, callbacks);
                    return [2, setRolePromise.promise];
                });
            });
        };
        tupDataConfWrapper.prototype.userRequestRole = function (confHandle, role, password) {
            return __awaiter(this, void 0, void 0, function () {
                var requestRolePromise, callbacks;
                return __generator(this, function (_a) {
                    requestRolePromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.param.result !== 0) {
                                requestRolePromise.reject({ result: false, info: data });
                            }
                        },
                        onHostChangeCfm: function (data) {
                            if (data.param.ret === 0) {
                                requestRolePromise.resolve({ result: true, info: "" });
                            }
                            else {
                                requestRolePromise.reject({ result: false, info: data });
                            }
                        }
                    };
                    tupDataConfWrapper.tupMeeting.userRequestRole(confHandle, role, password, callbacks);
                    password = "";
                    return [2, requestRolePromise.promise];
                });
            });
        };
        tupDataConfWrapper.prototype.leave = function (confHandle) {
            return __awaiter(this, void 0, void 0, function () {
                var leavePromise, callbacks;
                return __generator(this, function (_a) {
                    leavePromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.param.result === 0) {
                                leavePromise.resolve({ result: true, info: data });
                            }
                            else {
                                leavePromise.reject({ result: false, info: data });
                            }
                        }
                    };
                    tupDataConfWrapper.tupMeeting.leave(confHandle, callbacks);
                    return [2, leavePromise.promise];
                });
            });
        };
        tupDataConfWrapper.prototype.terminal = function (confHandle) {
            return __awaiter(this, void 0, void 0, function () {
                var terminalPromise, callbacks;
                return __generator(this, function (_a) {
                    terminalPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.param.result != 0) {
                                terminalPromise.reject({ result: false, info: data });
                            }
                        },
                        confTerminate: function (data) {
                            if (data.param.value1 === 0) {
                                terminalPromise.resolve({ result: true, info: "terminal success" });
                            }
                            else {
                                terminalPromise.reject({ result: false, info: data });
                            }
                        }
                    };
                    tupDataConfWrapper.tupMeeting.terminate(confHandle, callbacks);
                    return [2, terminalPromise.promise];
                });
            });
        };
        tupDataConfWrapper.prototype.release = function (confHandle) {
            return __awaiter(this, void 0, void 0, function () {
                var releasePromise, callbacks;
                return __generator(this, function (_a) {
                    releasePromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.param.result === 0) {
                                releasePromise.resolve({ result: true, info: "release success" });
                            }
                            else {
                                releasePromise.reject({ result: false, info: data });
                            }
                        }
                    };
                    tupDataConfWrapper.tupMeeting.release(confHandle, callbacks);
                    return [2, releasePromise.promise];
                });
            });
        };
        tupDataConfWrapper._instance = new tupDataConfWrapper();
        return tupDataConfWrapper;
    }());
    exports.default = tupDataConfWrapper;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 368 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(1), __webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, util_1, util) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TUPMeeting = (function () {
        function TUPMeeting(opts) {
            var _this = this;
            this.notifyFuncs = [];
            this.rspFuncs = [];
            this.wsocket = {};
            var serviceAddr = opts.svrAddr || "127.0.0.1";
            var pcol = "ws://";
            if (opts.ssl === 1) {
                pcol = "wss://";
            }
            this.wsocket = new WebSocket(pcol + serviceAddr + ":7684", "tup_dataconf_service_protocol");
            this.wsocket.onopen = opts.ready;
            this.wsocket.onclose = opts.close;
            this.wsocket.onmessage = function (msg) {
                var data = JSON.parse(msg.data);
                var notifyIdx = data.notify - 40000000;
                if (data.notify > 0) {
                    if (typeof _this.notifyFuncs[notifyIdx] == "function") {
                        _this.notifyFuncs[notifyIdx](data);
                    }
                    if (2111 != notifyIdx && 2808 != notifyIdx) {
                        var logInfo = util.replaceLogInfo(data);
                        util_1.default.debug("tupMeeting", logInfo);
                    }
                }
                if (data.rsp > 0) {
                    var logInfo = util.replaceLogInfo(data);
                    util_1.default.debug("tupMeeting", logInfo);
                    var rspIdx = data.rsp - 40000000;
                    if (typeof _this.rspFuncs[rspIdx] == "function") {
                        _this.rspFuncs[rspIdx](data);
                    }
                }
            };
        }
        ;
        TUPMeeting.prototype.sendData = function (data) {
            var sendStr = JSON.stringify(data);
            this.wsocket.send(sendStr);
        };
        ;
        TUPMeeting.prototype.closeChannel = function () {
            this.wsocket.close();
        };
        TUPMeeting.prototype.newDataConf = function (host_key, conf_title, user_id, option, site_id, user_type, site_url, ms_server_ip, ms_server_interip, encryption_key, conf_id, user_capability, confHandle, user_name, user_log_uri, userM, userT, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[1] = callbacks.response;
            }
            var data = {
                "cmd": 40000001,
                "description": "tup_conf_new",
                "param": {
                    "host_key": host_key,
                    "conf_title": conf_title,
                    "user_id": user_id,
                    "option": option,
                    "site_id": site_id,
                    "user_type": user_type,
                    "site_url": site_url,
                    "ms_server_ip": ms_server_ip,
                    "ms_server_interip": ms_server_interip,
                    "encryption_key": encryption_key,
                    "conf_id": conf_id,
                    "user_capability": user_capability,
                    "confHandle": confHandle,
                    "user_name": user_name,
                    "user_log_uri": user_log_uri,
                    "userM": userM,
                    "userT": userT
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.release = function (confHandle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[2] = callbacks.response;
            }
            var data = {
                "cmd": 40000002,
                "description": "tup_conf_release",
                "param": {
                    "confHandle": confHandle
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.join = function (confHandle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[100] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onJoinConference == "function") {
                this.notifyFuncs[1001] = callbacks.onJoinConference;
            }
            if (callbacks && typeof callbacks.hostChangeInd == "function") {
                this.notifyFuncs[1101] = callbacks.hostChangeInd;
            }
            if (callbacks && typeof callbacks.presenterChangeInd == "function") {
                this.notifyFuncs[1105] = callbacks.presenterChangeInd;
            }
            var data = {
                "cmd": 40000100,
                "description": "tup_conf_join",
                "param": {
                    "confHandle": confHandle
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.setBasicMeetingEvent = function (callbacks) {
            if (callbacks && typeof callbacks.onUserEnterInd == "function") {
                this.notifyFuncs[1109] = callbacks.onUserEnterInd;
            }
            if (callbacks && typeof callbacks.onPresenterChangeInd == "function") {
                this.notifyFuncs[1105] = callbacks.onPresenterChangeInd;
            }
            if (callbacks && typeof callbacks.onHostChangeInd == "function") {
                this.notifyFuncs[1101] = callbacks.onHostChangeInd;
            }
            if (callbacks && typeof callbacks.onAsOnScreenData == "function") {
                this.notifyFuncs[2111] = callbacks.onAsOnScreenData;
            }
            if (callbacks && typeof callbacks.hostChangeCfm == "function") {
                this.notifyFuncs[1102] = callbacks.hostChangeCfm;
            }
            if (callbacks && typeof callbacks.presenterChangeCfm == "function") {
                this.notifyFuncs[1106] = callbacks.presenterChangeCfm;
            }
            if (callbacks && typeof callbacks.onUserModifyInd == "function") {
                this.notifyFuncs[1111] = callbacks.onUserModifyInd;
            }
            if (callbacks && typeof callbacks.onConfModelUpdate == "function") {
                this.notifyFuncs[1006] = callbacks.onConfModelUpdate;
            }
            if (callbacks && typeof callbacks.onLayoutUpdata == "function") {
                this.notifyFuncs[1007] = callbacks.onLayoutUpdata;
            }
            if (callbacks && typeof callbacks.onNetStatusReport == "function") {
                this.notifyFuncs[1051] = callbacks.onNetStatusReport;
            }
            if (callbacks && typeof callbacks.onFlowControl == "function") {
                this.notifyFuncs[1010] = callbacks.onFlowControl;
            }
            if (callbacks && typeof callbacks.onuserLeaveKickout == "function") {
                this.notifyFuncs[1003] = callbacks.onuserLeaveKickout;
            }
            if (callbacks && typeof callbacks.onConfLeave == "function") {
                this.notifyFuncs[1110] = callbacks.onConfLeave;
            }
            if (callbacks && typeof callbacks.onConfTerminate == "function") {
                this.notifyFuncs[1002] = callbacks.onConfTerminate;
            }
            if (callbacks && typeof callbacks.onWbCurrentPageInd == "function") {
                this.notifyFuncs[2805] = callbacks.onWbCurrentPageInd;
            }
            if (callbacks && typeof callbacks.onWBCurrentPage == "function") {
                this.notifyFuncs[2806] = callbacks.onWBCurrentPage;
            }
            if (callbacks && typeof callbacks.onAsOnSharingSession == "function") {
                this.notifyFuncs[2122] = callbacks.onAsOnSharingSession;
            }
            if (callbacks && typeof callbacks.onAsOnSharingState == "function") {
                this.notifyFuncs[2121] = callbacks.onAsOnSharingState;
            }
            if (callbacks && typeof callbacks.onDocNew == "function") {
                this.notifyFuncs[2201] = callbacks.onDocNew;
            }
            if (callbacks && typeof callbacks.onPageNew == "function") {
                this.notifyFuncs[2203] = callbacks.onPageNew;
            }
            if (callbacks && typeof callbacks.onCurrentPageInd == "function") {
                this.notifyFuncs[2205] = callbacks.onCurrentPageInd;
            }
            if (callbacks && typeof callbacks.onDocDel == "function") {
                this.notifyFuncs[2202] = callbacks.onDocDel;
            }
            if (callbacks && typeof callbacks.onPageDel == "function") {
                this.notifyFuncs[2204] = callbacks.onPageDel;
            }
            if (callbacks && typeof callbacks.onWbDocNew == "function") {
                this.notifyFuncs[2801] = callbacks.onWbDocNew;
            }
            if (callbacks && typeof callbacks.onWbDocDel == "function") {
                this.notifyFuncs[2802] = callbacks.onWbDocDel;
            }
            if (callbacks && typeof callbacks.onWbPageNew == "function") {
                this.notifyFuncs[2803] = callbacks.onWbPageNew;
            }
            if (callbacks && typeof callbacks.onWbdrawDataNotify == "function") {
                this.notifyFuncs[2808] = callbacks.onWbdrawDataNotify;
            }
            if (callbacks && typeof callbacks.onWbJsonLoad == "function") {
                this.notifyFuncs[2828] = callbacks.onWbJsonLoad;
            }
            if (callbacks && typeof callbacks.onWbPageDel == "function") {
                this.notifyFuncs[2804] = callbacks.onWbPageDel;
            }
            if (callbacks && typeof callbacks.onDrawDataNotify == "function") {
                this.notifyFuncs[2210] = callbacks.onDrawDataNotify;
            }
            if (callbacks && typeof callbacks.onVideoDecoderYUV == "function") {
                this.notifyFuncs[2034] = callbacks.onVideoDecoderYUV;
            }
            if (callbacks && typeof callbacks.onVideoPreprocessYUV == "function") {
                this.notifyFuncs[2033] = callbacks.onVideoPreprocessYUV;
            }
            if (callbacks && typeof callbacks.onVideoOnSwitch == "function") {
                this.notifyFuncs[2001] = callbacks.onVideoOnSwitch;
            }
            if (callbacks && typeof callbacks.onChatRecvMsg == "function") {
                this.notifyFuncs[2408] = callbacks.onChatRecvMsg;
            }
            if (callbacks && typeof callbacks.onAnnoHittest == "function") {
                this.notifyFuncs[2904] = callbacks.onAnnoHittest;
            }
            if (callbacks && typeof callbacks.onAnnoTextGetInfo == "function") {
                this.notifyFuncs[2903] = callbacks.onAnnoTextGetInfo;
            }
            if (callbacks && typeof callbacks.onAsOnPrivilege == "function") {
                this.notifyFuncs[2123] = callbacks.onAsOnPrivilege;
            }
        };
        TUPMeeting.prototype.leave = function (confHandle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[101] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onUserLeave == "function") {
                this.notifyFuncs[1110] = callbacks.onUserLeave;
            }
            var data = {
                "cmd": 40000101,
                "description": "tup_conf_leave",
                "param": {
                    "confHandle": confHandle
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.terminate = function (confHandle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[102] = callbacks.response;
            }
            if (callbacks && typeof callbacks.confTerminate == "function") {
                this.notifyFuncs[1002] = callbacks.confTerminate;
            }
            var data = {
                "cmd": 40000102,
                "description": "tup_conf_terminate",
                "param": {
                    "confHandle": confHandle
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.lock = function (lock, confHandle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[103] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onConfLockRsp == "function") {
                this.notifyFuncs[1011] = callbacks.onConfLockRsp;
            }
            if (callbacks && typeof callbacks.onConfLockReport == "function") {
                this.notifyFuncs[1012] = callbacks.onConfLockReport;
            }
            var data = {
                "cmd": 40000103,
                "description": "tup_conf_lock",
                "param": {
                    "lock": lock, "confHandle": confHandle
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.userKickout = function (confHandle, userid, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[105] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onUserLeave == "function") {
                this.notifyFuncs[1003] = callbacks.onUserLeave;
            }
            if (callbacks && typeof callbacks.onUserLeaveInd == "function") {
                this.notifyFuncs[1110] = callbacks.onUserLeaveInd;
            }
            var data = {
                "cmd": 40000105,
                "description": "tup_conf_user_kickout",
                "param": {
                    "confHandle": confHandle, "userid": userid
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.userSetRole = function (role, confHandle, userid, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[106] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onHostGiveInd == "function") {
                this.notifyFuncs[1103] = callbacks.onHostGiveInd;
            }
            if (callbacks && typeof callbacks.onHostGiveCfm == "function") {
                this.notifyFuncs[1104] = callbacks.onHostGiveCfm;
            }
            if (callbacks && typeof callbacks.onHostChangeInd == "function") {
                this.notifyFuncs[1101] = callbacks.onHostChangeInd;
            }
            if (callbacks && typeof callbacks.onPresenterGiveInd == "function") {
                this.notifyFuncs[1107] = callbacks.onPresenterGiveInd;
            }
            if (callbacks && typeof callbacks.onPresenterGiveCfm == "function") {
                this.notifyFuncs[1108] = callbacks.onPresenterGiveCfm;
            }
            if (callbacks && typeof callbacks.onPresenterChangeInd == "function") {
                this.notifyFuncs[1105] = callbacks.onPresenterChangeInd;
            }
            var data = {
                "cmd": 40000106,
                "description": "tup_conf_user_set_role",
                "param": {
                    "role": role, "confHandle": confHandle, "userid": userid
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.userRequestRole = function (confHandle, role, pszkey, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[107] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onHostChangeCfm == "function") {
                this.notifyFuncs[1102] = callbacks.onHostChangeCfm;
            }
            if (callbacks && typeof callbacks.onPresenterChangeCfm == "function") {
                this.notifyFuncs[1106] = callbacks.onPresenterChangeCfm;
            }
            if (callbacks && typeof callbacks.onHostChangeInd == "function") {
                this.notifyFuncs[1101] = callbacks.onHostChangeInd;
            }
            if (callbacks && typeof callbacks.onPresenterChangeInd == "function") {
                this.notifyFuncs[1105] = callbacks.onPresenterChangeInd;
            }
            var data = {
                "cmd": 40000107,
                "description": "tup_conf_user_request_role",
                "param": {
                    "confHandle": confHandle, "role": role, "pszkey": pszkey
                }
            };
            this.sendData(data);
            data.param.pszkey = "";
        };
        ;
        TUPMeeting.prototype.loadComponent = function (confHandle, compts, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[109] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onComponentLoad == "function") {
                this.notifyFuncs[1031] = callbacks.onComponentLoad;
            }
            var data = {
                "cmd": 40000109,
                "description": "tup_conf_load_component",
                "param": {
                    "confHandle": confHandle, "compts": compts
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.phoneConfig = function (host_pwd, server_url, conf_id, attendee_num, confHandle, conf_num, sess_flag, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[110] = callbacks.response;
            }
            var data = {
                "cmd": 40000110,
                "description": "tup_conf_phone_config",
                "param": {
                    "host_pwd": host_pwd, "server_url": server_url, "conf_id": conf_id, "attendee_num": attendee_num, "confHandle": confHandle, "conf_num": conf_num, "sess_flag": sess_flag
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.updateParam = function (param_name, confHandle, len, pbuffer, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[111] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onMessageUpdate == "function") {
                this.notifyFuncs[1008] = callbacks.onMessageUpdate;
            }
            var data = {
                "cmd": 40000111,
                "description": "tup_conf_update_param",
                "param": {
                    "param_name": param_name, "confHandle": confHandle, "len": len, "pbuffer": pbuffer
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.setQosOption = function (datatype, confHandle, nvalue, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[115] = callbacks.response;
            }
            var data = {
                "cmd": 40000115,
                "description": "tup_conf_set_qos_option",
                "param": {
                    "datatype": datatype, "confHandle": confHandle, "nvalue": nvalue
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.mute = function (bmute, confHandle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[117] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onConfMute == "function") {
                this.notifyFuncs[1041] = callbacks.onConfMute;
            }
            var data = {
                "cmd": 40000117,
                "description": "tup_conf_mute",
                "param": {
                    "bmute": bmute, "confHandle": confHandle
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.setIpList = function (confHandle, svrlist, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[120] = callbacks.response;
            }
            var data = {
                "cmd": 40000120,
                "description": "tup_conf_setiplist",
                "param": {
                    "confHandle": confHandle, "svrlist": svrlist
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.userGetHost = function (confHandle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[123] = callbacks.response;
            }
            var data = {
                "cmd": 40000123,
                "description": "tup_conf_user_get_host",
                "param": {
                    "confHandle": confHandle
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.userGetPresenter = function (confHandle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[124] = callbacks.response;
            }
            var data = {
                "cmd": 40000124,
                "description": "tup_conf_user_get_presenter",
                "param": {
                    "confHandle": confHandle
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.logDelete = function (confHandle, nDay, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[125] = callbacks.response;
            }
            var data = {
                "cmd": 40000125,
                "description": "tup_conf_log_delete",
                "param": {
                    "confHandle": confHandle, "nDay": nDay
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.flowControlLimit = function (datatype, confHandle, limitsize, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[126] = callbacks.response;
            }
            var data = {
                "cmd": 40000126,
                "description": "tup_conf_flowcontrol_limit",
                "param": {
                    "datatype": datatype, "confHandle": confHandle, "limitsize": limitsize
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.getCpuUsage = function (param, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[128] = callbacks.response;
            }
            var data = {
                "cmd": 40000128,
                "description": "get_cpu_usage",
                "param": {}
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.getMemoryUsage = function (mem, vmem, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[129] = callbacks.response;
            }
            var data = {
                "cmd": 40000129,
                "description": "get_memory_usage",
                "param": {
                    "mem": mem, "vmem": vmem
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.phoneConfMute = function (confHandle, mute_status, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[150] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onPhoneMuteStatusInd == "function") {
                this.notifyFuncs[1207] = callbacks.onPhoneMuteStatusInd;
            }
            var data = {
                "cmd": 40000150,
                "description": "tup_conf_phone_conf_mute",
                "param": {
                    "confHandle": confHandle, "mute_status": mute_status
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.phoneConfLock = function (confHandle, lock_status, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[151] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onPhoneLock == "function") {
                this.notifyFuncs[1226] = callbacks.onPhoneLock;
            }
            var data = {
                "cmd": 40000151,
                "description": "tup_conf_phone_conf_lock",
                "param": {
                    "confHandle": confHandle, "lock_status": lock_status
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.phoneConfExtend = function (confHandle, extend_time, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[152] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onPhoneExtend == "function") {
                this.notifyFuncs[1224] = callbacks.onPhoneExtend;
            }
            var data = {
                "cmd": 40000152,
                "description": "tup_conf_phone_conf_extend",
                "param": {
                    "confHandle": confHandle, "extend_time": extend_time
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.phoneConfStatusGet = function (confHandle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[153] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onPhoneStatusInd == "function") {
                this.notifyFuncs[1203] = callbacks.onPhoneStatusInd;
            }
            var data = {
                "cmd": 40000153,
                "description": "tup_conf_phone_conf_status_get",
                "param": {
                    "confHandle": confHandle
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.phoneCallKillOff = function (confHandle, call_record_id, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[154] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onPhoneLeaveInd == "function") {
                this.notifyFuncs[1202] = callbacks.onPhoneLeaveInd;
            }
            var data = {
                "cmd": 40000154,
                "description": "tup_conf_phone_call_kill_off",
                "param": {
                    "confHandle": confHandle, "call_record_id": call_record_id
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.phoneCallOut = function (bHost, pin_num, userid, uri, confHandle, user_name, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[155] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onPhoneEnterInd == "function") {
                this.notifyFuncs[1201] = callbacks.onPhoneEnterInd;
            }
            var data = {
                "cmd": 40000155,
                "description": "tup_conf_phone_call_out",
                "param": {
                    "bHost": bHost, "pin_num": pin_num, "userid": userid, "uri": uri, "confHandle": confHandle, "user_name": user_name
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.phoneCallSetName = function (confHandle, user_name, call_record_id, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[156] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onPhoneCallNameInd == "function") {
                this.notifyFuncs[1210] = callbacks.onPhoneCallNameInd;
            }
            var data = {
                "cmd": 40000156,
                "description": "tup_conf_phone_call_set_name",
                "param": {
                    "confHandle": confHandle, "user_name": user_name, "call_record_id": call_record_id
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.phoneCallMute = function (confHandle, call_record_id, mute_status, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[157] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onPhoneCallAudioStatusInd == "function") {
                this.notifyFuncs[1209] = callbacks.onPhoneCallAudioStatusInd;
            }
            var data = {
                "cmd": 40000157,
                "description": "tup_conf_phone_call_mute",
                "param": {
                    "confHandle": confHandle, "call_record_id": call_record_id, "mute_status": mute_status
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.phoneCallRecall = function (confHandle, call_record_id, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[161] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onPhoneCallAudioStatusInd == "function") {
                this.notifyFuncs[1209] = callbacks.onPhoneCallAudioStatusInd;
            }
            var data = {
                "cmd": 40000161,
                "description": "tup_conf_phone_call_recall",
                "param": {
                    "confHandle": confHandle, "call_record_id": call_record_id
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.phoneCallMuteSpeaker = function (confHandle, call_record_id, mute_status, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[162] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onPhoneCallAudioStatusInd == "function") {
                this.notifyFuncs[1209] = callbacks.onPhoneCallAudioStatusInd;
            }
            var data = {
                "cmd": 40000162,
                "description": "tup_conf_phone_call_mute_speaker",
                "param": {
                    "confHandle": confHandle, "call_record_id": call_record_id, "mute_status": mute_status
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.phoneConfChairmanReq = function (record_id, confHandle, chair_pwd, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[163] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onPhoneCallUserTypeInd == "function") {
                this.notifyFuncs[1214] = callbacks.onPhoneCallUserTypeInd;
            }
            var data = {
                "cmd": 40000163,
                "description": "tup_conf_phone_conf_chairman_req",
                "param": {
                    "record_id": record_id, "confHandle": confHandle, "chair_pwd": chair_pwd
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.phoneConfChairmanRelease = function (record_id, confHandle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[164] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onPhoneCallUserTypeInd == "function") {
                this.notifyFuncs[1214] = callbacks.onPhoneCallUserTypeInd;
            }
            var data = {
                "cmd": 40000164,
                "description": "tup_conf_phone_conf_chairman_release",
                "param": {
                    "record_id": record_id, "confHandle": confHandle
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.phoneCallHangup = function (confHandle, call_record_id, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[165] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onPhoneCallAudioStatusInd == "function") {
                this.notifyFuncs[1209] = callbacks.onPhoneCallAudioStatusInd;
            }
            var data = {
                "cmd": 40000165,
                "description": "tup_conf_phone_call_hangup",
                "param": {
                    "confHandle": confHandle, "call_record_id": call_record_id
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.phoneConfBroadcast = function (record_id, confHandle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[166] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onPhoneCallVideoStatusInd == "function") {
                this.notifyFuncs[1212] = callbacks.onPhoneCallVideoStatusInd;
            }
            var data = {
                "cmd": 40000166,
                "description": "tup_conf_phone_conf_broadcast",
                "param": {
                    "record_id": record_id, "confHandle": confHandle
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.phoneConfVoiceActive = function (confHandle, enable, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[167] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onPhoneCallAudioStatusInd == "function") {
                this.notifyFuncs[1209] = callbacks.onPhoneCallAudioStatusInd;
            }
            var data = {
                "cmd": 40000167,
                "description": "tup_conf_phone_conf_voice_active",
                "param": {
                    "confHandle": confHandle, "enable": enable
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.phoneConfFreeDiscuss = function (confHandle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[168] = callbacks.response;
            }
            var data = {
                "cmd": 40000168,
                "description": "tup_conf_phone_conf_free_discuss",
                "param": {
                    "confHandle": confHandle
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.phoneConfRaiseHand = function (record_id, confHandle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[169] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onPhoneCallAudioStatusInd == "function") {
                this.notifyFuncs[1209] = callbacks.onPhoneCallAudioStatusInd;
            }
            var data = {
                "cmd": 40000169,
                "description": "tup_conf_phone_conf_raise_hand",
                "param": {
                    "record_id": record_id, "confHandle": confHandle
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.videoOpen = function (confHandle, preview, deviceid, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[200] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onVideoOnSwitch == "function") {
                this.notifyFuncs[2001] = callbacks.onVideoOnSwitch;
            }
            var data = {
                "cmd": 40000200,
                "description": "tup_conf_video_open",
                "param": {
                    "confHandle": confHandle, "preview": preview, "deviceid": deviceid
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.videoClose = function (confHandle, deviceid, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[201] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onVideoOnSwitch == "function") {
                this.notifyFuncs[2001] = callbacks.onVideoOnSwitch;
            }
            var data = {
                "cmd": 40000201,
                "description": "tup_conf_video_close",
                "param": {
                    "confHandle": confHandle, "deviceid": deviceid
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.videoPause = function (bwizard, confHandle, userid, deviceid, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[202] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onVideoOnSwitch == "function") {
                this.notifyFuncs[2001] = callbacks.onVideoOnSwitch;
            }
            var data = {
                "cmd": 40000202,
                "description": "tup_conf_video_pause",
                "param": {
                    "bwizard": bwizard, "confHandle": confHandle, "userid": userid, "deviceid": deviceid
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.videoResume = function (confHandle, userid, deviceid, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[203] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onVideoOnSwitch == "function") {
                this.notifyFuncs[2001] = callbacks.onVideoOnSwitch;
            }
            var data = {
                "cmd": 40000203,
                "description": "tup_conf_video_resume",
                "param": {
                    "confHandle": confHandle, "userid": userid, "deviceid": deviceid
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.videoAttach = function (showmode, userid, pwnd, deviceid, confHandle, highchannel, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[204] = callbacks.response;
            }
            var data = {
                "cmd": 40000204,
                "description": "tup_conf_video_attach",
                "param": {
                    "showmode": showmode, "userid": userid, "pwnd": pwnd, "deviceid": deviceid, "confHandle": confHandle, "highchannel": highchannel
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.videoDetach = function (pwnd, confHandle, userid, deviceid, bleavechannel, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[205] = callbacks.response;
            }
            var data = {
                "cmd": 40000205,
                "description": "tup_conf_video_detach",
                "param": {
                    "pwnd": pwnd, "confHandle": confHandle, "userid": userid, "deviceid": deviceid, "bleavechannel": bleavechannel
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.videoSetCaptureRotate = function (confHandle, nRotate, deviceid, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[207] = callbacks.response;
            }
            var data = {
                "cmd": 40000207,
                "description": "tup_conf_video_set_capture_rotate",
                "param": {
                    "confHandle": confHandle, "nRotate": nRotate, "deviceid": deviceid
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.videoSetparam = function (yResolution, nFrameRate, nFecValue, nRawtype, xResolution, dwUserID, confHandle, dwDeviceID, nBitRate, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[208] = callbacks.response;
            }
            var data = {
                "cmd": 40000208,
                "description": "tup_conf_video_setparam",
                "param": {
                    "yResolution": yResolution, "nFrameRate": nFrameRate, "nFecValue": nFecValue, "nRawtype": nRawtype, "xResolution": xResolution, "dwUserID": dwUserID, "confHandle": confHandle, "dwDeviceID": dwDeviceID, "nBitRate": nBitRate
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.videoGetparam = function (confHandle, deviceid, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[209] = callbacks.response;
            }
            var data = {
                "cmd": 40000209,
                "description": "tup_conf_video_getparam",
                "param": {
                    "confHandle": confHandle, "deviceid": deviceid
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.videoGetDeviceinfo = function (confHandle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[211] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onVideoOnGetDeviceInfo == "function") {
                this.notifyFuncs[2014] = callbacks.onVideoOnGetDeviceInfo;
            }
            if (callbacks && typeof callbacks.onVideoOnGetDeviceNum == "function") {
                this.notifyFuncs[2013] = callbacks.onVideoOnGetDeviceNum;
            }
            var data = {
                "cmd": 40000211,
                "description": "tup_conf_video_get_deviceinfo",
                "param": {
                    "confHandle": confHandle
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.videoGetDevicecapbilityinfo = function (confHandle, deviceid, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[213] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onVideoOnGetDevicecapbilityNum == "function") {
                this.notifyFuncs[2024] = callbacks.onVideoOnGetDevicecapbilityNum;
            }
            if (callbacks && typeof callbacks.onVideoOnGetDevicecapbilityInfo == "function") {
                this.notifyFuncs[2025] = callbacks.onVideoOnGetDevicecapbilityInfo;
            }
            var data = {
                "cmd": 40000213,
                "description": "tup_conf_video_get_devicecapbilityinfo",
                "param": {
                    "confHandle": confHandle, "deviceid": deviceid
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.videoNotify = function (yResolution, nFrameRate, nFecValue, notifycmd, nBitRate, nRawtype, deviceid, dwUserID, confHandle, xResolution, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[214] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onVideoOnNotify == "function") {
                this.notifyFuncs[2010] = callbacks.onVideoOnNotify;
            }
            var data = {
                "cmd": 40000214,
                "description": "tup_conf_video_notify",
                "param": {
                    "yResolution": yResolution, "nFrameRate": nFrameRate, "nFecValue": nFecValue, "notifycmd": notifycmd, "nBitRate": nBitRate, "nRawtype": nRawtype, "deviceid": deviceid, "dwUserID": dwUserID, "confHandle": confHandle, "xResolution": xResolution
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.videoSnapshot = function (yResolution, nFrameRate, nFecValue, nRawtype, xResolution, dwUserID, confHandle, dwDeviceID, nBitRate, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[215] = callbacks.response;
            }
            var data = {
                "cmd": 40000215,
                "description": "tup_conf_video_snapshot",
                "param": {
                    "yResolution": yResolution, "nFrameRate": nFrameRate, "nFecValue": nFecValue, "nRawtype": nRawtype, "xResolution": xResolution, "dwUserID": dwUserID, "confHandle": confHandle, "dwDeviceID": dwDeviceID, "nBitRate": nBitRate
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.videoCloseall = function (confHandle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[226] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onVideoOnSwitch == "function") {
                this.notifyFuncs[2001] = callbacks.onVideoOnSwitch;
            }
            var data = {
                "cmd": 40000226,
                "description": "tup_conf_video_closeall",
                "param": {
                    "confHandle": confHandle
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.videoPreviewStart = function (pwnd, confHandle, deviceid, pvparam, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[227] = callbacks.response;
            }
            var data = {
                "cmd": 40000227,
                "description": "tup_conf_video_preview_start",
                "param": {
                    "pwnd": pwnd, "confHandle": confHandle, "deviceid": deviceid, "pvparam": pvparam
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.videoPreviewStop = function (confHandle, deviceid, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[228] = callbacks.response;
            }
            var data = {
                "cmd": 40000228,
                "description": "tup_conf_video_preview_stop",
                "param": {
                    "confHandle": confHandle, "deviceid": deviceid
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.videoPreviewSetparam = function (confHandle, deviceid, pvparam, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[229] = callbacks.response;
            }
            var data = {
                "cmd": 40000229,
                "description": "tup_conf_video_preview_setparam",
                "param": {
                    "confHandle": confHandle, "deviceid": deviceid, "pvparam": pvparam
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.videoSwitchChannel = function (confHandle, deviceid, userid, highchannel, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[206] = callbacks.response;
            }
            var data = {
                "cmd": 40000206,
                "description": "tup_conf_video_switch_channel",
                "param": {
                    "confHandle": confHandle,
                    "deviceid": deviceid,
                    "userid": userid,
                    "highchannel": highchannel
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.audioSetparam = function (MixMethord, logLevel, codecName, NR, AGC, EC, frameLen, logSize, cTraceFilePath, sampleRate, confHandle, enableTrace, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[300] = callbacks.response;
            }
            var data = {
                "cmd": 40000300,
                "description": "tup_conf_audio_setparam",
                "param": {
                    "MixMethord": MixMethord, "logLevel": logLevel, "codecName": codecName, "NR": NR, "AGC": AGC, "EC": EC, "frameLen": frameLen, "logSize": logSize, "cTraceFilePath": cTraceFilePath, "sampleRate": sampleRate, "confHandle": confHandle, "enableTrace": enableTrace
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.audioNotifyCmd = function (confHandle, cmd, userid, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[312] = callbacks.response;
            }
            if (callbacks && typeof callbacks.audioOnAudioAction == "function") {
                this.notifyFuncs[2707] = callbacks.audioOnAudioAction;
            }
            var data = {
                "cmd": 40000312,
                "description": "tup_conf_audio_notify_cmd",
                "param": {
                    "confHandle": confHandle, "cmd": cmd, "userid": userid
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.audioPlayFile = function (volume_scaling, confHandle, pAudioFileName, nLoop, nFileFormat, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[320] = callbacks.response;
            }
            var data = {
                "cmd": 40000320,
                "description": "tup_conf_audio_play_file",
                "param": {
                    "volume_scaling": volume_scaling, "confHandle": confHandle, "pAudioFileName": pAudioFileName, "nLoop": nLoop, "nFileFormat": nFileFormat
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.audioStopPlayFile = function (confHandle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[321] = callbacks.response;
            }
            var data = {
                "cmd": 40000321,
                "description": "tup_conf_audio_stop_play_file",
                "param": {
                    "confHandle": confHandle
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.audioGetDevice = function (binput, confHandle, ret_count, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[322] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onAudioJsonDeviceNum == "function") {
                this.notifyFuncs[2784] = callbacks.onAudioJsonDeviceNum;
            }
            if (callbacks && typeof callbacks.onAudioJsonDeviceInfo == "function") {
                this.notifyFuncs[2785] = callbacks.onAudioJsonDeviceInfo;
            }
            var data = {
                "cmd": 40000322,
                "description": "tup_conf_audio_get_device",
                "param": {
                    "binput": binput, "confHandle": confHandle, "ret_count": ret_count
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.audioOpen = function (confHandle, deviceid, bmic, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[323] = callbacks.response;
            }
            var data = {
                "cmd": 40000323,
                "description": "tup_conf_audio_open",
                "param": {
                    "confHandle": confHandle, "deviceid": deviceid, "bmic": bmic
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.audioClose = function (confHandle, bmic, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[324] = callbacks.response;
            }
            var data = {
                "cmd": 40000324,
                "description": "tup_conf_audio_close",
                "param": {
                    "confHandle": confHandle, "bmic": bmic
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.audioMute = function (bMute, confHandle, bmic, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[325] = callbacks.response;
            }
            var data = {
                "cmd": 40000325,
                "description": "tup_conf_audio_mute",
                "param": {
                    "bMute": bMute, "confHandle": confHandle, "bmic": bmic
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.audioGetVolume = function (confHandle, bsystem, bmic, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[326] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onAudioJsonDeviceVolume == "function") {
                this.notifyFuncs[2782] = callbacks.onAudioJsonDeviceVolume;
            }
            if (callbacks && typeof callbacks.onAudioJsonSystemDeviceVolume == "function") {
                this.notifyFuncs[2783] = callbacks.onAudioJsonSystemDeviceVolume;
            }
            var data = {
                "cmd": 40000326,
                "description": "tup_conf_audio_get_volume",
                "param": {
                    "confHandle": confHandle, "bsystem": bsystem, "bmic": bmic
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.audioSetVolume = function (confHandle, nVolume, bsystem, bmic, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[327] = callbacks.response;
            }
            var data = {
                "cmd": 40000327,
                "description": "tup_conf_audio_set_volume",
                "param": {
                    "confHandle": confHandle, "nVolume": nVolume, "bsystem": bsystem, "bmic": bmic
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.dsOpen = function (confHandle, filename, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[400] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onDocLoadStart == "function") {
                this.notifyFuncs[2207] = callbacks.onDocLoadStart;
            }
            if (callbacks && typeof callbacks.onDocNew == "function") {
                this.notifyFuncs[2201] = callbacks.onDocNew;
            }
            if (callbacks && typeof callbacks.onPageNew == "function") {
                this.notifyFuncs[2203] = callbacks.onPageNew;
            }
            if (callbacks && typeof callbacks.onPageLoaded == "function") {
                this.notifyFuncs[2208] = callbacks.onPageLoaded;
            }
            if (callbacks && typeof callbacks.onDocLoadFinish == "function") {
                this.notifyFuncs[2209] = callbacks.onDocLoadFinish;
            }
            if (callbacks && typeof callbacks.onCurrentPageInd == "function") {
                this.notifyFuncs[2205] = callbacks.onCurrentPageInd;
            }
            if (callbacks && typeof callbacks.onDrawDataNotify == "function") {
                this.notifyFuncs[2210] = callbacks.onDrawDataNotify;
            }
            var data = {
                "cmd": 40000400,
                "description": "tup_conf_ds_open",
                "param": {
                    "confHandle": confHandle, "filename": filename
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.dsClose = function (confHandle, docid, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[401] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onDocDel == "function") {
                this.notifyFuncs[2202] = callbacks.onDocDel;
            }
            if (callbacks && typeof callbacks.onPageDel == "function") {
                this.notifyFuncs[2204] = callbacks.onPageDel;
            }
            if (callbacks && typeof callbacks.onCurrentPageInd == "function") {
                this.notifyFuncs[2205] = callbacks.onCurrentPageInd;
            }
            if (callbacks && typeof callbacks.onDrawDataNotify == "function") {
                this.notifyFuncs[2210] = callbacks.onDrawDataNotify;
            }
            var data = {
                "cmd": 40000401,
                "description": "tup_conf_ds_close",
                "param": {
                    "confHandle": confHandle, "docid": docid
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.dsSetCurrentPage = function (pageid, confHandle, ciid, docid, sync, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[402] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onDrawDataNotify == "function") {
                this.notifyFuncs[2210] = callbacks.onDrawDataNotify;
            }
            var data = {
                "cmd": 40000402,
                "description": "tup_conf_ds_set_current_page",
                "param": {
                    "pageid": pageid, "confHandle": confHandle, "ciid": ciid, "docid": docid, "sync": sync
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.dsRotatePage = function (pageid, confHandle, docid, sync, rftype, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[403] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onDrawDataNotify == "function") {
                this.notifyFuncs[2210] = callbacks.onDrawDataNotify;
            }
            var data = {
                "cmd": 40000403,
                "description": "tup_conf_ds_rotate_page",
                "param": {
                    "pageid": pageid, "confHandle": confHandle, "docid": docid, "sync": sync, "rftype": rftype
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.dsSetZoom = function (reDraw, docId, zoomType, sync, factor, confHandle, ciid, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[404] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onDrawDataNotify == "function") {
                this.notifyFuncs[2210] = callbacks.onDrawDataNotify;
            }
            var data = {
                "cmd": 40000404,
                "description": "tup_conf_ds_set_zoom",
                "param": {
                    "reDraw": reDraw, "docId": docId, "zoomType": zoomType, "sync": sync, "factor": factor, "confHandle": confHandle, "ciid": ciid
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.dsSave = function (confHandle, ciid, docid, filename, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[405] = callbacks.response;
            }
            var data = {
                "cmd": 40000405,
                "description": "tup_conf_ds_save",
                "param": {
                    "confHandle": confHandle, "ciid": ciid, "docid": docid, "filename": filename
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.dsSetBgcolor = function (bgColor, confHandle, ciid, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[406] = callbacks.response;
            }
            var data = {
                "cmd": 40000406,
                "description": "tup_conf_ds_set_bgcolor",
                "param": {
                    "bgColor": bgColor, "confHandle": confHandle, "ciid": ciid
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.dsGetThumbnail = function (pageid, height, width, docid, confHandle, ciid, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[407] = callbacks.response;
            }
            var data = {
                "cmd": 40000407,
                "description": "tup_conf_ds_get_thumbnail",
                "param": {
                    "pageid": pageid, "height": height, "width": width, "docid": docid, "confHandle": confHandle, "ciid": ciid
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.dsSaveasPicture = function (pageid, confHandle, ciid, docid, filename, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[408] = callbacks.response;
            }
            var data = {
                "cmd": 40000408,
                "description": "tup_conf_ds_saveas_picture",
                "param": {
                    "pageid": pageid, "confHandle": confHandle, "ciid": ciid, "docid": docid, "filename": filename
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.dsGetSyncinfo = function (confHandle, ciid, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[409] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onDsSyncInfo == "function") {
                this.notifyFuncs[2220] = callbacks.onDsSyncInfo;
            }
            if (callbacks && typeof callbacks.onWbSyncInfo == "function") {
                this.notifyFuncs[2819] = callbacks.onWbSyncInfo;
            }
            var data = {
                "cmd": 40000409,
                "description": "tup_conf_ds_get_syncinfo",
                "param": {
                    "confHandle": confHandle, "ciid": ciid
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.dsSetCanvasSize = function (confHandle, ciid, redraw, size, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[410] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onDrawDataNotify == "function") {
                this.notifyFuncs[2210] = callbacks.onDrawDataNotify;
            }
            var data = {
                "cmd": 40000410,
                "description": "tup_conf_ds_set_canvas_size",
                "param": {
                    "confHandle": confHandle, "ciid": ciid, "redraw": redraw, "size": size
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.dsSetPageOrigin = function (redraw, pageid, sync, org, docid, confHandle, ciid, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[411] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onDrawDataNotify == "function") {
                this.notifyFuncs[2210] = callbacks.onDrawDataNotify;
            }
            var data = {
                "cmd": 40000411,
                "description": "tup_conf_ds_set_page_origin",
                "param": {
                    "redraw": redraw, "pageid": pageid, "sync": sync, "org": org, "docid": docid, "confHandle": confHandle, "ciid": ciid
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.dsGetDocProperty = function (confHandle, docid, nPropertyID, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[412] = callbacks.response;
            }
            var data = {
                "cmd": 40000412,
                "description": "tup_conf_ds_get_doc_property",
                "param": {
                    "confHandle": confHandle, "docid": docid, "nPropertyID": nPropertyID
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.dsGetPageProperty = function (pageid, confHandle, docid, nPropertyID, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[413] = callbacks.response;
            }
            var data = {
                "cmd": 40000413,
                "description": "tup_conf_ds_get_page_property",
                "param": {
                    "pageid": pageid, "confHandle": confHandle, "docid": docid, "nPropertyID": nPropertyID
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.dsSetDispmode = function (confHandle, ciid, dispMode, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[414] = callbacks.response;
            }
            var data = {
                "cmd": 40000414,
                "description": "tup_conf_ds_set_dispmode",
                "param": {
                    "confHandle": confHandle, "ciid": ciid, "dispMode": dispMode
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.dsGetDocCount = function (confHandle, ciid, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[416] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onDsDocCount == "function") {
                this.notifyFuncs[2221] = callbacks.onDsDocCount;
            }
            if (callbacks && typeof callbacks.onWbDocCount == "function") {
                this.notifyFuncs[2820] = callbacks.onWbDocCount;
            }
            var data = {
                "cmd": 40000416,
                "description": "tup_conf_ds_get_doc_count",
                "param": {
                    "confHandle": confHandle, "ciid": ciid
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.dsGetDocidByindex = function (index, confHandle, ciid, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[417] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onDsDocIdByIndex == "function") {
                this.notifyFuncs[2222] = callbacks.onDsDocIdByIndex;
            }
            if (callbacks && typeof callbacks.onWbDocIdByIndex == "function") {
                this.notifyFuncs[2821] = callbacks.onWbDocIdByIndex;
            }
            var data = {
                "cmd": 40000417,
                "description": "tup_conf_ds_get_docid_byindex",
                "param": {
                    "index": index, "confHandle": confHandle, "ciid": ciid
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.dsGetPageCount = function (confHandle, ciid, docid, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[418] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onDsPageCount == "function") {
                this.notifyFuncs[2223] = callbacks.onDsPageCount;
            }
            if (callbacks && typeof callbacks.onWbPageCount == "function") {
                this.notifyFuncs[2822] = callbacks.onWbPageCount;
            }
            var data = {
                "cmd": 40000418,
                "description": "tup_conf_ds_get_page_count",
                "param": {
                    "confHandle": confHandle, "ciid": ciid, "docid": docid
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.dsGetDocindexByid = function (confHandle, ciid, docid, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[419] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onDsDocIndexById == "function") {
                this.notifyFuncs[2224] = callbacks.onDsDocIndexById;
            }
            if (callbacks && typeof callbacks.onWbDocIndexById == "function") {
                this.notifyFuncs[2823] = callbacks.onWbDocIndexById;
            }
            var data = {
                "cmd": 40000419,
                "description": "tup_conf_ds_get_docindex_byid",
                "param": {
                    "confHandle": confHandle, "ciid": ciid, "docid": docid
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.dsGetPagenoByid = function (pageid, confHandle, ciid, docid, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[420] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onDsPageNoById == "function") {
                this.notifyFuncs[2225] = callbacks.onDsPageNoById;
            }
            if (callbacks && typeof callbacks.onWbPageNoById == "function") {
                this.notifyFuncs[2824] = callbacks.onWbPageNoById;
            }
            var data = {
                "cmd": 40000420,
                "description": "tup_conf_ds_get_pageno_byid",
                "param": {
                    "pageid": pageid, "confHandle": confHandle, "ciid": ciid, "docid": docid
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.dsGetPageidByno = function (confHandle, ciid, docid, pageno, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[421] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onDsPageIdByNo == "function") {
                this.notifyFuncs[2226] = callbacks.onDsPageIdByNo;
            }
            if (callbacks && typeof callbacks.onWbPageIdByNo == "function") {
                this.notifyFuncs[2825] = callbacks.onWbPageIdByNo;
            }
            var data = {
                "cmd": 40000421,
                "description": "tup_conf_ds_get_pageid_byno",
                "param": {
                    "confHandle": confHandle, "ciid": ciid, "docid": docid, "pageno": pageno
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.dsGetPageinfo = function (pageid, confHandle, ciid, docid, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[422] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onDsPageInfo == "function") {
                this.notifyFuncs[2227] = callbacks.onDsPageInfo;
            }
            if (callbacks && typeof callbacks.onWbPageInfo == "function") {
                this.notifyFuncs[2826] = callbacks.onWbPageInfo;
            }
            var data = {
                "cmd": 40000422,
                "description": "tup_conf_ds_get_pageinfo",
                "param": {
                    "pageid": pageid, "confHandle": confHandle, "ciid": ciid, "docid": docid
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.dsGetDocinfo = function (confHandle, ciid, docid, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[423] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onDsDocInfo == "function") {
                this.notifyFuncs[2228] = callbacks.onDsDocInfo;
            }
            if (callbacks && typeof callbacks.onWbDocInfo == "function") {
                this.notifyFuncs[2827] = callbacks.onWbDocInfo;
            }
            var data = {
                "cmd": 40000423,
                "description": "tup_conf_ds_get_docinfo",
                "param": {
                    "confHandle": confHandle, "ciid": ciid, "docid": docid
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.dsReleaseThumbnail = function (pageid, confHandle, ciid, docid, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[424] = callbacks.response;
            }
            var data = {
                "cmd": 40000424,
                "description": "tup_conf_ds_release_thumbnail",
                "param": {
                    "pageid": pageid, "confHandle": confHandle, "ciid": ciid, "docid": docid
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.dsGetSurfacebmp = function (width, confHandle, height, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[425] = callbacks.response;
            }
            var data = {
                "cmd": 40000425,
                "description": "tup_conf_ds_get_surfacebmp",
                "param": {
                    "width": width, "confHandle": confHandle, "height": height
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.dsNewDoc = function (confHandle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[500] = callbacks.response;
            }
            var data = {
                "cmd": 40000500,
                "description": "tup_conf_ds_new_doc",
                "param": {
                    "confHandle": confHandle
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.dsNewPage = function (confHandle, docid, height, width, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[501] = callbacks.response;
            }
            var data = {
                "cmd": 40000501,
                "description": "tup_conf_ds_new_page",
                "param": {
                    "width": width, "confHandle": confHandle, "docid": docid, "height": height
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.dsCopyPage = function (pageid, confHandle, docid, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[502] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onWbPageNew == "function") {
                this.notifyFuncs[2203] = callbacks.onWbPageNew;
            }
            var data = {
                "cmd": 40000502,
                "description": "tup_conf_ds_copy_page",
                "param": {
                    "pageid": pageid, "confHandle": confHandle, "docid": docid
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.dsDeleteDoc = function (confHandle, docid, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[503] = callbacks.response;
            }
            var data = {
                "cmd": 40000503,
                "description": "tup_conf_ds_delete_doc",
                "param": {
                    "confHandle": confHandle, "docid": docid
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.dsDeletePage = function (pageid, confHandle, docid, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[504] = callbacks.response;
            }
            var data = {
                "cmd": 40000504,
                "description": "tup_conf_ds_delete_page",
                "param": {
                    "pageid": pageid, "confHandle": confHandle, "docid": docid
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.dsLoad = function (confHandle, filename, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[507] = callbacks.response;
            }
            var data = {
                "cmd": 40000507,
                "description": "tup_conf_ds_load",
                "param": {
                    "confHandle": confHandle, "filename": filename
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.dsImport = function (confHandle, docid, filename, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[510] = callbacks.response;
            }
            var data = {
                "cmd": 40000510,
                "description": "tup_conf_ds_import",
                "param": {
                    "confHandle": confHandle, "docid": docid, "filename": filename
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.asSetPrivilege = function (privilege, action, confHandle, userid, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[600] = callbacks.response;
            }
            var data = {
                "cmd": 40000600,
                "description": "tup_conf_as_set_privilege",
                "param": {
                    "privilege": privilege, "action": action, "confHandle": confHandle, "userid": userid
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.asRequestPrivilege = function (privilege, confHandle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[601] = callbacks.response;
            }
            var data = {
                "cmd": 40000601,
                "description": "tup_conf_as_request_privilege",
                "param": {
                    "privilege": privilege, "confHandle": confHandle
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.asGetparam = function (ulPorpType, confHandle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[602] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onAsGetParam == "function") {
                this.notifyFuncs[2161] = callbacks.onAsGetParam;
            }
            var data = {
                "cmd": 40000602,
                "description": "tup_conf_as_getparam",
                "param": {
                    "ulPorpType": ulPorpType, "confHandle": confHandle
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.asSetparam = function (confHandle, ulPorpType, width, height, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[603] = callbacks.response;
            }
            var data = {
                "cmd": 40000603,
                "description": "tup_conf_as_setparam",
                "param": {
                    "ulPorpType": ulPorpType, "confHandle": confHandle, "ip1": width, "ip2": height,
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.asFlushscreendata = function (confHandle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[604] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onAsOnScreenData == "function") {
                this.notifyFuncs[2111] = callbacks.onAsOnScreenData;
            }
            var data = {
                "cmd": 40000604,
                "description": "tup_conf_as_flushscreendata",
                "param": {
                    "confHandle": confHandle
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.asSetOwner = function (action, confHandle, userid, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[605] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onAsOnSharingSession == "function") {
                this.notifyFuncs[2122] = callbacks.onAsOnSharingSession;
            }
            var data = {
                "cmd": 40000605,
                "description": "tup_conf_as_set_owner",
                "param": {
                    "action": action, "confHandle": confHandle, "userid": userid
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.asAttach = function (channel_type, confHandle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[606] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onAsOnChannel == "function") {
                this.notifyFuncs[2126] = callbacks.onAsOnChannel;
            }
            var data = {
                "cmd": 40000606,
                "description": "tup_conf_as_attach",
                "param": {
                    "channel_type": channel_type, "confHandle": confHandle
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.asDetach = function (channel_type, confHandle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[607] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onAsOnChannel == "function") {
                this.notifyFuncs[2126] = callbacks.onAsOnChannel;
            }
            var data = {
                "cmd": 40000607,
                "description": "tup_conf_as_detach",
                "param": {
                    "channel_type": channel_type, "confHandle": confHandle
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.asStart = function (confHandle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[608] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onAsOnSharingState == "function") {
                this.notifyFuncs[2121] = callbacks.onAsOnSharingState;
            }
            var data = {
                "cmd": 40000608,
                "description": "tup_conf_as_start",
                "param": {
                    "confHandle": confHandle
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.asStop = function (confHandle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[609] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onAsOnSharingState == "function") {
                this.notifyFuncs[2121] = callbacks.onAsOnSharingState;
            }
            var data = {
                "cmd": 40000609,
                "description": "tup_conf_as_stop",
                "param": {
                    "confHandle": confHandle
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.asRequestKeyframe = function (confHandle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[682] = callbacks.response;
            }
            var data = {
                "cmd": 40000682,
                "description": "tup_conf_as_request_keyframe",
                "param": {
                    "confHandle": confHandle
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.asSetSharetype = function (confHandle, sharingtype, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[683] = callbacks.response;
            }
            var data = {
                "cmd": 40000683,
                "description": "tup_conf_as_set_sharetype",
                "param": {
                    "confHandle": confHandle, "sharingtype": sharingtype
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.asBeginAnnotation = function (confHandle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[684] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onAsOnSharingState == "function") {
                this.notifyFuncs[2121] = callbacks.onAsOnSharingState;
            }
            var data = {
                "cmd": 40000684,
                "description": "tup_conf_as_begin_annotation",
                "param": {
                    "confHandle": confHandle
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.asEndAnnotation = function (confHandle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[685] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onAsOnSharingState == "function") {
                this.notifyFuncs[2121] = callbacks.onAsOnSharingState;
            }
            var data = {
                "cmd": 40000685,
                "description": "tup_conf_as_end_annotation",
                "param": {
                    "confHandle": confHandle
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.asPause = function (confHandle, pause, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[686] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onAsOnSharingState == "function") {
                this.notifyFuncs[2121] = callbacks.onAsOnSharingState;
            }
            var data = {
                "cmd": 40000686,
                "description": "tup_conf_as_pause",
                "param": {
                    "confHandle": confHandle, "pause": pause
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.asGetapplist = function (confHandle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[687] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onAsOnJsonGetParam == "function") {
                this.notifyFuncs[2161] = callbacks.onAsOnJsonGetParam;
            }
            var data = {
                "cmd": 40000687,
                "description": "tup_conf_as_getapplist",
                "param": {
                    "confHandle": confHandle
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.asSetsharingapp = function (action, confHandle, pappwnd, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[688] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onAsOnSharingState == "function") {
                this.notifyFuncs[2121] = callbacks.onAsOnSharingState;
            }
            var data = {
                "cmd": 40000688,
                "description": "tup_conf_as_setsharingapp",
                "param": {
                    "action": action, "confHandle": confHandle, "pappwnd": pappwnd
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.asGetDisplayinfo = function (confHandle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[689] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onAsOnGetDisplayInfo == "function") {
                this.notifyFuncs[2162] = callbacks.onAsOnGetDisplayInfo;
            }
            var data = {
                "cmd": 40000689,
                "description": "tup_conf_as_get_displayinfo",
                "param": {
                    "confHandle": confHandle
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.asGetDisplaythumbnail = function (index, confHandle, height, width, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[690] = callbacks.response;
            }
            var data = {
                "cmd": 40000690,
                "description": "tup_conf_as_get_displaythumbnail",
                "param": {
                    "index": index, "confHandle": confHandle, "height": height, "width": width
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.asSetSharingDisplay = function (index, confHandle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[691] = callbacks.response;
            }
            var data = {
                "cmd": 40000691,
                "description": "tup_conf_as_set_sharing_display",
                "param": {
                    "index": index, "confHandle": confHandle
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.asGetScreendata = function (confHandle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[692] = callbacks.response;
            }
            var data = {
                "cmd": 40000692,
                "description": "tup_conf_as_get_screendata",
                "param": {
                    "confHandle": confHandle
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.asInputWndMsg = function (confHandle, msgid, lparam, wparam, pt, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[610] = callbacks.response;
            }
            var data = {
                "cmd": 40000610,
                "description": "tup_conf_as_inputwndmsg",
                "param": {
                    "confHandle": confHandle,
                    "msgid": msgid,
                    "lparam": lparam,
                    "wparam": wparam,
                    "pt": pt
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.asSave = function (confHandle, filename, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[693] = callbacks.response;
            }
            var data = {
                "cmd": 40000693,
                "description": "tup_conf_as_save",
                "param": {
                    "confHandle": confHandle,
                    "filename": filename
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.chatSendMsg = function (confHandle, nType, userid, lpdata, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[700] = callbacks.response;
            }
            var data = {
                "cmd": 40000700,
                "description": "tup_conf_chat_send_msg",
                "param": {
                    "confHandle": confHandle, "nType": nType, "userid": userid, "lpdata": lpdata
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.chatCreateGroup = function (confHandle, pszGroupName, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[701] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onChatGroupCreate == "function") {
                this.notifyFuncs[2400] = callbacks.onChatGroupCreate;
            }
            var data = {
                "cmd": 40000701,
                "description": "tup_conf_chat_create_group",
                "param": {
                    "confHandle": confHandle, "pszGroupName": pszGroupName
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.chatDestroyGroup = function (nGroupID, confHandle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[702] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onChatGroupDestroy == "function") {
                this.notifyFuncs[2404] = callbacks.onChatGroupDestroy;
            }
            var data = {
                "cmd": 40000702,
                "description": "tup_conf_chat_destroy_group",
                "param": {
                    "nGroupID": nGroupID, "confHandle": confHandle
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.chatLeaveGroup = function (nGroupID, confHandle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[704] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onChatGroupUserLeave == "function") {
                this.notifyFuncs[2407] = callbacks.onChatGroupUserLeave;
            }
            var data = {
                "cmd": 40000704,
                "description": "tup_conf_chat_leave_group",
                "param": {
                    "nGroupID": nGroupID, "confHandle": confHandle
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.chatInvite = function (nGroupID, confHandle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[705] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onChatGroupInvite == "function") {
                this.notifyFuncs[2402] = callbacks.onChatGroupInvite;
            }
            if (callbacks && typeof callbacks.onChatGroupInfoModified == "function") {
                this.notifyFuncs[2401] = callbacks.onChatGroupInfoModified;
            }
            var data = {
                "cmd": 40000705,
                "description": "tup_conf_chat_invite",
                "param": {
                    "nGroupID": nGroupID, "confHandle": confHandle
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.chatKickout = function (nGroupID, confHandle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[706] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onChatGroupKickOut == "function") {
                this.notifyFuncs[2403] = callbacks.onChatGroupKickOut;
            }
            if (callbacks && typeof callbacks.onChatGroupInfoModified == "function") {
                this.notifyFuncs[2401] = callbacks.onChatGroupInfoModified;
            }
            var data = {
                "cmd": 40000706,
                "description": "tup_conf_chat_kickout",
                "param": {
                    "nGroupID": nGroupID, "confHandle": confHandle
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.chatRemovePublicMsg = function (nSequenceNmuber, confHandle, nFromUserid, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[707] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onChatOnPublicMsgRemove == "function") {
                this.notifyFuncs[2409] = callbacks.onChatOnPublicMsgRemove;
            }
            var data = {
                "cmd": 40000707,
                "description": "tup_conf_chat_remove_public_msg",
                "param": {
                    "nSequenceNmuber": nSequenceNmuber, "confHandle": confHandle, "nFromUserid": nFromUserid
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.chatSendmsgEx = function (senderName, confHandle, nType, userid, lpdata, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[708] = callbacks.response;
            }
            var data = {
                "cmd": 40000708,
                "description": "tup_conf_chat_sendmsg_ex",
                "param": {
                    "senderName": senderName, "confHandle": confHandle, "nType": nType, "userid": userid, "lpdata": lpdata
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.ftUploadFile = function (confHandle, userid, filename, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[750] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onFtOnFileInfo == "function") {
                this.notifyFuncs[2302] = callbacks.onFtOnFileInfo;
            }
            if (callbacks && typeof callbacks.onFtOnProgress == "function") {
                this.notifyFuncs[2303] = callbacks.onFtOnProgress;
            }
            if (callbacks && typeof callbacks.onFtOnEnd == "function") {
                this.notifyFuncs[2304] = callbacks.onFtOnEnd;
            }
            var data = {
                "cmd": 40000750,
                "description": "tup_conf_ft_upload_file",
                "param": {
                    "confHandle": confHandle, "userid": userid, "filename": filename
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.ftUploadFileToMany = function (confHandle, nNum, pUserID, filename, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[751] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onFtOnFileInfo == "function") {
                this.notifyFuncs[2302] = callbacks.onFtOnFileInfo;
            }
            if (callbacks && typeof callbacks.onFtOnProgress == "function") {
                this.notifyFuncs[2303] = callbacks.onFtOnProgress;
            }
            if (callbacks && typeof callbacks.onFtOnEnd == "function") {
                this.notifyFuncs[2304] = callbacks.onFtOnEnd;
            }
            var data = {
                "cmd": 40000751,
                "description": "tup_conf_ft_upload_file_to_many",
                "param": {
                    "confHandle": confHandle, "nNum": nNum, "pUserID": pUserID, "filename": filename
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.ftCancelUploading = function (confHandle, userid, filehandle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[752] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onFtOnFileRemove == "function") {
                this.notifyFuncs[2301] = callbacks.onFtOnFileRemove;
            }
            var data = {
                "cmd": 40000752,
                "description": "tup_conf_ft_cancel_uploading",
                "param": {
                    "confHandle": confHandle, "userid": userid, "filehandle": filehandle
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.ftDownloadFile = function (confHandle, filehandle, filename, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[753] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onFtOnProgress == "function") {
                this.notifyFuncs[2303] = callbacks.onFtOnProgress;
            }
            if (callbacks && typeof callbacks.onFtOnEnd == "function") {
                this.notifyFuncs[2304] = callbacks.onFtOnEnd;
            }
            var data = {
                "cmd": 40000753,
                "description": "tup_conf_ft_download_file",
                "param": {
                    "confHandle": confHandle, "filehandle": filehandle, "filename": filename
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.ftCancelDownloading = function (confHandle, filehandle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[754] = callbacks.response;
            }
            var data = {
                "cmd": 40000754,
                "description": "tup_conf_ft_cancel_downloading",
                "param": {
                    "confHandle": confHandle, "filehandle": filehandle
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.ftRemoveFile = function (confHandle, userid, filehandle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[755] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onFtOnFileRemove == "function") {
                this.notifyFuncs[2301] = callbacks.onFtOnFileRemove;
            }
            var data = {
                "cmd": 40000755,
                "description": "tup_conf_ft_remove_file",
                "param": {
                    "confHandle": confHandle, "userid": userid, "filehandle": filehandle
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.ftPause = function (confHandle, filehandle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[756] = callbacks.response;
            }
            var data = {
                "cmd": 40000756,
                "description": "tup_conf_ft_pause",
                "param": {
                    "confHandle": confHandle, "filehandle": filehandle
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.ftResume = function (confHandle, filehandle, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[757] = callbacks.response;
            }
            var data = {
                "cmd": 40000757,
                "description": "tup_conf_ft_resume",
                "param": {
                    "confHandle": confHandle, "filehandle": filehandle
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.annotationInitResource = function (confHandle, ciid, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[800] = callbacks.response;
            }
            var data = {
                "cmd": 40000800,
                "description": "tup_conf_annotation_init_resource",
                "param": {
                    "confHandle": confHandle, "ciid": ciid
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.annotationRegCustomerType = function (confHandle, ciid, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[801] = callbacks.response;
            }
            var data = {
                "cmd": 40000801,
                "description": "tup_conf_annotation_reg_customer_type",
                "param": {
                    "confHandle": confHandle, "ciid": ciid
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.annotationSetConfig = function (confHandle, ciid, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[802] = callbacks.response;
            }
            var data = {
                "cmd": 40000802,
                "description": "tup_conf_annotation_set_config",
                "param": {
                    "confHandle": confHandle, "ciid": ciid
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.annotationCreateStart = function (pageid, point, subtype, docid, confHandle, ciid, type, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[803] = callbacks.response;
            }
            var data = {
                "cmd": 40000803,
                "description": "tup_conf_annotation_create_start",
                "param": {
                    "pageid": pageid, "point": point, "subtype": subtype, "docid": docid, "confHandle": confHandle, "ciid": ciid, "type": type
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.annotationCreateDrawingUpdate = function (confHandle, ciid, pdata, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[805] = callbacks.response;
            }
            var data = {
                "cmd": 40000805,
                "description": "tup_conf_annotation_create_update",
                "param": {
                    "confHandle": confHandle, "ciid": ciid, "pdata": pdata
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.annotationCreateCustomerUpdate = function (confHandle, ciid, pdata, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[804] = callbacks.response;
            }
            var data = {
                "cmd": 40000804,
                "description": "tup_conf_annotation_create_update",
                "param": {
                    "confHandle": confHandle,
                    "ciid": ciid,
                    "pdata": pdata
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.annotationLaserpointerStart = function (picFormat, localIndex, ptOffset, picW, pData, dataLen, picH, bLocal, confHandle, ciid, dispSize, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[807] = callbacks.response;
            }
            var data = {
                "cmd": 40000807,
                "description": "tup_conf_annotation_laserpointer_start",
                "param": {
                    "picFormat": picFormat, "localIndex": localIndex, "ptOffset": ptOffset, "picW": picW, "pData": pData, "dataLen": dataLen, "picH": picH, "bLocal": bLocal, "confHandle": confHandle, "ciid": ciid, "dispSize": dispSize
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.annotationLaserpointerMoveto = function (confHandle, ciid, point, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[808] = callbacks.response;
            }
            var data = {
                "cmd": 40000808,
                "description": "tup_conf_annotation_laserpointer_moveto",
                "param": {
                    "confHandle": confHandle, "ciid": ciid, "point": point
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.annotationLaserpointerStop = function (confHandle, ciid, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[809] = callbacks.response;
            }
            var data = {
                "cmd": 40000809,
                "description": "tup_conf_annotation_laserpointer_stop",
                "param": {
                    "confHandle": confHandle, "ciid": ciid
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.annotationTextCreate = function (pageid, pInfo, ret_annoid, docid, confHandle, ciid, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[810] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onAnnoTextCreateNewId == "function") {
                this.notifyFuncs[2902] = callbacks.onAnnoTextCreateNewId;
            }
            var data = {
                "cmd": 40000810,
                "description": "tup_conf_annotation_text_create",
                "param": {
                    "pageid": pageid, "pInfo": pInfo, "ret_annoid": ret_annoid, "docid": docid, "confHandle": confHandle, "ciid": ciid
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.annotationTextUpdate = function (redraw, pageid, pInfo, docid, confHandle, ciid, annoid, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[811] = callbacks.response;
            }
            var data = {
                "cmd": 40000811,
                "description": "tup_conf_annotation_text_update",
                "param": {
                    "redraw": redraw, "pageid": pageid, "pInfo": pInfo, "docid": docid, "confHandle": confHandle, "ciid": ciid, "annoid": annoid
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.annotationTextGetinfo = function (pageid, confHandle, ciid, docid, annoid, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[812] = callbacks.response;
            }
            var data = {
                "cmd": 40000812,
                "description": "tup_conf_annotation_text_getinfo",
                "param": {
                    "pageid": pageid, "confHandle": confHandle, "ciid": ciid, "docid": docid, "annoid": annoid
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.annotationEditStart = function (pageid, refannotid, edittype, docid, confHandle, ciid, startpoint, annoid, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[813] = callbacks.response;
            }
            var data = {
                "cmd": 40000813,
                "description": "tup_conf_annotation_edit_start",
                "param": {
                    "pageid": pageid, "refannotid": refannotid, "edittype": edittype, "docid": docid, "confHandle": confHandle, "ciid": ciid, "startpoint": startpoint, "annoid": annoid
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.annotationEditUpdate = function (confHandle, ciid, currentpoint, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[814] = callbacks.response;
            }
            var data = {
                "cmd": 40000814,
                "description": "tup_conf_annotation_edit_update",
                "param": {
                    "confHandle": confHandle, "ciid": ciid, "currentpoint": currentpoint
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.annotationEditDone = function (cancel, confHandle, ciid, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[815] = callbacks.response;
            }
            var data = {
                "cmd": 40000815,
                "description": "tup_conf_annotation_edit_done",
                "param": {
                    "cancel": cancel, "confHandle": confHandle, "ciid": ciid
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.annotationDelete = function (confHandle, ciid, ids, ncount, pageid, docid, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[818] = callbacks.response;
            }
            var data = {
                "cmd": 40000818,
                "description": "tup_conf_annotation_delete",
                "param": {
                    "confHandle": confHandle, "ciid": ciid, "ids": ids, "ncount": ncount, "pageid": pageid, "docid": docid
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.annotationSetPen = function (confHandle, ciid, newpen, pentype, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[819] = callbacks.response;
            }
            var data = {
                "cmd": 40000819,
                "description": "tup_conf_annotation_set_pen",
                "param": {
                    "confHandle": confHandle, "ciid": ciid, "newpen": newpen, "pentype": pentype
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.annotationSetBrush = function (confHandle, ciid, newbrush, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[820] = callbacks.response;
            }
            var data = {
                "cmd": 40000820,
                "description": "tup_conf_annotation_set_brush",
                "param": {
                    "confHandle": confHandle, "ciid": ciid, "newbrush": newbrush
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.annotationGetAnnotinfo = function (annotid, pageid, confHandle, ciid, docid, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[821] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onAnnoGetInfo == "function") {
                this.notifyFuncs[2906] = callbacks.onAnnoGetInfo;
            }
            var data = {
                "cmd": 40000821,
                "description": "tup_conf_annotation_get_annotinfo",
                "param": {
                    "annotid": annotid, "pageid": pageid, "confHandle": confHandle, "ciid": ciid, "docid": docid
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.annotationCreateDone = function (ret_annoid, confHandle, ciid, bCancel, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[822] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onAnnoCreateNewId == "function") {
                this.notifyFuncs[2901] = callbacks.onAnnoCreateNewId;
            }
            var data = {
                "cmd": 40000822,
                "description": "tup_conf_annotation_create_done",
                "param": {
                    "ret_annoid": ret_annoid, "confHandle": confHandle, "ciid": ciid, "bCancel": bCancel
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.annotationHittest = function (pageid, pt, hitmode, docid, confHandle, ciid, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[823] = callbacks.response;
            }
            var data = {
                "cmd": 40000823,
                "description": "tup_conf_annotation_hittest",
                "param": {
                    "pageid": pageid, "pt": pt, "hitmode": hitmode, "docid": docid, "confHandle": confHandle, "ciid": ciid
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.annotationHittestRect = function (confHandle, ciid, rect, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[824] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onAnnoHittest2 == "function") {
                this.notifyFuncs[2905] = callbacks.onAnnoHittest2;
            }
            var data = {
                "cmd": 40000824,
                "description": "tup_conf_annotation_hittest_rect",
                "param": {
                    "confHandle": confHandle, "ciid": ciid, "rect": rect
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.annotationSetselect = function (selectmode, confHandle, ciid, annoid, ncount, docid, pageid, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[825] = callbacks.response;
            }
            var data = {
                "cmd": 40000825,
                "description": "tup_conf_annotation_setselect",
                "param": {
                    "selectmode": selectmode, "confHandle": confHandle, "ciid": ciid, "docid": docid, "pageid": pageid, "ids": annoid, "ncount": ncount, "userid": 0, "redraw": true
                }
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.startJoinConference = function (params, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[130] = callbacks.response;
            }
            var data = {
                "description": "tup_conf_start_joinconf",
                "cmd": 40000130,
                "param": params
            };
            this.sendData(data);
        };
        ;
        TUPMeeting.prototype.init = function (params, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[3] = callbacks.response;
            }
            var data = {
                "description": "tup_conf_init",
                "cmd": 40000003,
                "param": {
                    "selfthread": true,
                    "os_type": 1,
                    "dev_type": 1,
                    "media_log_level": 2,
                    "sdk_log_level": 2,
                    "log_path": params.log_path,
                    "temp_path": params.temp_path,
                    "dev_dpi_x": 0,
                    "dev_dpi_y": 0,
                    "conf_mode": 2
                }
            };
            this.sendData(data);
            this.setdatapicpath(params.temp_path, {});
        };
        ;
        TUPMeeting.prototype.setdatapicpath = function (filepath, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[135] = callbacks.response;
            }
            var data = {
                "description": "tup_conf_set_aspic_path",
                "cmd": 40000135,
                "param": {
                    cFilePath: filepath
                }
            };
            this.sendData(data);
        };
        ;
        return TUPMeeting;
    }());
    exports.default = TUPMeeting;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 369 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(136), __webpack_require__(11), __webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, YUVCanvas_1, enum_1, util_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TUPDataRender = (function () {
        function TUPDataRender(opts) {
            util_1.default.debug("TUPDataRender", "new TUPDataRender");
            this.channel_status = enum_1.CLOUDEC_CHANNEL_STATUS.IDLE;
            this.is_enable = 1;
            this.frameCnt = 0;
            this.width = opts.width;
            this.height = opts.height;
            this.viewH = opts.height;
            this.viewW = opts.width;
            this.makeYUVCanvas(opts.canvas);
        }
        TUPDataRender.prototype.setShareData = function (data) {
            this.drawImage(data.yuv);
        };
        TUPDataRender.prototype.drawImage = function (data) {
            var bytes = new Uint8Array(data);
            var ylen = this.width * this.height;
            var uvlen = (this.width / 2) * (this.height / 2);
            this.yuvCanvas.drawNextOutputPicture({
                yData: bytes.subarray(0, ylen),
                uData: bytes.subarray(ylen, ylen + uvlen),
                vData: bytes.subarray(ylen + uvlen, ylen + uvlen + uvlen),
                yDataPerRow: this.width,
                yRowCnt: this.height,
                uDataPerRow: this.width / 2,
                uRowCnt: this.height / 2
            });
        };
        TUPDataRender.prototype.makeYUVCanvas = function (_canvas) {
            delete this.canvas;
            this.canvas = _canvas;
            this.yuvCanvas = new YUVCanvas_1.default({ canvas: this.canvas, width: this.width, height: this.height });
            if (!this.yuvCanvas.isWebGL()) {
                util_1.default.error("TUPDataRender", "Could not initialise WebGL");
            }
            ;
        };
        TUPDataRender.prototype.setViewWH = function (width, height) {
            this.viewW = width;
            this.viewH = height;
            if (this.yuvCanvas) {
                this.yuvCanvas.changeCanvasSize(this.viewW, this.viewH);
            }
        };
        ;
        TUPDataRender.prototype.setRenderEnableFlag = function (is_enable) {
            this.is_enable = is_enable;
        };
        return TUPDataRender;
    }());
    exports.default = TUPDataRender;
    ;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 370 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, util_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TUPEaddr = (function () {
        function TUPEaddr(opts) {
            var _this = this;
            this.rspFuncs = new Array();
            this.notifyFuncs = new Array();
            this.wsocket = {};
            this.section_id = 0x30000;
            this.name = "Eaddr";
            this.notifyFuncs = new Array();
            this.rspFuncs = new Array();
            var serviceAddr = opts.svrAddr || "127.0.0.1";
            if (opts.socket) {
                this.uniSocket = opts.socket;
                this.uniSocket.registerService(this);
            }
            else {
                var pcol = "ws://";
                if (opts.ssl === 1) {
                    pcol = "wss://";
                }
                this.wsocket = new WebSocket(pcol + serviceAddr + ":7684", "tup_eaddr_service_protocol");
                this.wsocket.onopen = opts.ready;
                this.wsocket.onclose = opts.close;
                this.wsocket.onmessage = function (msg) {
                    var data = JSON.parse(msg.data);
                    util_1.default.debug("tupEaddr", msg.data);
                    _this.msgProcessor(data);
                };
            }
        }
        ;
        TUPEaddr.prototype.msgProcessor = function (data) {
            if (data.notify > 0) {
                var notifyIdx = data.notify & 0x7fff;
                if (typeof this.notifyFuncs[notifyIdx] == "function") {
                    this.notifyFuncs[notifyIdx](data);
                }
            }
            if (data.rsp > 0) {
                var rspIdx = data.rsp & 0x000f;
                if (typeof this.rspFuncs[rspIdx] == "function")
                    this.rspFuncs[rspIdx](data);
            }
        };
        TUPEaddr.prototype.sendData = function (data) {
            var sendStr = JSON.stringify(data);
            if (this.uniSocket) {
                this.uniSocket.sendData(sendStr);
            }
            else {
                this.wsocket.send(sendStr);
            }
        };
        ;
        TUPEaddr.prototype.eaddrConfig = function (params) {
            var data = {
                "cmd": 0x30001,
                "description": "tup_eaddr_Config",
                "param": params
            };
            this.sendData(data);
            data.param = "";
        };
        ;
        TUPEaddr.prototype.eaddrSearchInfo = function (params, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[2] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onSearchContactResult == "function") {
                this.notifyFuncs[2] = callbacks.onSearchContactResult;
            }
            var data = {
                "cmd": 0x30002,
                "description": "tup_eaddr_search_info",
                "param": params
            };
            this.sendData(data);
        };
        ;
        TUPEaddr.prototype.eaddrSearchAvatar = function (params, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[3] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onGetIAvatarResult == "function") {
                this.notifyFuncs[3] = callbacks.onGetIAvatarResult;
            }
            var data = {
                "cmd": 0x30003,
                "description": "tup_eaddr_search_avatar",
                "param": params
            };
            this.sendData(data);
        };
        ;
        TUPEaddr.prototype.eaddrSetLogPara = function (params) {
            var data = {
                "cmd": 0x30004,
                "description": "tup_eaddr_start_log",
                "param": params
            };
            this.sendData(data);
        };
        ;
        TUPEaddr.prototype.eaddrSetIcon = function (params, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[5] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onSetIconResult == "function") {
                this.notifyFuncs[5] = callbacks.onSetIconResult;
            }
            var data = {
                "cmd": 0x30005,
                "description": "tup_eaddr_set_icon",
                "param": params
            };
            this.sendData(data);
        };
        ;
        TUPEaddr.prototype.eaddrSearchDept = function (params, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[6] = callbacks.response;
            }
            if (callbacks && typeof callbacks.onSearchDeptResult == "function") {
                this.notifyFuncs[6] = callbacks.onSearchDeptResult;
            }
            var data = {
                "cmd": 0x30006,
                "description": "tup_eaddr_search_dept",
                "param": params
            };
            this.sendData(data);
        };
        ;
        TUPEaddr.prototype.eaddrChangeLogPara = function (params) {
            var data = {
                "cmd": 0x30007,
                "description": "tup_eaddr_change_log",
                "param": params
            };
            this.sendData(data);
        };
        ;
        TUPEaddr.prototype.eaddrStopLogPara = function () {
            var data = {
                "cmd": 0x30008,
                "description": "tup_eaddr_stop_log",
                "param": null
            };
            this.sendData(data);
        };
        ;
        TUPEaddr.prototype.eaddrInit = function () {
            var data = {
                "cmd": 0x30009,
                "description": "tup_eaddr_init",
                "param": null
            };
            this.sendData(data);
        };
        ;
        TUPEaddr.prototype.eaddrDeInit = function () {
            var data = {
                "cmd": 0x3000A,
                "description": "tup_eaddr_uninit",
                "param": null
            };
            this.sendData(data);
        };
        ;
        return TUPEaddr;
    }());
    exports.default = TUPEaddr;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 371 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(372), __webpack_require__(141), __webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, publicDB_1, indexDBConfig_1, util_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ConfAttendeeList = (function () {
        function ConfAttendeeList() {
            var _this = this;
            this.addAttendeeTb = function (attendee) {
                var promise = new Promise(function (resolve, reject) {
                    var data = { result: 0, reason: "execution succeed" };
                    var transaction = _this.database.transaction([indexDBConfig_1.CloudEC_TABLEINFOCONFIG.TABLENAME], "readwrite");
                    var objectStore = transaction.objectStore(indexDBConfig_1.CloudEC_TABLEINFOCONFIG.TABLENAME);
                    var request = objectStore.get(attendee.participantId);
                    request.onsuccess = function (event) {
                        var linkRecord = event.target.result;
                        if (linkRecord != null) {
                            linkRecord.isDeaf = attendee.isDeaf;
                            linkRecord.isMute = attendee.isMute;
                            linkRecord.isSelf = attendee.isSelf;
                            linkRecord.raiseHandState = attendee.raiseHandState;
                            linkRecord.name = attendee.name;
                            linkRecord.number = attendee.number;
                            linkRecord.participantId = attendee.participantId;
                            linkRecord.role = attendee.role;
                            linkRecord.state = attendee.joinState;
                            objectStore.put(linkRecord);
                            util_1.default.debug("confAttendeeList", "update completed");
                        }
                        else {
                            objectStore.put(attendee);
                            util_1.default.debug("confAttendeeList", "Insert successfully");
                        }
                    };
                    request.onerror = function (event) {
                        data = { result: -1, reason: "execution failed" };
                        util_1.default.error("confAttendeeList", "An error occurred" + request.error);
                    };
                    resolve(data);
                });
                return promise;
            };
            this.deleteAttendeeTb = function (participantId) {
                var promise = new Promise(function (resolve, reject) {
                    var data = { result: 0, reason: "execution succeed" };
                    var transaction = _this.database.transaction([indexDBConfig_1.CloudEC_TABLEINFOCONFIG.TABLENAME], "readwrite");
                    var objectStore = transaction.objectStore(indexDBConfig_1.CloudEC_TABLEINFOCONFIG.TABLENAME);
                    var request = objectStore.delete(participantId);
                    request.onsuccess = function (event) {
                        util_1.default.debug("confAttendeeList", "Participant deleted successfully");
                    };
                    request.onerror = function (event) {
                        data = { result: -1, reason: "execution failed" };
                        util_1.default.error("confAttendeeList", "An error occurred" + request.error);
                    };
                    resolve(data);
                });
                return promise;
            };
            this.showAttendeeTb = function () {
                var attendeeList = new Array();
                var data = { result: 0, reason: "execution succeed", attendeeList: attendeeList };
                var transaction = _this.database.transaction([indexDBConfig_1.CloudEC_TABLEINFOCONFIG.TABLENAME], "readonly");
                var objectStore = transaction.objectStore(indexDBConfig_1.CloudEC_TABLEINFOCONFIG.TABLENAME);
                var i = 0;
                var request = objectStore.openCursor();
                var promise = new Promise(function (resolve, reject) {
                    request.onsuccess = function (event) {
                        var cursor = event.target.result;
                        if (cursor) {
                            var attendee = cursor.value;
                            if (0 == attendee.state) {
                                attendeeList[i] = attendee;
                                i = ++i;
                            }
                            cursor.continue();
                            util_1.default.debug("confAttendeeList", JSON.stringify(attendee));
                        }
                        else {
                            data = { result: 0, reason: "execution succeed", attendeeList: attendeeList };
                            resolve(data);
                            util_1.default.debug("confAttendeeList", "query end");
                        }
                    };
                    request.onerror = function (event) {
                        data = { result: -1, reason: "execution failed", attendeeList: [] };
                        util_1.default.error("confAttendeeList", "An error occurred" + request.error);
                        reject(data);
                    };
                });
                return promise;
            };
            this.updateDataconfMemberTb = function (participantId, isDataconfMember, dataconfUserId) {
                var data = { result: 0, reason: "execution succeed" };
                var transaction = _this.database.transaction([indexDBConfig_1.CloudEC_TABLEINFOCONFIG.TABLENAME], "readwrite");
                var objectStore = transaction.objectStore(indexDBConfig_1.CloudEC_TABLEINFOCONFIG.TABLENAME);
                var request = objectStore.get(participantId);
                var promise = new Promise(function (resolve, reject) {
                    request.onsuccess = function (event) {
                        var linkRecord = event.target.result;
                        if (linkRecord != null) {
                            linkRecord.isDataconfMember = isDataconfMember;
                            linkRecord.dataconfUserId = dataconfUserId;
                            objectStore.put(linkRecord);
                            util_1.default.debug("confAttendeeList", "update completed");
                        }
                        else {
                            util_1.default.debug("confAttendeeList", "update failed");
                        }
                        resolve(data);
                    };
                    request.onerror = function (event) {
                        data = { result: -1, reason: "execution failed" };
                        util_1.default.error("confAttendeeList", "An error occurred" + request.error);
                        reject(data);
                    };
                });
                return promise;
            };
            this.selectDataconfMemberByIndexTb = function (dataconfUserId) {
                var data = { result: 0, reason: "execution succeed", attendee: "" };
                var transaction = _this.database.transaction([indexDBConfig_1.CloudEC_TABLEINFOCONFIG.TABLENAME], "readonly");
                var objectStore = transaction.objectStore(indexDBConfig_1.CloudEC_TABLEINFOCONFIG.TABLENAME);
                var attendee = null;
                var request = objectStore.index("dataconfUserId").get(dataconfUserId);
                var promise = new Promise(function (resolve, reject) {
                    request.onsuccess = function (event) {
                        attendee = event.target.result;
                        if (attendee != null) {
                            data = { result: 0, reason: "execution succeed", attendee: attendee };
                        }
                        else {
                            data = { result: -1, reason: "execution failed", attendee: "" };
                        }
                        resolve(data);
                    };
                    request.onerror = function (event) {
                        data = { result: -1, reason: "execution failed", attendee: "" };
                        util_1.default.error("confAttendeeList", "An error occurred" + request.error);
                        reject(data);
                    };
                });
                return promise;
            };
            this.selectDataconfMemberTb = function (participantId) {
                var data = { result: 0, reason: "execution succeed", attendee: "" };
                var transaction = _this.database.transaction([indexDBConfig_1.CloudEC_TABLEINFOCONFIG.TABLENAME], "readonly");
                var objectStore = transaction.objectStore(indexDBConfig_1.CloudEC_TABLEINFOCONFIG.TABLENAME);
                var request = objectStore.get(participantId);
                var promise = new Promise(function (resolve, reject) {
                    request.onsuccess = function (event) {
                        var linkRecord = event.target.result;
                        if (linkRecord != null) {
                            data.attendee = linkRecord;
                            resolve(data);
                            util_1.default.debug("confAttendeeList", "update completed");
                        }
                        else {
                            util_1.default.debug("confAttendeeList", "update failed");
                        }
                    };
                    request.onerror = function (event) {
                        data = { result: -1, reason: "execution failed", attendee: "" };
                        util_1.default.error("confAttendeeList", "An error occurred" + request.error);
                        reject(data);
                    };
                });
                return promise;
            };
            this.updateDataconfMemberTypeTb = function (participantId, dataconfMemberType) {
                var data = { result: 0, reason: "execution succeed" };
                var transaction = _this.database.transaction([indexDBConfig_1.CloudEC_TABLEINFOCONFIG.TABLENAME], "readwrite");
                var objectStore = transaction.objectStore(indexDBConfig_1.CloudEC_TABLEINFOCONFIG.TABLENAME);
                var request = objectStore.get(participantId);
                var promise = new Promise(function (resolve, reject) {
                    request.onsuccess = function (event) {
                        var linkRecord = event.target.result;
                        if (linkRecord != null) {
                            linkRecord.dataconfMemberType = dataconfMemberType;
                            objectStore.put(linkRecord);
                            util_1.default.debug("confAttendeeList", "update completed");
                        }
                        else {
                            util_1.default.debug("confAttendeeList", "update failed");
                        }
                        resolve(data);
                    };
                    request.onerror = function (event) {
                        data = { result: -1, reason: "execution failed" };
                        util_1.default.error("confAttendeeList", "An error occurred" + request.error);
                        reject(data);
                    };
                });
                return promise;
            };
            this.updateSharingSessionTb = function (participantId, sharingSession) {
                var data = { result: 0, reason: "execution succeed" };
                var transaction = _this.database.transaction([indexDBConfig_1.CloudEC_TABLEINFOCONFIG.TABLENAME], "readwrite");
                var objectStore = transaction.objectStore(indexDBConfig_1.CloudEC_TABLEINFOCONFIG.TABLENAME);
                var request = objectStore.get(participantId);
                var promise = new Promise(function (resolve, reject) {
                    request.onsuccess = function (event) {
                        var linkRecord = event.target.result;
                        if (linkRecord != null) {
                            linkRecord.sharingSession = sharingSession;
                            objectStore.put(linkRecord);
                            util_1.default.debug("confAttendeeList", "update completed");
                        }
                        else {
                            util_1.default.debug("confAttendeeList", "update failed");
                        }
                        resolve(data);
                    };
                    request.onerror = function (event) {
                        data = { result: -1, reason: "execution failed" };
                        util_1.default.error("confAttendeeList", "An error occurred" + request.error);
                        reject(data);
                    };
                });
                return promise;
            };
            this.clearAttendeeTb = function () {
                var promise = new Promise(function (resolve, reject) {
                    var data = { result: 0, reason: "execution succeed" };
                    var transaction = _this.database.transaction([indexDBConfig_1.CloudEC_TABLEINFOCONFIG.TABLENAME], "readwrite");
                    var objectStore = transaction.objectStore(indexDBConfig_1.CloudEC_TABLEINFOCONFIG.TABLENAME);
                    var request = objectStore.clear();
                    request.onsuccess = function (event) {
                        util_1.default.debug("confAttendeeList", "Participant clear successfully");
                    };
                    request.onerror = function (event) {
                        data = { result: -1, reason: "execution failed" };
                        util_1.default.error("confAttendeeList", "An error occurred" + request.error);
                    };
                    resolve(data);
                });
                return promise;
            };
            this.database = publicDB_1.default.getInstance().getDatabaseDB();
        }
        return ConfAttendeeList;
    }());
    exports.default = ConfAttendeeList;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 372 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(141)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, indexDBConfig_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DBNAME = 'publicDB';
    var VERSION = 2;
    var PublicDB = (function () {
        function PublicDB() {
            var _this = this;
            this.openPublicDB = function () {
                var promise = new Promise(function (resolve, reject) {
                    var request = window.indexedDB.open(DBNAME, VERSION);
                    request.onsuccess = function (event) {
                        _this.database = request.result;
                        console.info("Create the database successfully");
                    };
                    request.onerror = function (event) {
                        console.error("An error occurred" + request.error);
                    };
                    request.onupgradeneeded = function (event) {
                        _this.database = request.result;
                        var objectStore = _this.database.createObjectStore(indexDBConfig_1.CloudEC_TABLEINFOCONFIG.TABLENAME, indexDBConfig_1.CloudEC_TABLEINFOCONFIG.KEYPATH);
                        objectStore.createIndex("dataconfUserId", "dataconfUserId", { unique: false });
                        console.info("The first time to create a database or update the database");
                    };
                    resolve("execution succeed");
                });
                return promise;
            };
            this.closePublicDB = function () {
                _this.database.close();
                console.info("The database is closed");
            };
            this.deletePublicDB = function () {
                window.indexedDB.deleteDatabase(DBNAME);
                console.info("Delete the database successfully");
            };
            this.getDatabaseDB = function () {
                return _this.database;
            };
        }
        PublicDB.getInstance = function () {
            return PublicDB._instance;
        };
        PublicDB._instance = new PublicDB();
        return PublicDB;
    }());
    exports.default = PublicDB;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 373 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(374), __webpack_require__(39), __webpack_require__(14), __webpack_require__(1), __webpack_require__(1), __webpack_require__(11)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, tupIm_1, tupLoginWrapper_1, serverConfig_1, util_1, util, enum_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TupImWrapper = (function () {
        function TupImWrapper() {
            if (TupImWrapper._instance) {
                throw new Error("Error: Instantiation failed: Use TupImWrapper.getInstance() instead of new.");
            }
            TupImWrapper._instance = this;
        }
        TupImWrapper.prototype.build = function () {
            return __awaiter(this, void 0, void 0, function () {
                var flag;
                return __generator(this, function (_a) {
                    util_1.default.info("tupImWrapper", "step in tupImWrapper to build");
                    flag = false;
                    if (this.tupIm && this.tupIm.wsocket.readyState === 1) {
                        util_1.default.info("tupImWrapper", "websocket is connecting");
                        return [2, flag];
                    }
                    if (!this.tupIm) {
                        this.tupIm = new tupIm_1.default({
                            socket: tupLoginWrapper_1.default.tupUniSock
                        });
                        flag = true;
                    }
                    return [2, flag];
                });
            });
        };
        TupImWrapper.prototype.getPromise = function () {
            var p = {};
            p.promise = new Promise(function (resolve, reject) {
                p.resolve = resolve;
                p.reject = reject;
            });
            return p;
        };
        TupImWrapper.getInstance = function () {
            return TupImWrapper._instance;
        };
        TupImWrapper.prototype.init = function () {
            return __awaiter(this, void 0, void 0, function () {
                var callback, imLogParam, cloudEC_loginInfo, loginInfo, serverAddr, port, isBuildStgSuc, imAccessMode;
                return __generator(this, function (_a) {
                    callback = { response: {} };
                    imLogParam = {
                        "log_path": serverConfig_1.CloudEC_SERVERCONFIG.LOG_PATH,
                        "log_level": serverConfig_1.CloudEC_SERVERCONFIG.LOG_IM_LEVEL,
                        "max_size_kb": serverConfig_1.CloudEC_SERVERCONFIG.LOG_FILE_SIZE,
                        "file_count": serverConfig_1.CloudEC_SERVERCONFIG.LOG_FILE_COUNT,
                    };
                    cloudEC_loginInfo = sessionStorage.cloudEC_loginInfo;
                    loginInfo = JSON.parse(cloudEC_loginInfo);
                    serverAddr = loginInfo.eServerAddress;
                    port = loginInfo.eServerPort;
                    isBuildStgSuc = loginInfo.isBuildStgSuc;
                    imAccessMode = {
                        "mode": enum_1.IM_FIREWALL_MODE.IM_E_NET_ACCESS_MODE_NORMAL
                    };
                    this.tupIm.setLogParam(imLogParam, callback);
                    this.tupIm.init(callback);
                    if (isBuildStgSuc) {
                        imAccessMode = {
                            "mode": enum_1.IM_FIREWALL_MODE.IM_E_NET_ACCESS_MODE_STG
                        };
                    }
                    this.tupIm.setNetAccessMode(imAccessMode, callback);
                    this.tupIm.setServerAddress(serverAddr, port, callback);
                    return [2];
                });
            });
        };
        TupImWrapper.prototype.tupImBase64Decode = function () {
            return __awaiter(this, void 0, void 0, function () {
                var callback, cloudEC_loginInfo, loginInfo, token, promise;
                return __generator(this, function (_a) {
                    callback = { response: {} };
                    cloudEC_loginInfo = sessionStorage.cloudEC_loginInfo;
                    loginInfo = JSON.parse(cloudEC_loginInfo);
                    token = loginInfo.authToken;
                    promise = new Promise(function (resolve, reject) {
                        callback.response = function (data) {
                            resolve({ token: data.param.ack });
                        };
                    });
                    this.tupIm.tupImBase64Decode(token, token.length, callback);
                    token = "";
                    loginInfo.authToken = "";
                    cloudEC_loginInfo = {};
                    return [2, promise];
                });
            });
        };
        TupImWrapper.prototype.login = function () {
            return __awaiter(this, void 0, void 0, function () {
                var callback, cloudEC_loginInfo, loginInfo, account, version, loginType, imToken, promise, decodeResult, imLoginParam;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            callback = { response: {} };
                            cloudEC_loginInfo = sessionStorage.cloudEC_loginInfo;
                            loginInfo = JSON.parse(cloudEC_loginInfo);
                            account = loginInfo.userAccount;
                            version = serverConfig_1.CloudEC_SERVERCONFIG.IM_SERVER_VERSION;
                            loginType = 4;
                            imToken = "";
                            promise = new Promise(function (resolve, reject) {
                                callback.response = function (data) {
                                    if (data.result == 0) {
                                        util_1.default.info("tupImWrapper", "im login success");
                                        resolve({ result: true, info: data });
                                    }
                                    else {
                                        util_1.default.error("tupImWrapper", "im login failed");
                                        resolve({ result: false, info: data });
                                    }
                                };
                            });
                            return [4, this.tupImBase64Decode()];
                        case 1:
                            decodeResult = _a.sent();
                            imToken = decodeResult.token;
                            imLoginParam = {
                                "account": account,
                                "password": imToken,
                                "version": version,
                                "auth_type": loginType,
                                "language": "zh-cn",
                                "client_desc": "PC",
                                "ticket": imToken,
                                "token": imToken
                            };
                            this.tupIm.login(imLoginParam, callback);
                            imToken = "";
                            imLoginParam.password = "";
                            imLoginParam.ticket = "";
                            imLoginParam.token = "";
                            return [2, promise];
                    }
                });
            });
        };
        TupImWrapper.prototype.logout = function () {
            var logoutPromise = this.getPromise();
            var callbacks = {
                response: function (data) {
                    if (data.result == 0) {
                        util_1.default.debug("tupImWrapper", "logout is successful");
                        logoutPromise.resolve(data);
                    }
                    else {
                        util_1.default.error("tupImWrapper", "logout failed!");
                        logoutPromise.reject(data);
                    }
                }
            };
            var imAccessMode = {
                "mode": enum_1.IM_FIREWALL_MODE.IM_E_NET_ACCESS_MODE_NORMAL
            };
            this.tupIm.setNetAccessMode(imAccessMode, {});
            this.tupIm.logout(callbacks);
            return logoutPromise.promise;
        };
        TupImWrapper.prototype.getContactList = function (isSyncAll, timestamp, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var getContactListPromise, callbacks, param;
                return __generator(this, function (_a) {
                    getContactListPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result == 0) {
                                util_1.default.debug("tupImWrapper", "get contact list is successful");
                                getContactListPromise.resolve(data);
                            }
                            else {
                                util_1.default.error("tupImWrapper", "get contact list failed! result=" + data.result);
                                getContactListPromise.reject(data);
                            }
                        }
                    };
                    param = {
                        "is_sync_all": isSyncAll,
                        "time_stamp": timestamp
                    };
                    this.tupIm.getContactList(param, callbacks);
                    return [2, getContactListPromise.promise];
                });
            });
        };
        TupImWrapper.prototype.getUserInfo = function (account, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var getUserInfoPromise, callbacks, param;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            getUserInfoPromise = this.getPromise();
                            callbacks = {
                                response: function (data) {
                                    if (data.result == 0) {
                                        util_1.default.debug("tupImWrapper", "get user info is successful");
                                        getUserInfoPromise.resolve(data);
                                    }
                                    else {
                                        util_1.default.error("tupImWrapper", "get user info failed! result=" + data.result);
                                        getUserInfoPromise.reject(data);
                                    }
                                }
                            };
                            param = {
                                "account": account,
                                "staff_id": 1
                            };
                            return [4, this.tupIm.getUserInfo(param, callbacks)];
                        case 1:
                            _a.sent();
                            return [2, getUserInfoPromise.promise];
                    }
                });
            });
        };
        TupImWrapper.prototype.setUserInfo = function (userInfo, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var setUserInfoPromise, callbacks, param;
                return __generator(this, function (_a) {
                    setUserInfoPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result == 0) {
                                util_1.default.debug("tupImWrapper", "set user info is successful");
                                setUserInfoPromise.resolve(data);
                            }
                            else {
                                util_1.default.error("tupImWrapper", "set user info failed! result=" + data.result);
                                setUserInfoPromise.reject(data);
                            }
                        }
                    };
                    param = {
                        "staff_id": util.isUndefined(userInfo.staffID) ? 0 : userInfo.staffID,
                        "account": util.isUndefined(userInfo.account) ? "" : userInfo.account,
                        "staff_no": util.isUndefined(userInfo.staffNO) ? "" : userInfo.staffNO,
                        "name": util.isUndefined(userInfo.name) ? "" : userInfo.name,
                        "native_name": util.isUndefined(userInfo.nativeName) ? "" : userInfo.nativeName,
                        "q_pin_yin": util.isUndefined(userInfo.qPinYin) ? "" : userInfo.qPinYin,
                        "gender": util.isUndefined(userInfo.gender) ? 2 : userInfo.gender,
                        "birthday": util.isUndefined(userInfo.birthday) ? "" : userInfo.birthday,
                        "age": util.isUndefined(userInfo.age) ? "" : userInfo.age,
                        "bind_no": util.isUndefined(userInfo.bindNO) ? "" : userInfo.bindNO,
                        "mobile": util.isUndefined(userInfo.mobile) ? "" : userInfo.mobile,
                        "home_phone": util.isUndefined(userInfo.homePhone) ? "" : userInfo.homePhone,
                        "office_phone": util.isUndefined(userInfo.officePhone) ? "" : userInfo.officePhone,
                        "short_phone": util.isUndefined(userInfo.shortPhone) ? "" : userInfo.shortPhone,
                        "other_phone": util.isUndefined(userInfo.otherPhone) ? "" : userInfo.otherPhone,
                        "voip": util.isUndefined(userInfo.voip) ? "" : userInfo.voip,
                        "ip_phone": util.isUndefined(userInfo.ipPhone) ? "" : userInfo.ipPhone,
                        "fax": util.isUndefined(userInfo.fax) ? "" : userInfo.fax,
                        "email": util.isUndefined(userInfo.email) ? "" : userInfo.email,
                        "website": util.isUndefined(userInfo.webSite) ? "" : userInfo.webSite,
                        "signature": util.isUndefined(userInfo.signature) ? "" : userInfo.signature,
                        "desc": util.isUndefined(userInfo.desc) ? "" : userInfo.desc,
                        "address": util.isUndefined(userInfo.address) ? "" : userInfo.address,
                        "image_id": util.isUndefined(userInfo.imageID) ? "" : userInfo.imageID,
                        "postcode": util.isUndefined(userInfo.postalcode) ? "" : userInfo.postalcode,
                        "is_security": util.isUndefined(userInfo.isSecrecy) ? 0 : userInfo.isSecrecy,
                        "title": util.isUndefined(userInfo.title) ? "" : userInfo.title,
                        "dept_id": util.isUndefined(userInfo.deptID) ? "" : userInfo.deptID,
                        "dept_name_en": util.isUndefined(userInfo.deptNameEn) ? "" : userInfo.deptNameEn,
                        "dept_name_cn": util.isUndefined(userInfo.deptNameCn) ? "" : userInfo.deptNameCn,
                        "image_sync_time": util.isUndefined(userInfo.imageSyncTime) ? "" : userInfo.imageSyncTime,
                        "old_account": util.isUndefined(userInfo.oldAccount) ? "" : userInfo.oldAccount,
                        "state": util.isUndefined(userInfo.state) ? "0" : userInfo.state,
                        "modify_time": util.isUndefined(userInfo.modifyTime) ? "" : userInfo.modifyTime
                    };
                    this.tupIm.setUserInfo(param, callbacks);
                    return [2, setUserInfoPromise.promise];
                });
            });
        };
        TupImWrapper.prototype.addContactGroup = function (index, groupName, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var addContactGroupPromise, callbacks, param;
                return __generator(this, function (_a) {
                    addContactGroupPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result == 0) {
                                util_1.default.debug("tupImWrapper", "add contact group is successful");
                                addContactGroupPromise.resolve(data);
                            }
                            else {
                                util_1.default.error("tupImWrapper", "add contact group failed! result=" + data.result);
                                addContactGroupPromise.reject(data);
                            }
                        }
                    };
                    param = {
                        "name": groupName,
                        "index": index
                    };
                    this.tupIm.addUserGroup(param, callbacks);
                    return [2, addContactGroupPromise.promise];
                });
            });
        };
        TupImWrapper.prototype.modContactGroup = function (groupID, index, groupName, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var modContactGroupPromise, callbacks, param;
                return __generator(this, function (_a) {
                    modContactGroupPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result == 0) {
                                util_1.default.debug("tupImWrapper", "modify contact group is successful");
                                modContactGroupPromise.resolve(data);
                            }
                            else {
                                util_1.default.error("tupImWrapper", "modify contact group failed! result=" + data.result);
                                modContactGroupPromise.reject(data);
                            }
                        }
                    };
                    param = {
                        "id": groupID,
                        "name": groupName,
                        "index": index
                    };
                    this.tupIm.modUserGroup(param, callbacks);
                    return [2, modContactGroupPromise.promise];
                });
            });
        };
        TupImWrapper.prototype.delContactGroup = function (groupID, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var delContactGroupPromise, callbacks, param;
                return __generator(this, function (_a) {
                    delContactGroupPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result == 0) {
                                util_1.default.debug("tupImWrapper", "delete contact group is successful");
                                delContactGroupPromise.resolve(data);
                            }
                            else {
                                util_1.default.error("tupImWrapper", "delete contact group failed! result=" + data.result);
                                delContactGroupPromise.reject(data);
                            }
                        }
                    };
                    param = {
                        "id": groupID,
                    };
                    this.tupIm.delUserGroup(param, callbacks);
                    return [2, delContactGroupPromise.promise];
                });
            });
        };
        TupImWrapper.prototype.updateGroupListOrder = function (groupIDs, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var updateGroupListOrderPromise, callbacks, userGroupList, x, param;
                return __generator(this, function (_a) {
                    updateGroupListOrderPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result == 0) {
                                util_1.default.debug("tupImWrapper", "update contact group is Successful");
                                updateGroupListOrderPromise.resolve(data);
                            }
                            else {
                                util_1.default.error("tupImWrapper", "update contact group failed! result=" + data.result);
                                updateGroupListOrderPromise.reject(data);
                            }
                        }
                    };
                    userGroupList = new Array();
                    for (x in groupIDs) {
                        userGroupList.push({
                            "user_group": Number(groupIDs[x])
                        });
                    }
                    param = {
                        "user_group_list": userGroupList
                    };
                    this.tupIm.updateUsergroup(param, callbacks);
                    return [2, updateGroupListOrderPromise.promise];
                });
            });
        };
        TupImWrapper.prototype.moveContact = function (contactID, oldGroupID, newGroupID, type, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var moveContactrPromise, callbacks, param;
                return __generator(this, function (_a) {
                    moveContactrPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result == 0) {
                                util_1.default.debug("tupImWrapper", "move contact is Successful");
                                moveContactrPromise.resolve(data);
                            }
                            else {
                                util_1.default.error("tupImWrapper", "move contact failed! result=" + data.result);
                                moveContactrPromise.reject(data);
                            }
                        }
                    };
                    param = {
                        "contact_id": Number(contactID),
                        "old_group_id": Number(oldGroupID),
                        "new_group_id": Number(newGroupID),
                        "type": type
                    };
                    this.tupIm.moveContactGroup(param, callbacks);
                    return [2, moveContactrPromise.promise];
                });
            });
        };
        TupImWrapper.prototype.addContact = function (contact, groupID, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var addContactPromise, callbacks, param;
                return __generator(this, function (_a) {
                    addContactPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result == 0) {
                                util_1.default.debug("tupImWrapper", "add contact is Successful");
                                addContactPromise.resolve(data);
                            }
                            else {
                                util_1.default.error("tupImWrapper", "add contact failed! result=" + data.result);
                                addContactPromise.reject(data);
                            }
                        }
                    };
                    param = {
                        "id": util.isUndefined(contact.id) ? 99 : Number(contact.id),
                        "staff_id": util.isUndefined(contact.staffID) ? 0 : Number(contact.staffID),
                        "name": contact.name,
                        "nick_name": util.isUndefined(contact.nickName) ? "" : contact.nickName,
                        "foreign_name": util.isUndefined(contact.foreignName) ? "" : contact.foreignName,
                        "birthday": util.isUndefined(contact.birthday) ? "" : contact.birthday,
                        "gender": util.isUndefined(contact.gender) ? 0 : Number(contact.gender),
                        "corp_name": util.isUndefined(contact.corpName) ? "" : contact.corpName,
                        "dept_name": util.isUndefined(contact.deptName) ? "" : contact.deptName,
                        "title": util.isUndefined(contact.title) ? "" : contact.title,
                        "mobile": contact.mobile,
                        "office_phone": util.isUndefined(contact.officePhone) ? "" : contact.officePhone,
                        "home_phone": util.isUndefined(contact.homePhone) ? "" : contact.homePhone,
                        "other_phone": util.isUndefined(contact.otherPhone) ? "" : contact.otherPhone,
                        "fax": util.isUndefined(contact.fax) ? "" : contact.fax,
                        "email": util.isUndefined(contact.email) ? "" : contact.email,
                        "website": util.isUndefined(contact.webSite) ? "" : contact.webSite,
                        "im_no": util.isUndefined(contact.imNO) ? "" : contact.imNO,
                        "address": util.isUndefined(contact.address) ? "" : contact.address,
                        "desc": util.isUndefined(contact.desc) ? "" : contact.desc,
                        "postcode": util.isUndefined(contact.postalcode) ? "" : contact.postalcode,
                        "state": util.isUndefined(contact.state) ? 0 : Number(contact.state),
                        "group_id": Number(groupID)
                    };
                    this.tupIm.addContact(param, callbacks);
                    return [2, addContactPromise.promise];
                });
            });
        };
        TupImWrapper.prototype.modContact = function (contact, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var modContactPromise, callbacks, param;
                return __generator(this, function (_a) {
                    modContactPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result == 0) {
                                util_1.default.debug("tupImWrapper", "modify contact is Successful");
                                modContactPromise.resolve(data);
                            }
                            else {
                                util_1.default.error("tupImWrapper", "modify contact failed! result=" + data.result);
                                modContactPromise.reject(data);
                            }
                        }
                    };
                    param = {
                        "id": Number(contact.id),
                        "staff_id": util.isUndefined(contact.staffID) ? 0 : Number(contact.staffID),
                        "name": contact.name,
                        "nick_name": util.isUndefined(contact.nickName) ? "" : contact.nickName,
                        "foreign_name": util.isUndefined(contact.foreignName) ? "" : contact.foreignName,
                        "birthday": util.isUndefined(contact.birthday) ? "" : contact.birthday,
                        "gender": util.isUndefined(contact.gender) ? 0 : Number(contact.gender),
                        "corp_name": util.isUndefined(contact.corpName) ? "" : contact.corpName,
                        "dept_name": util.isUndefined(contact.deptName) ? "" : contact.deptName,
                        "title": util.isUndefined(contact.title) ? "" : contact.title,
                        "mobile": contact.mobile,
                        "office_phone": util.isUndefined(contact.officePhone) ? "" : contact.officePhone,
                        "home_phone": util.isUndefined(contact.homePhone) ? "" : contact.homePhone,
                        "other_phone": util.isUndefined(contact.otherPhone) ? "" : contact.otherPhone,
                        "fax": util.isUndefined(contact.fax) ? "" : contact.fax,
                        "email": util.isUndefined(contact.email) ? "" : contact.email,
                        "website": util.isUndefined(contact.webSite) ? "" : contact.webSite,
                        "im_no": util.isUndefined(contact.imNO) ? "" : contact.imNO,
                        "address": util.isUndefined(contact.address) ? "" : contact.address,
                        "desc": util.isUndefined(contact.desc) ? "" : contact.desc,
                        "postcode": util.isUndefined(contact.postalcode) ? "" : contact.postalcode,
                        "state": util.isUndefined(contact.state) ? 0 : Number(contact.state),
                    };
                    this.tupIm.modContact(param, callbacks);
                    return [2, modContactPromise.promise];
                });
            });
        };
        TupImWrapper.prototype.delContact = function (contactID, groupID, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var delContactPromise, callbacks, param;
                return __generator(this, function (_a) {
                    delContactPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result == 0) {
                                util_1.default.debug("tupImWrapper", "delete contact is Successful");
                                delContactPromise.resolve(data);
                            }
                            else {
                                util_1.default.error("tupImWrapper", "delete contact failed! result=" + data.result);
                                delContactPromise.reject(data);
                            }
                        }
                    };
                    param = {
                        "contact_id": Number(contactID),
                        "group_id": Number(groupID)
                    };
                    this.tupIm.delFriendOrContact(param, callbacks);
                    return [2, delContactPromise.promise];
                });
            });
        };
        TupImWrapper.prototype.addFriend = function (account, groupID, displayName, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var addFriendPromise, callbacks, param;
                return __generator(this, function (_a) {
                    addFriendPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result == 0) {
                                util_1.default.debug("tupImWrapper", "add friend is Successful");
                                addFriendPromise.resolve(data);
                            }
                            else {
                                util_1.default.error("tupImWrapper", "add friend failed! result=" + data.result);
                                addFriendPromise.reject(data);
                            }
                        }
                    };
                    param = {
                        "account": account,
                        "group_id": Number(groupID),
                        "display_name": displayName
                    };
                    this.tupIm.addFriend(param, callbacks);
                    return [2, addFriendPromise.promise];
                });
            });
        };
        TupImWrapper.prototype.addFixedGroup = function (groupInfo, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var addFixedGroupPromise, callbacks, param;
                return __generator(this, function (_a) {
                    addFixedGroupPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result == 0) {
                                util_1.default.debug("tupImWrapper", "add fixed group is successful");
                                addFixedGroupPromise.resolve(data);
                            }
                            else {
                                util_1.default.error("tupImWrapper", "add fixed group failed! result=" + data.result);
                                addFixedGroupPromise.reject(data);
                            }
                        }
                    };
                    param = {
                        "id": "",
                        "name": groupInfo.name,
                        "capacity": util.isUndefined(groupInfo.capacity) ? 200 : groupInfo.capacity,
                        "manifesto": util.isUndefined(groupInfo.manifesto) ? "" : groupInfo.manifesto,
                        "desc": util.isUndefined(groupInfo.desc) ? "" : groupInfo.desc,
                        "owner": "owner",
                        "auto_join_flag": util.isUndefined(groupInfo.jointFlag) ? 1 : groupInfo.jointFlag,
                        "msg_policy_type": util.isUndefined(groupInfo.msgPolicyType) ? 1 : groupInfo.msgPolicyType,
                        "group_type": 0,
                        "fix_discuss": 0,
                        "state": "0"
                    };
                    this.tupIm.addFixedGroup(param, callbacks);
                    return [2, addFixedGroupPromise.promise];
                });
            });
        };
        TupImWrapper.prototype.addDiscussionGroup = function (groupInfo, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var addDiscussionGroupPromise, callbacks, param;
                return __generator(this, function (_a) {
                    addDiscussionGroupPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result == 0) {
                                util_1.default.debug("tupImWrapper", "add discussion group is successful");
                                addDiscussionGroupPromise.resolve(data);
                            }
                            else {
                                util_1.default.error("tupImWrapper", "add discussion group failed! result=" + data.result);
                                addDiscussionGroupPromise.reject(data);
                            }
                        }
                    };
                    param = {
                        "id": "",
                        "name": groupInfo.name,
                        "capacity": util.isUndefined(groupInfo.capacity) ? 200 : groupInfo.capacity,
                        "manifesto": util.isUndefined(groupInfo.manifesto) ? "" : groupInfo.manifesto,
                        "desc": util.isUndefined(groupInfo.desc) ? "" : groupInfo.desc,
                        "owner": "owner",
                        "auto_join_flag": 0,
                        "msg_policy_type": util.isUndefined(groupInfo.msgPolicyType) ? 1 : groupInfo.msgPolicyType,
                        "group_type": 1,
                        "fix_discuss": 0,
                        "state": "0"
                    };
                    this.tupIm.addDiscussionGroup(param, callbacks);
                    return [2, addDiscussionGroupPromise.promise];
                });
            });
        };
        TupImWrapper.prototype.modFixedGroup = function (groupInfo, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var modFixedGroupPromise, callbacks, param;
                return __generator(this, function (_a) {
                    modFixedGroupPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result == 0) {
                                util_1.default.debug("tupImWrapper", "mod fixed group is successful");
                                modFixedGroupPromise.resolve(data);
                            }
                            else {
                                util_1.default.error("tupImWrapper", "mod fixed group failed! result=" + data.result);
                                modFixedGroupPromise.reject(data);
                            }
                        }
                    };
                    param = {
                        "id": groupInfo.id,
                        "name": groupInfo.name,
                        "capacity": util.isUndefined(groupInfo.capacity) ? 200 : groupInfo.capacity,
                        "manifesto": util.isUndefined(groupInfo.manifesto) ? "" : groupInfo.manifesto,
                        "desc": util.isUndefined(groupInfo.desc) ? "" : groupInfo.desc,
                        "owner": groupInfo.owner,
                        "auto_join_flag": util.isUndefined(groupInfo.jointFlag) ? 1 : groupInfo.jointFlag,
                        "msg_policy_type": util.isUndefined(groupInfo.msgPolicyType) ? 1 : groupInfo.msgPolicyType,
                        "group_type": 0,
                        "fix_discuss": util.isUndefined(groupInfo.fixDiscuss) ? 0 : groupInfo.fixDiscuss,
                        "state": util.isUndefined(groupInfo.state) ? "0" : groupInfo.state
                    };
                    this.tupIm.modFixedGroup(param, callbacks);
                    return [2, modFixedGroupPromise.promise];
                });
            });
        };
        TupImWrapper.prototype.modDiscussionGroup = function (groupInfo, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var modDiscussionGroupPromise, callbacks, param;
                return __generator(this, function (_a) {
                    modDiscussionGroupPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result == 0) {
                                util_1.default.debug("tupImWrapper", "mod discussion group is successful");
                                modDiscussionGroupPromise.resolve(data);
                            }
                            else {
                                util_1.default.error("tupImWrapper", "mod discussion group failed! result=" + data.result);
                                modDiscussionGroupPromise.reject(data);
                            }
                        }
                    };
                    param = {
                        "id": groupInfo.id,
                        "name": groupInfo.name,
                        "capacity": util.isUndefined(groupInfo.capacity) ? 200 : groupInfo.capacity,
                        "manifesto": util.isUndefined(groupInfo.manifesto) ? "" : groupInfo.manifesto,
                        "desc": util.isUndefined(groupInfo.desc) ? "" : groupInfo.desc,
                        "owner": groupInfo.owner,
                        "auto_join_flag": util.isUndefined(groupInfo.jointFlag) ? 0 : groupInfo.jointFlag,
                        "msg_policy_type": util.isUndefined(groupInfo.msgPolicyType) ? 1 : groupInfo.msgPolicyType,
                        "group_type": 1,
                        "fix_discuss": util.isUndefined(groupInfo.fixDiscuss) ? 0 : groupInfo.fixDiscuss,
                        "state": util.isUndefined(groupInfo.state) ? "0" : groupInfo.state
                    };
                    this.tupIm.modDiscussionGroup(param, callbacks);
                    return [2, modDiscussionGroupPromise.promise];
                });
            });
        };
        TupImWrapper.prototype.delFixedGroup = function (groupId, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var delFixedGroupPromise, callbacks;
                return __generator(this, function (_a) {
                    delFixedGroupPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result == 0) {
                                util_1.default.debug("tupImWrapper", "delete fixed group is successful");
                                delFixedGroupPromise.resolve(data);
                            }
                            else {
                                util_1.default.error("tupImWrapper", "delete fixed group failed! result=" + data.result);
                                delFixedGroupPromise.reject(data);
                            }
                        }
                    };
                    this.tupIm.delFixedGroup(groupId, callbacks);
                    return [2, delFixedGroupPromise.promise];
                });
            });
        };
        TupImWrapper.prototype.delDiscussionGroup = function (groupId, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var delDiscussionGroupPromise, callbacks;
                return __generator(this, function (_a) {
                    delDiscussionGroupPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result == 0) {
                                util_1.default.debug("tupImWrapper", "delete discussion group is successful");
                                delDiscussionGroupPromise.resolve(data);
                            }
                            else {
                                util_1.default.error("tupImWrapper", "delete discussion group failed! result=" + data.result);
                                delDiscussionGroupPromise.reject(data);
                            }
                        }
                    };
                    this.tupIm.delDiscussionGroup(groupId, callbacks);
                    return [2, delDiscussionGroupPromise.promise];
                });
            });
        };
        TupImWrapper.prototype.searchGroup = function (searchGroupParam, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var searchGroupPromise, callbacks, param;
                return __generator(this, function (_a) {
                    searchGroupPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result == 0) {
                                util_1.default.debug("tupImWrapper", "search fixed group is successful");
                                searchGroupPromise.resolve(data);
                            }
                            else {
                                util_1.default.error("tupImWrapper", "search fixed group failed! result=" + data.result);
                                searchGroupPromise.reject(data);
                            }
                        }
                    };
                    param = {
                        "is_need_amount": searchGroupParam.isNeedAmount ? 1 : 0,
                        "offset": util.isUndefined(searchGroupParam.offset) ? 0 : searchGroupParam.offset,
                        "count": searchGroupParam.count,
                        "query_key": searchGroupParam.condition,
                        "query_type": searchGroupParam.queryType
                    };
                    this.tupIm.getFixedGroups(param, callbacks);
                    return [2, searchGroupPromise.promise];
                });
            });
        };
        TupImWrapper.prototype.getGroupDetail = function (groupId, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var getGroupDetailPromise, callbacks, param;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            getGroupDetailPromise = this.getPromise();
                            callbacks = {
                                response: function (data) {
                                    if (data.result == 0) {
                                        util_1.default.debug("tupImWrapper", "get group detail is successful");
                                        getGroupDetailPromise.resolve(data);
                                    }
                                    else {
                                        util_1.default.error("tupImWrapper", "get group detail failed! result=" + data.result);
                                        getGroupDetailPromise.reject(data);
                                    }
                                }
                            };
                            param = {
                                "group_id": groupId
                            };
                            return [4, this.tupIm.getFixedGroupDetail(param, callbacks)];
                        case 1:
                            _a.sent();
                            return [2, getGroupDetailPromise.promise];
                    }
                });
            });
        };
        TupImWrapper.prototype.addFixedGroupMember = function (groupId, account, groupName, displayName, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var addFixedGroupMemberPromise, callbacks, param;
                return __generator(this, function (_a) {
                    addFixedGroupMemberPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result == 0) {
                                util_1.default.debug("tupImWrapper", "add fixed group member successfully!");
                                addFixedGroupMemberPromise.resolve(data);
                            }
                            else {
                                util_1.default.error("tupImWrapper", "add fixed group member failed! result=" + data.result);
                                addFixedGroupMemberPromise.reject(data);
                            }
                        }
                    };
                    param = {
                        "group_id": groupId,
                        "account": account,
                        "group_name": groupName,
                        "display_name": util.isUndefined(displayName) ? "" : displayName,
                    };
                    this.tupIm.addFixedGroupMember(param, callbacks);
                    return [2, addFixedGroupMemberPromise.promise];
                });
            });
        };
        TupImWrapper.prototype.joinFixedGroup = function (groupId, groupName, displayName, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var joinFixedGroupPromise, callbacks, param;
                return __generator(this, function (_a) {
                    joinFixedGroupPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result == 0) {
                                util_1.default.debug("tupImWrapper", "join fixed group successfully!");
                                joinFixedGroupPromise.resolve(data);
                            }
                            else {
                                util_1.default.error("tupImWrapper", "join fixed group failed! result=" + data.result);
                                joinFixedGroupPromise.reject(data);
                            }
                        }
                    };
                    param = {
                        "group_id": groupId,
                        "group_name": groupName,
                        "display_name": util.isUndefined(displayName) ? "" : displayName,
                    };
                    this.tupIm.joinFixedGroup(param, callbacks);
                    return [2, joinFixedGroupPromise.promise];
                });
            });
        };
        TupImWrapper.prototype.addDiscussionGroupMember = function (groupId, account, groupName, displayName, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var addDiscussionGroupMemberPromise, callbacks, param;
                return __generator(this, function (_a) {
                    addDiscussionGroupMemberPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result == 0) {
                                util_1.default.debug("tupImWrapper", "add discussion group member successfully!");
                                addDiscussionGroupMemberPromise.resolve(data);
                            }
                            else {
                                util_1.default.error("tupImWrapper", "add discussion group member failed! result=" + data.result);
                                addDiscussionGroupMemberPromise.reject(data);
                            }
                        }
                    };
                    param = {
                        "group_id": groupId,
                        "account": account,
                        "group_name": groupName,
                        "display_name": util.isUndefined(displayName) ? "" : displayName,
                    };
                    this.tupIm.addDiscussionGroupMember(param, callbacks);
                    return [2, addDiscussionGroupMemberPromise.promise];
                });
            });
        };
        TupImWrapper.prototype.delFixedGroupMember = function (groupId, account, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var delFixedGroupMemberPromise, callbacks, param;
                return __generator(this, function (_a) {
                    delFixedGroupMemberPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result == 0) {
                                util_1.default.debug("tupImWrapper", "del fixed group member successfully!");
                                delFixedGroupMemberPromise.resolve(data);
                            }
                            else {
                                util_1.default.error("tupImWrapper", "del fixed group member failed! result=" + data.result);
                                delFixedGroupMemberPromise.reject(data);
                            }
                        }
                    };
                    param = {
                        "group_id": groupId,
                        "account": account
                    };
                    this.tupIm.delFixedGroupMember(param, callbacks);
                    return [2, delFixedGroupMemberPromise.promise];
                });
            });
        };
        TupImWrapper.prototype.leaveFixedGroup = function (groupId, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var leaveFixedGroupPromise, callbacks;
                return __generator(this, function (_a) {
                    leaveFixedGroupPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result == 0) {
                                util_1.default.debug("tupImWrapper", "leave fixed group successfully!");
                                leaveFixedGroupPromise.resolve(data);
                            }
                            else {
                                util_1.default.error("tupImWrapper", "leave fixed group failed! result=" + data.result);
                                leaveFixedGroupPromise.reject(data);
                            }
                        }
                    };
                    this.tupIm.leaveFixedGroup(groupId, callbacks);
                    return [2, leaveFixedGroupPromise.promise];
                });
            });
        };
        TupImWrapper.prototype.delDiscussionGroupMember = function (groupId, account, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var delDiscussionGroupMemberPromise, callbacks, param;
                return __generator(this, function (_a) {
                    delDiscussionGroupMemberPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result == 0) {
                                util_1.default.debug("tupImWrapper", "del discussion group member successfully!");
                                delDiscussionGroupMemberPromise.resolve(data);
                            }
                            else {
                                util_1.default.error("tupImWrapper", "del discussion group member failed! result=" + data.result);
                                delDiscussionGroupMemberPromise.reject(data);
                            }
                        }
                    };
                    param = {
                        "group_id": groupId,
                        "account": account
                    };
                    this.tupIm.delDiscussionGroupMember(param, callbacks);
                    return [2, delDiscussionGroupMemberPromise.promise];
                });
            });
        };
        TupImWrapper.prototype.leaveDiscussionGroup = function (groupId, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var leaveDiscussionGroupPromise, callbacks;
                return __generator(this, function (_a) {
                    leaveDiscussionGroupPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result == 0) {
                                util_1.default.debug("tupImWrapper", "leave discussion group successfully!");
                                leaveDiscussionGroupPromise.resolve(data);
                            }
                            else {
                                util_1.default.error("tupImWrapper", "leave discussion group failed! result=" + data.result);
                                leaveDiscussionGroupPromise.reject(data);
                            }
                        }
                    };
                    this.tupIm.leaveDiscussionGroup(groupId, callbacks);
                    return [2, leaveDiscussionGroupPromise.promise];
                });
            });
        };
        TupImWrapper.prototype.confirmFixedGroupInvite = function (approvalGroupParam, groupName, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var confirmFixedGroupInvitePromise, callbacks, param;
                return __generator(this, function (_a) {
                    confirmFixedGroupInvitePromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result == 0) {
                                util_1.default.debug("tupImWrapper", "confirm fixed group invite successfully!");
                                confirmFixedGroupInvitePromise.resolve(data);
                            }
                            else {
                                util_1.default.error("tupImWrapper", "confirm fixed group invite failed! result=" + data.result);
                                confirmFixedGroupInvitePromise.reject(data);
                            }
                        }
                    };
                    param = {
                        "agree_join": approvalGroupParam.agreeJoin ? 1 : 0,
                        "group_id": approvalGroupParam.groupId,
                        "group_name": groupName,
                        "member_account": approvalGroupParam.memberAccount,
                        "display_name": util.isUndefined(approvalGroupParam.diaplayName) ? "" : approvalGroupParam.diaplayName
                    };
                    this.tupIm.confirmFixedGroupInvite(param, callbacks);
                    return [2, confirmFixedGroupInvitePromise.promise];
                });
            });
        };
        TupImWrapper.prototype.confirmFixedGroupApply = function (approvalGroupParam, groupName, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var confirmFixedGroupApplyPromise, callbacks, param;
                return __generator(this, function (_a) {
                    confirmFixedGroupApplyPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result == 0) {
                                util_1.default.debug("tupImWrapper", "confirm fixed group apply successfully!");
                                confirmFixedGroupApplyPromise.resolve(data);
                            }
                            else {
                                util_1.default.error("tupImWrapper", "confirm fixed group apply failed! result=" + data.result);
                                confirmFixedGroupApplyPromise.reject(data);
                            }
                        }
                    };
                    param = {
                        "agree_join": approvalGroupParam.agreeJoin ? 1 : 0,
                        "group_id": approvalGroupParam.groupId,
                        "group_name": groupName,
                        "member_account": approvalGroupParam.memberAccount,
                        "display_name": util.isUndefined(approvalGroupParam.diaplayName) ? "" : approvalGroupParam.diaplayName
                    };
                    this.tupIm.confirmFixedGroupApply(param, callbacks);
                    return [2, confirmFixedGroupApplyPromise.promise];
                });
            });
        };
        TupImWrapper.prototype.getGroupMembers = function (groupId, isSyncAll, timestamp, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var getGroupMembersPromise, callbacks, param;
                return __generator(this, function (_a) {
                    getGroupMembersPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result == 0) {
                                util_1.default.debug("tupImWrapper", "get group member successfully!");
                                getGroupMembersPromise.resolve(data);
                            }
                            else {
                                util_1.default.error("tupImWrapper", "get group member failed! result=" + data.result);
                                getGroupMembersPromise.reject(data);
                            }
                        }
                    };
                    param = {
                        "is_sync_all": isSyncAll,
                        "group_id": groupId,
                        "time_stamp": timestamp
                    };
                    this.tupIm.getFixedGroupMembers(param, callbacks);
                    return [2, getGroupMembersPromise.promise];
                });
            });
        };
        TupImWrapper.prototype.setGroupMsgPromptPolicy = function (groupId, msgpolicyType, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var setGroupMsgPromptPolicyPromise, callbacks, param;
                return __generator(this, function (_a) {
                    setGroupMsgPromptPolicyPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result == 0) {
                                util_1.default.debug("tupImWrapper", "set group msg prompt policy successfully!");
                                setGroupMsgPromptPolicyPromise.resolve(data);
                            }
                            else {
                                util_1.default.error("tupImWrapper", "set group msg prompt policy failed! result=" + data.result);
                                setGroupMsgPromptPolicyPromise.reject(data);
                            }
                        }
                    };
                    param = {
                        "group_id": groupId,
                        "msg_policy_type": msgpolicyType
                    };
                    this.tupIm.setGroupMsgPolicy(param, callbacks);
                    return [2, setGroupMsgPromptPolicyPromise.promise];
                });
            });
        };
        TupImWrapper.prototype.setDisgroupPolicy = function (groupId, opType, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var setDisgroupPolicyPromise, callbacks, param;
                return __generator(this, function (_a) {
                    setDisgroupPolicyPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result == 0) {
                                util_1.default.debug("tupImWrapper", "set discussion group policy successfully!");
                                setDisgroupPolicyPromise.resolve(data);
                            }
                            else {
                                util_1.default.error("tupImWrapper", "set discussion group policy failed! result=" + data.result);
                                setDisgroupPolicyPromise.reject(data);
                            }
                        }
                    };
                    param = {
                        "group_id": groupId,
                        "policy": opType
                    };
                    this.tupIm.setDisgroupPolicy(param, callbacks);
                    return [2, setDisgroupPolicyPromise.promise];
                });
            });
        };
        TupImWrapper.prototype.modifyGroupType = function (groupId, opType, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var modifyGroupTypePromise, callbacks, param;
                return __generator(this, function (_a) {
                    modifyGroupTypePromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result == 0) {
                                util_1.default.debug("tupImWrapper", "modify group type successfully!");
                                modifyGroupTypePromise.resolve(data);
                            }
                            else {
                                util_1.default.error("tupImWrapper", "modify group type failed! result=" + data.result);
                                modifyGroupTypePromise.reject(data);
                            }
                        }
                    };
                    param = {
                        "id": groupId,
                        "group_type": opType
                    };
                    this.tupIm.modifyGroupType(param, callbacks);
                    return [2, modifyGroupTypePromise.promise];
                });
            });
        };
        TupImWrapper.prototype.transferGroup = function (groupId, account, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var transferGroupPromise, callbacks, param;
                return __generator(this, function (_a) {
                    transferGroupPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result == 0) {
                                util_1.default.debug("tupImWrapper", "transfer group successfully!");
                                transferGroupPromise.resolve(data);
                            }
                            else {
                                util_1.default.error("tupImWrapper", "transfer group failed! result=" + data.result);
                                transferGroupPromise.reject(data);
                            }
                        }
                    };
                    param = {
                        "group_id": groupId,
                        "account": account
                    };
                    this.tupIm.transferFixedGroup(param, callbacks);
                    return [2, transferGroupPromise.promise];
                });
            });
        };
        TupImWrapper.prototype.publishStatus = function (staus, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var publishStatusPromise, callbacks, param;
                return __generator(this, function (_a) {
                    publishStatusPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result == 0) {
                                util_1.default.debug("tupImWrapper", "Set personal status successfully!");
                                publishStatusPromise.resolve(data);
                            }
                            else {
                                util_1.default.error("tupImWrapper", "Setting personal status failed! result=" + data.result);
                                publishStatusPromise.reject(data);
                            }
                        }
                    };
                    param = {
                        "status": staus,
                        "desc": ""
                    };
                    this.tupIm.publishStatus(param, callbacks);
                    return [2, publishStatusPromise.promise];
                });
            });
        };
        TupImWrapper.prototype.detectUserStatus = function (accounts, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var detectUserStatusPromise, callbacks, accountList, i, param;
                return __generator(this, function (_a) {
                    detectUserStatusPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result == 0) {
                                util_1.default.debug("tupImWrapper", "Detecting user status successfully!");
                                detectUserStatusPromise.resolve(data);
                            }
                            else {
                                util_1.default.error("tupImWrapper", "Failed to detect user status! result=" + data.result);
                                detectUserStatusPromise.reject(data);
                            }
                        }
                    };
                    accountList = new Array();
                    for (i = 0; i < accounts.length; i++) {
                        accountList[i] = { "account": accounts[i] };
                    }
                    param = {
                        "account_list": accountList
                    };
                    this.tupIm.detectUserStatus(param, callbacks);
                    return [2, detectUserStatusPromise.promise];
                });
            });
        };
        TupImWrapper.prototype.sendIMMessage = function (messageSendParam, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var sendIMMessagePromise, callbacks, cloudEC_loginInfo, loginInfo, account, target, groupid, atUserInfoList, index, element, param;
                return __generator(this, function (_a) {
                    sendIMMessagePromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result == 0) {
                                util_1.default.debug("tupImWrapper", "Sending a message successfully!");
                                sendIMMessagePromise.resolve(data);
                            }
                            else {
                                util_1.default.error("tupImWrapper", "Sending message failed! result=" + data.result);
                                sendIMMessagePromise.reject(data);
                            }
                        }
                    };
                    cloudEC_loginInfo = sessionStorage.cloudEC_loginInfo;
                    loginInfo = JSON.parse(cloudEC_loginInfo);
                    account = loginInfo.userAccount;
                    target = "";
                    groupid = "";
                    if (messageSendParam.chatType == 0) {
                        target = messageSendParam.receiver;
                    }
                    else if (messageSendParam.chatType == 2 || messageSendParam.chatType == 6) {
                        groupid = messageSendParam.receiver;
                    }
                    else {
                    }
                    atUserInfoList = new Array();
                    for (index = 0; index < messageSendParam.atUserInfoList.length; index++) {
                        element = messageSendParam.atUserInfoList[index];
                        atUserInfoList[index] = { "account": element };
                    }
                    param = {
                        "region_id": 1,
                        "chat_type": messageSendParam.chatType,
                        "source_flag": 0,
                        "content_type": 1,
                        "origin": account,
                        "target": target,
                        "group_id": groupid,
                        "content": messageSendParam.content,
                        "display_name": messageSendParam.displayName ? messageSendParam.displayName : "",
                        "utc_stamp": messageSendParam.utcStamp ? messageSendParam.utcStamp : 1,
                        "client_chat_id": messageSendParam.clientChatID,
                        "media_type": messageSendParam.mediaType,
                        "at_user_list": atUserInfoList
                    };
                    this.tupIm.sendIm(param, callbacks);
                    return [2, sendIMMessagePromise.promise];
                });
            });
        };
        TupImWrapper.prototype.notifyImInputting = function (account, type) {
            return __awaiter(this, void 0, void 0, function () {
                var notifyImInputtingPromise, callbacks, param;
                return __generator(this, function (_a) {
                    notifyImInputtingPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result == 0) {
                                util_1.default.debug("tupImWrapper", "Send input status information successfully!");
                                notifyImInputtingPromise.resolve(data);
                            }
                            else {
                                util_1.default.error("tupImWrapper", "Send input status information failure! result=" + data.result);
                                notifyImInputtingPromise.reject(data);
                            }
                        }
                    };
                    param = {
                        "account": account,
                        "type": type
                    };
                    this.tupIm.notifyImInputting(param, callbacks);
                    return [2, notifyImInputtingPromise.promise];
                });
            });
        };
        TupImWrapper.prototype.withDrawMessage = function (messageWithDrawParam, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var withDrawMessagePromise, callbacks, cloudEC_loginInfo, loginInfo, account, target, groupid, msgidList, param;
                return __generator(this, function (_a) {
                    withDrawMessagePromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result == 0) {
                                util_1.default.debug("tupImWrapper", "Withdraw message successfully!");
                                withDrawMessagePromise.resolve(data);
                            }
                            else {
                                util_1.default.error("tupImWrapper", "Withdraw message failure! result=" + data.result);
                                withDrawMessagePromise.reject(data);
                            }
                        }
                    };
                    cloudEC_loginInfo = sessionStorage.cloudEC_loginInfo;
                    loginInfo = JSON.parse(cloudEC_loginInfo);
                    account = loginInfo.userAccount;
                    target = "";
                    groupid = "";
                    if (messageWithDrawParam.isGroupMsg == 1) {
                        target = messageWithDrawParam.receiver;
                    }
                    else if (messageWithDrawParam.isGroupMsg == 2) {
                        groupid = messageWithDrawParam.receiver;
                    }
                    else {
                    }
                    msgidList = new Array();
                    msgidList[0] = { "str_msgid": messageWithDrawParam.msgId };
                    param = {
                        "origin": account,
                        "origin_name": messageWithDrawParam.originName ? messageWithDrawParam.originName : account,
                        "group_name": messageWithDrawParam.groupName ? messageWithDrawParam.groupName : messageWithDrawParam.receiver,
                        "target": messageWithDrawParam.receiver,
                        "msg_type": messageWithDrawParam.isGroupMsg,
                        "is_lastmsg": 1,
                        "message_list": msgidList
                    };
                    this.tupIm.withdrawIm(param, callbacks);
                    return [2, withDrawMessagePromise.promise];
                });
            });
        };
        TupImWrapper.prototype.setReadMessage = function (messageReadList, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var setReadMessagePromise, callbacks, messageList, index, element, message, param;
                return __generator(this, function (_a) {
                    setReadMessagePromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result == 0) {
                                util_1.default.debug("tupImWrapper", "Set the message to be read successfully!");
                                setReadMessagePromise.resolve(data);
                            }
                            else {
                                util_1.default.error("tupImWrapper", "Set message failed to read! result=" + data.result);
                                setReadMessagePromise.reject(data);
                            }
                        }
                    };
                    messageList = new Array();
                    for (index = 0; index < messageReadList.length; index++) {
                        element = messageReadList[index];
                        message = {
                            "msg_type": messageReadList[index].msgType,
                            "sender": messageReadList[index].sender,
                            "str_msgid": messageReadList[index].msgId
                        };
                        messageList.push(message);
                    }
                    param = {
                        "message_list": messageList
                    };
                    this.tupIm.setMessageRead(param, callbacks);
                    return [2, setReadMessagePromise.promise];
                });
            });
        };
        TupImWrapper.prototype.getRecentConversation = function (timestamp, count, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var getRecentConversationPromise, callbacks, param;
                return __generator(this, function (_a) {
                    getRecentConversationPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result == 0) {
                                util_1.default.debug("tupImWrapper", "get the recent conversation successfully!");
                                getRecentConversationPromise.resolve(data);
                            }
                            else {
                                util_1.default.error("tupImWrapper", "get the recent conversation failed! result=" + data.result);
                                getRecentConversationPromise.reject(data);
                            }
                        }
                    };
                    param = {
                        "time_stamp": timestamp,
                        "count": count
                    };
                    this.tupIm.getRecentConversation(param, callbacks);
                    return [2, getRecentConversationPromise.promise];
                });
            });
        };
        TupImWrapper.prototype.delRecentConversation = function (isDelAll, conversationId, type, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var delRecentConversationPromise, callbacks, param;
                return __generator(this, function (_a) {
                    delRecentConversationPromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result == 0) {
                                util_1.default.debug("tupImWrapper", "delete the recent conversation successfully!");
                                delRecentConversationPromise.resolve(data);
                            }
                            else {
                                util_1.default.error("tupImWrapper", "delete the recent conversation failed! result=" + data.result);
                                delRecentConversationPromise.reject(data);
                            }
                        }
                    };
                    param = {
                        "is_del_all": isDelAll ? 1 : 0,
                        "conversation_id": conversationId,
                        "type": type
                    };
                    this.tupIm.delRecentConversation(param, callbacks);
                    return [2, delRecentConversationPromise.promise];
                });
            });
        };
        TupImWrapper.prototype.deleteMessage = function (deleteMessageParam, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var deleteMessagePromise, callbacks, param;
                return __generator(this, function (_a) {
                    deleteMessagePromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result == 0) {
                                util_1.default.debug("tupImWrapper", "delete message successfully!");
                                deleteMessagePromise.resolve(data);
                            }
                            else {
                                util_1.default.error("tupImWrapper", "delete message failed! result=" + data.result);
                                deleteMessagePromise.reject(data);
                            }
                        }
                    };
                    param = {
                        "msg_type": deleteMessageParam.isGroupMsg,
                        "opt_type": deleteMessageParam.optType,
                        "sender": deleteMessageParam.sender,
                        "msgid_list": deleteMessageParam.msgIdList
                    };
                    this.tupIm.delHistoryMessage(param, callbacks);
                    return [2, deleteMessagePromise.promise];
                });
            });
        };
        TupImWrapper.prototype.queryHistoryMessage = function (queryHistoryMessageParam, callback) {
            return __awaiter(this, void 0, void 0, function () {
                var deleteMessagePromise, callbacks, param;
                return __generator(this, function (_a) {
                    deleteMessagePromise = this.getPromise();
                    callbacks = {
                        response: function (data) {
                            if (data.result == 0) {
                                util_1.default.debug("tupImWrapper", "query message successfully!");
                                deleteMessagePromise.resolve(data);
                            }
                            else {
                                util_1.default.error("tupImWrapper", "query message failed! result=" + data.result);
                                deleteMessagePromise.reject(data);
                            }
                        }
                    };
                    param = {
                        "operation_type": queryHistoryMessageParam.operationType,
                        "msg_type": queryHistoryMessageParam.msgType,
                        "sender": queryHistoryMessageParam.sender,
                        "str_msgid": queryHistoryMessageParam.msgId,
                        "count": queryHistoryMessageParam.count
                    };
                    this.tupIm.queryHistoryMessage(param, callbacks);
                    return [2, deleteMessagePromise.promise];
                });
            });
        };
        TupImWrapper.prototype.uninit = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this.tupIm.uninit({});
                    return [2];
                });
            });
        };
        TupImWrapper.prototype.setBasicImEvent = function (callbacks) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this.tupIm.setBasicImEvent(callbacks);
                    return [2];
                });
            });
        };
        TupImWrapper.prototype.setP2pFileImEvent = function (callbacks) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this.tupIm.setP2pFileImEvent(callbacks);
                    return [2];
                });
            });
        };
        TupImWrapper.prototype.setGroupImEvent = function (callbacks) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this.tupIm.setGroupImEvent(callbacks);
                    return [2];
                });
            });
        };
        TupImWrapper._instance = new TupImWrapper();
        return TupImWrapper;
    }());
    exports.default = TupImWrapper;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 374 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, util_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TUPIm = (function () {
        function TUPIm(opts) {
            var _this = this;
            this.notifyFuncs = [];
            this.rspFuncs = [];
            this.wsocket = {};
            this.section_id = 0x20000;
            this.name = "Im";
            this.notifyFuncs = new Array();
            this.rspFuncs = new Array();
            var serviceAddr = opts.svrAddr || "127.0.0.1";
            var pcol = "ws://";
            if (opts.ssl === 1) {
                pcol = "wss://";
            }
            if (opts.socket) {
                this.uniSocket = opts.socket;
                this.uniSocket.registerService(this);
            }
            else {
                this.wsocket = new WebSocket(pcol + serviceAddr + ":7684", "tup_im_service_protocol");
                this.wsocket.onopen = opts.ready;
                this.wsocket.onclose = opts.close;
                this.wsocket.onmessage = function (msg) {
                    var data = JSON.parse(msg.data);
                    util_1.default.debug("tupIm", msg.data);
                    _this.msgProcessor(data);
                };
            }
        }
        ;
        TUPIm.prototype.msgProcessor = function (data) {
            if (data.notify > 0) {
                var notifyIdx = data.notify & 0x7fff;
                if (typeof this.notifyFuncs[notifyIdx] == "function") {
                    this.notifyFuncs[notifyIdx](data);
                }
            }
            if (data.rsp > 0) {
                var rspIdx = data.rsp & 0x7fff;
                if (typeof this.rspFuncs[rspIdx] == "function") {
                    this.rspFuncs[rspIdx](data);
                }
            }
        };
        TUPIm.prototype.sendData = function (data) {
            var sendStr = JSON.stringify(data);
            if (this.uniSocket) {
                this.uniSocket.sendData(sendStr);
            }
            else {
                this.wsocket.send(sendStr);
            }
        };
        ;
        TUPIm.prototype.init = function (callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[1] = callbacks.response;
            }
            var data = {
                "cmd": 131073,
                "description": "tup_im_init"
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.uninit = function (callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[2] = callbacks.response;
            }
            var data = {
                "cmd": 131074,
                "description": "tup_im_uninit"
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.setBasicImEvent = function (callbacks) {
            if (callbacks && typeof callbacks.onHeartBeart == "function") {
                this.notifyFuncs[0] = callbacks.onHeartBeart;
            }
            if (callbacks && typeof callbacks.onSysUrlRet == "function") {
                this.notifyFuncs[1] = callbacks.onSysUrlRet;
            }
            if (callbacks && typeof callbacks.onLogout == "function") {
                this.notifyFuncs[2] = callbacks.onLogout;
            }
            if (callbacks && typeof callbacks.onKickOut == "function") {
                this.notifyFuncs[3] = callbacks.onKickOut;
            }
            if (callbacks && typeof callbacks.onMultiDevice == "function") {
                this.notifyFuncs[4] = callbacks.onMultiDevice;
            }
            if (callbacks && typeof callbacks.onGeneral == "function") {
                this.notifyFuncs[5] = callbacks.onGeneral;
            }
            if (callbacks && typeof callbacks.onAddFriend == "function") {
                this.notifyFuncs[6] = callbacks.onAddFriend;
            }
            if (callbacks && typeof callbacks.onUserInfoChange == "function") {
                this.notifyFuncs[8] = callbacks.onUserInfoChange;
            }
            if (callbacks && typeof callbacks.onSendImInput == "function") {
                this.notifyFuncs[34] = callbacks.onSendImInput;
            }
            if (callbacks && typeof callbacks.onCodeChat == "function") {
                this.notifyFuncs[35] = callbacks.onCodeChat;
            }
            if (callbacks && typeof callbacks.onChatList == "function") {
                this.notifyFuncs[36] = callbacks.onChatList;
            }
            if (callbacks && typeof callbacks.onSystemBulletin == "function") {
                this.notifyFuncs[37] = callbacks.onSystemBulletin;
            }
            if (callbacks && typeof callbacks.onSms == "function") {
                this.notifyFuncs[38] = callbacks.onSms;
            }
            if (callbacks && typeof callbacks.onUnDeliver == "function") {
                this.notifyFuncs[39] = callbacks.onUnDeliver;
            }
            if (callbacks && typeof callbacks.onMsgRead == "function") {
                this.notifyFuncs[40] = callbacks.onMsgRead;
            }
            if (callbacks && typeof callbacks.onMsgSendAck == "function") {
                this.notifyFuncs[41] = callbacks.onMsgSendAck;
            }
            if (callbacks && typeof callbacks.onUserStatusList == "function") {
                this.notifyFuncs[43] = callbacks.onUserStatusList;
            }
            if (callbacks && typeof callbacks.onWithdrawAck == "function") {
                this.notifyFuncs[44] = callbacks.onWithdrawAck;
            }
            if (callbacks && typeof callbacks.onWithdrawNotify == "function") {
                this.notifyFuncs[45] = callbacks.onWithdrawNotify;
            }
            if (callbacks && typeof callbacks.onOprCommand == "function") {
                this.notifyFuncs[46] = callbacks.onOprCommand;
            }
        };
        TUPIm.prototype.setP2pFileImEvent = function (callbacks) {
            if (callbacks && typeof callbacks.onP2pFileIncoming == "function") {
                this.notifyFuncs[29] = callbacks.onP2pFileIncoming;
            }
            if (callbacks && typeof callbacks.onP2pFileProcess == "function") {
                this.notifyFuncs[30] = callbacks.onP2pFileProcess;
            }
            if (callbacks && typeof callbacks.onP2pFileStartResult == "function") {
                this.notifyFuncs[31] = callbacks.onP2pFileStartResult;
            }
            if (callbacks && typeof callbacks.onP2pFileStopResult == "function") {
                this.notifyFuncs[32] = callbacks.onP2pFileStopResult;
            }
            if (callbacks && typeof callbacks.onP2pFileStop == "function") {
                this.notifyFuncs[33] = callbacks.onP2pFileStop;
            }
        };
        TUPIm.prototype.setGroupImEvent = function (callbacks) {
            if (callbacks && typeof callbacks.onApplyJoinFixedGroupResult == "function") {
                this.notifyFuncs[10] = callbacks.onApplyJoinFixedGroupResult;
            }
            if (callbacks && typeof callbacks.onFixedGroupMemberAdd == "function") {
                this.notifyFuncs[11] = callbacks.onFixedGroupMemberAdd;
            }
            if (callbacks && typeof callbacks.onFixedGroupMemberDel == "function") {
                this.notifyFuncs[12] = callbacks.onFixedGroupMemberDel;
            }
            if (callbacks && typeof callbacks.onFixedGroupInfoChg == "function") {
                this.notifyFuncs[13] = callbacks.onFixedGroupInfoChg;
            }
            if (callbacks && typeof callbacks.onFixedGroupOwnerChange == "function") {
                this.notifyFuncs[14] = callbacks.onFixedGroupOwnerChange;
            }
            if (callbacks && typeof callbacks.onReceiveInviteToFixedGroup == "function") {
                this.notifyFuncs[15] = callbacks.onReceiveInviteToFixedGroup;
            }
            if (callbacks && typeof callbacks.onReceiveInviteJoinFixedGroup == "function") {
                this.notifyFuncs[16] = callbacks.onReceiveInviteJoinFixedGroup;
            }
            if (callbacks && typeof callbacks.onFixedGroupWasAddedToGroup == "function") {
                this.notifyFuncs[17] = callbacks.onFixedGroupWasAddedToGroup;
            }
            if (callbacks && typeof callbacks.onFixedGroupDismiss == "function") {
                this.notifyFuncs[18] = callbacks.onFixedGroupDismiss;
            }
            if (callbacks && typeof callbacks.onFixedGroupOwnerInviteResult == "function") {
                this.notifyFuncs[19] = callbacks.onFixedGroupOwnerInviteResult;
            }
            if (callbacks && typeof callbacks.onFixedGroupKickout == "function") {
                this.notifyFuncs[20] = callbacks.onFixedGroupKickout;
            }
            if (callbacks && typeof callbacks.onFixedGroupLeaveResult == "function") {
                this.notifyFuncs[21] = callbacks.onFixedGroupLeaveResult;
            }
            if (callbacks && typeof callbacks.onDiscussGroupMemListAddMember == "function") {
                this.notifyFuncs[22] = callbacks.onDiscussGroupMemListAddMember;
            }
            if (callbacks && typeof callbacks.onDiscussGroupMemListDelMember == "function") {
                this.notifyFuncs[23] = callbacks.onDiscussGroupMemListDelMember;
            }
            if (callbacks && typeof callbacks.onDiscussGroupInfoChange == "function") {
                this.notifyFuncs[24] = callbacks.onDiscussGroupInfoChange;
            }
            if (callbacks && typeof callbacks.onDiscussGroupWasAddToGroup == "function") {
                this.notifyFuncs[25] = callbacks.onDiscussGroupWasAddToGroup;
            }
            if (callbacks && typeof callbacks.onDiscussGroupOwnerChange == "function") {
                this.notifyFuncs[26] = callbacks.onDiscussGroupOwnerChange;
            }
            if (callbacks && typeof callbacks.onDiscussGroupDismiss == "function") {
                this.notifyFuncs[27] = callbacks.onDiscussGroupDismiss;
            }
            if (callbacks && typeof callbacks.onDiscussGroupBroadcast == "function") {
                this.notifyFuncs[28] = callbacks.onDiscussGroupBroadcast;
            }
            if (callbacks && typeof callbacks.onGroupFile == "function") {
                this.notifyFuncs[42] = callbacks.onGroupFile;
            }
        };
        ;
        TUPIm.prototype.setServerAddress = function (ip, port, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[3] = callbacks.response;
            }
            var data = {
                "cmd": 131075,
                "description": "tup_im_setserveraddress",
                "param": {
                    "ip": ip,
                    "port": port
                }
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.login = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[4] = callbacks.response;
            }
            var data = {
                "cmd": 131076,
                "description": "tup_im_login",
                "param": arg
            };
            this.sendData(data);
            data.param = "";
        };
        ;
        TUPIm.prototype.logout = function (callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[5] = callbacks.response;
            }
            var data = {
                "cmd": 131077,
                "description": "tup_im_logout"
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.notifyImInputting = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[6] = callbacks.response;
            }
            var data = {
                "cmd": 131078,
                "description": "tup_im_notifyiminputting",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.getContactList = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[7] = callbacks.response;
            }
            var data = {
                "cmd": 131079,
                "description": "tup_im_getcontactlist",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.getServiceProfile = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[8] = callbacks.response;
            }
            var data = {
                "cmd": 131080,
                "description": "tup_im_getserviceprofile",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.getSysUrl = function (callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[9] = callbacks.response;
            }
            var data = {
                "cmd": 131081,
                "description": "tup_im_getsysurl"
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.getUserInfo = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[10] = callbacks.response;
            }
            var data = {
                "cmd": 131082,
                "description": "tup_im_getuserinfo",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.addUserGroup = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[11] = callbacks.response;
            }
            var data = {
                "cmd": 131083,
                "description": "tup_im_addusergroup",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.modUserGroup = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[12] = callbacks.response;
            }
            var data = {
                "cmd": 131084,
                "description": "tup_im_modusergroup",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.delUserGroup = function (id, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[13] = callbacks.response;
            }
            var data = {
                "cmd": 131085,
                "description": "tup_im_delusergroup",
                "param": id
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.updateUsergroup = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[14] = callbacks.response;
            }
            var data = {
                "cmd": 131086,
                "description": "tup_im_update_usergroup",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.addFriend = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[15] = callbacks.response;
            }
            var data = {
                "cmd": 131087,
                "description": "tup_im_addfriend",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.delFriendOrContact = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[16] = callbacks.response;
            }
            var data = {
                "cmd": 131088,
                "description": "tup_im_delfriendorcontact",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.addContact = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[17] = callbacks.response;
            }
            var data = {
                "cmd": 131089,
                "description": "tup_im_addcontact",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.modContact = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[18] = callbacks.response;
            }
            var data = {
                "cmd": 131090,
                "description": "tup_im_modcontact",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.moveContactGroup = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[19] = callbacks.response;
            }
            var data = {
                "cmd": 131091,
                "description": "tup_im_movecontactgroup",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.detectUserStatus = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[20] = callbacks.response;
            }
            var data = {
                "cmd": 131092,
                "description": "tup_im_detectuserstatus",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.subscribeUserStatus = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[21] = callbacks.response;
            }
            var data = {
                "cmd": 131093,
                "description": "tup_im_subscribeuserstatus",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.unSubscribeUserStatus = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[22] = callbacks.response;
            }
            var data = {
                "cmd": 131094,
                "description": "tup_im_unsubscribeuserstatus",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.sendIm = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[23] = callbacks.response;
            }
            var data = {
                "cmd": 131095,
                "description": "tup_im_sendim",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.setMessageRead = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[24] = callbacks.response;
            }
            var data = {
                "cmd": 131096,
                "description": "tup_im_setmessageread",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.queryHistoryMessage = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[25] = callbacks.response;
            }
            var data = {
                "cmd": 131097,
                "description": "tup_im_queryHistoryMessage",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.getDepts = function (deptID, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[26] = callbacks.response;
            }
            var data = {
                "cmd": 131098,
                "description": "tup_im_getdepts",
                "param": deptID
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.queryEntaddressBook = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[27] = callbacks.response;
            }
            var data = {
                "cmd": 131099,
                "description": "tup_im_queryentaddressbook",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.queryUserInfo = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[28] = callbacks.response;
            }
            var data = {
                "cmd": 131100,
                "description": "tup_im_queryuserinfo",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.addFixedGroup = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[29] = callbacks.response;
            }
            var data = {
                "cmd": 131101,
                "description": "tup_im_addfixedgroup",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.modFixedGroup = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[30] = callbacks.response;
            }
            var data = {
                "cmd": 131102,
                "description": "tup_im_modfixedgroup",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.delFixedGroup = function (id, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[31] = callbacks.response;
            }
            var data = {
                "cmd": 131103,
                "description": "tup_im_delfixedgroup",
                "param": {
                    "id": id
                }
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.addFixedGroupMember = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[32] = callbacks.response;
            }
            var data = {
                "cmd": 131104,
                "description": "tup_im_addfixedgroupmember",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.delFixedGroupMember = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[33] = callbacks.response;
            }
            var data = {
                "cmd": 131105,
                "description": "tup_im_delfixedgroupmember",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.confirmFixedGroupApply = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[34] = callbacks.response;
            }
            var data = {
                "cmd": 131106,
                "description": "tup_im_confirmfixedgroupapply",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.confirmFixedGroupInvite = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[35] = callbacks.response;
            }
            var data = {
                "cmd": 131107,
                "description": "tup_im_confirmfixedgroupinvite",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.joinFixedGroup = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[36] = callbacks.response;
            }
            var data = {
                "cmd": 131108,
                "description": "tup_im_joinfixedgroup",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.leaveFixedGroup = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[37] = callbacks.response;
            }
            var data = {
                "cmd": 131109,
                "description": "tup_im_leavefixedgroup",
                "param": {
                    "arg": arg
                }
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.transferFixedGroup = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[38] = callbacks.response;
            }
            var data = {
                "cmd": 131110,
                "description": "tup_im_transferfixedgroup",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.getFixedGroupDetail = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[39] = callbacks.response;
            }
            var data = {
                "cmd": 131111,
                "description": "tup_im_getfixedgroupdetail",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.getFixedGroupMembers = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[40] = callbacks.response;
            }
            var data = {
                "cmd": 131112,
                "description": "tup_im_getfixedgroupmembers",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.getFixedGroups = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[41] = callbacks.response;
            }
            var data = {
                "cmd": 131113,
                "description": "tup_im_getfixedgroups",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.addDiscussionGroup = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[42] = callbacks.response;
            }
            var data = {
                "cmd": 131114,
                "description": "tup_im_adddiscussiongroup",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.modDiscussionGroup = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[43] = callbacks.response;
            }
            var data = {
                "cmd": 131115,
                "description": "tup_im_moddiscussiongroup",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.delDiscussionGroup = function (id, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[44] = callbacks.response;
            }
            var data = {
                "cmd": 131116,
                "description": "tup_im_deldiscussiongroup",
                "param": {
                    "id": id
                }
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.addDiscussionGroupMember = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[45] = callbacks.response;
            }
            var data = {
                "cmd": 131117,
                "description": "tup_im_adddiscussiongroupmember",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.delDiscussionGroupMember = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[46] = callbacks.response;
            }
            var data = {
                "cmd": 131118,
                "description": "tup_im_deldiscussiongroupmember",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.addDiscussionGroupPhoneMember = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[47] = callbacks.response;
            }
            var data = {
                "cmd": 131119,
                "description": "tup_im_adddiscussiongroupphonemember",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.delDiscussionGroupPhoneMember = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[48] = callbacks.response;
            }
            var data = {
                "cmd": 131120,
                "description": "tup_im_deldiscussiongroupphonemember",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.leaveDiscussionGroupSys = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[49] = callbacks.response;
            }
            var data = {
                "cmd": 131121,
                "description": "tup_im_leavediscussiongroup",
                "param": {
                    "group_id": arg
                }
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.leaveDiscussionGroup = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[50] = callbacks.response;
            }
            var data = {
                "cmd": 131122,
                "description": "tup_im_leave_discussion_group",
                "param": {
                    "group_id": arg
                }
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.transferDiscussionGroup = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[51] = callbacks.response;
            }
            var data = {
                "cmd": 131123,
                "description": "tup_im_transferdiscussiongroup",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.setDisgroupPolicy = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[52] = callbacks.response;
            }
            var data = {
                "cmd": 131124,
                "description": "tup_im_set_disgroup_policy",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.sendDisgroupOpMessage = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[53] = callbacks.response;
            }
            var data = {
                "cmd": 131125,
                "description": "tup_im_send_disgroup_op_message",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.setSelfDefineImage = function (image, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[54] = callbacks.response;
            }
            var data = {
                "cmd": 131126,
                "description": "tup_im_setselfdefineimage",
                "param": image
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.setSystemImage = function (imageID, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[55] = callbacks.response;
            }
            var data = {
                "cmd": 131127,
                "description": "tup_im_setsystemimage",
                "param": {
                    "imageID": imageID
                }
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.setUserInfo = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[56] = callbacks.response;
            }
            var data = {
                "cmd": 131128,
                "description": "tup_im_setuserinfo",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.getUserDefineImage = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[57] = callbacks.response;
            }
            var data = {
                "cmd": 131129,
                "description": "tup_im_getuserdefineimage",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.publishStatus = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[58] = callbacks.response;
            }
            var data = {
                "cmd": 131130,
                "description": "tup_im_publishstatus",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.getConferenceList = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[59] = callbacks.response;
            }
            var data = {
                "cmd": 131131,
                "description": "tup_im_get_conference_list",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.getRecentConversation = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[60] = callbacks.response;
            }
            var data = {
                "cmd": 131132,
                "description": "tup_im_get_recent_conversation",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.delRecentConversation = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[61] = callbacks.response;
            }
            var data = {
                "cmd": 131133,
                "description": "tup_im_del_recent_conversation",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.sendP2PFile = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[62] = callbacks.response;
            }
            var data = {
                "cmd": 131134,
                "description": "tup_im_sendp2pfile",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.acceptP2PFile = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[63] = callbacks.response;
            }
            var data = {
                "cmd": 131135,
                "description": "tup_im_acceptp2pfile",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.rejectP2PFile = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[64] = callbacks.response;
            }
            var data = {
                "cmd": 131136,
                "description": "tup_im_rejectp2pfile",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.cancelP2PFile = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[65] = callbacks.response;
            }
            var data = {
                "cmd": 131137,
                "description": "tup_im_cancelp2pfile",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.sendSms = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[66] = callbacks.response;
            }
            var data = {
                "cmd": 131138,
                "description": "tup_im_sendsms",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.groupFilePreUpload = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[67] = callbacks.response;
            }
            var data = {
                "cmd": 131139,
                "description": "tup_im_groupfile_pre_upload",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.groupFileReportUploadResult = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[68] = callbacks.response;
            }
            var data = {
                "cmd": 131140,
                "description": "tup_im_groupfile_report_upload_result",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.groupFilePreDelete = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[69] = callbacks.response;
            }
            var data = {
                "cmd": 131141,
                "description": "tup_im_groupfile_pre_delete",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.groupFileReportDeleteResult = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[70] = callbacks.response;
            }
            var data = {
                "cmd": 131142,
                "description": "tup_im_groupfile_report_delete_result",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.groupFileQuery = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[71] = callbacks.response;
            }
            var data = {
                "cmd": 131143,
                "description": "tup_im_groupfile_query",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.setLinkageStatus = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[72] = callbacks.response;
            }
            var data = {
                "cmd": 131144,
                "description": "tup_im_set_linkage_status",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.getLinkageStatus = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[73] = callbacks.response;
            }
            var data = {
                "cmd": 131145,
                "description": "tup_im_get_linkage_status",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.tupImBase64Decode = function (arg, len, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[77] = callbacks.response;
            }
            var data = {
                "cmd": 0x2004D,
                "description": "tup_im_base64_decode",
                "param": {
                    "arg": arg,
                    "len": len
                }
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.setNetAccessMode = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[78] = callbacks.response;
            }
            var data = {
                "cmd": 131150,
                "description": "tup_im_set_net_access_mode",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.setDispatchMessage = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[79] = callbacks.response;
            }
            var data = {
                "cmd": 131151,
                "description": "tup_im_setdispatchmessage",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.setGroupMsgPolicy = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[80] = callbacks.response;
            }
            var data = {
                "cmd": 131152,
                "description": "tup_im_set_group_msg_prompt_policy",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.setLogParam = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[81] = callbacks.response;
            }
            var data = {
                "cmd": 131153,
                "description": "tup_im_set_log_param",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.clientPerformanceReport = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[82] = callbacks.response;
            }
            var data = {
                "cmd": 131154,
                "description": "tup_im_client_performance_report",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.withdrawIm = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[83] = callbacks.response;
            }
            var data = {
                "cmd": 131155,
                "description": "tup_im_withdraw_msg",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.sendHeartBeat = function (callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[84] = callbacks.response;
            }
            var data = {
                "cmd": 131156,
                "description": "tup_im_sendheartbeat"
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.modifyGroupType = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[86] = callbacks.response;
            }
            var data = {
                "cmd": 131158,
                "description": "tup_im_modify_group_type",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.openGroupSpace = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[87] = callbacks.response;
            }
            var data = {
                "cmd": 131159,
                "description": "tup_im_open_group_space",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.kickOut = function (callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[88] = callbacks.response;
            }
            var data = {
                "cmd": 131160,
                "description": "tup_im_kick_out"
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.getServiceUtcTime = function (callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[89] = callbacks.response;
            }
            var data = {
                "cmd": 131161,
                "description": "tup_im_get_service_utc_time"
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.activeP2pPort = function (callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[90] = callbacks.response;
            }
            var data = {
                "cmd": 131162,
                "description": "tup_im_active_p2p_port"
            };
            this.sendData(data);
        };
        ;
        TUPIm.prototype.delHistoryMessage = function (arg, callbacks) {
            if (callbacks && typeof callbacks.response == "function") {
                this.rspFuncs[91] = callbacks.response;
            }
            var data = {
                "cmd": 131163,
                "description": "tup_im_del_history_message",
                "param": arg
            };
            this.sendData(data);
        };
        ;
        return TUPIm;
    }());
    exports.default = TUPIm;
    ;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 375 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(39), __webpack_require__(51), __webpack_require__(11), __webpack_require__(14), __webpack_require__(135), __webpack_require__(1), __webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, tupLoginWrapper_1, tupCallWrapper_1, enum_1, serverConfig_1, userConfig_1, util, util_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var AnonyConf = (function () {
        function AnonyConf() {
            var _this = this;
            this.updateSiteInfo = function (ret) {
                var siteInfo = ret.tempuser_info_result.site_info;
                if (siteInfo && siteInfo[0]) {
                    var _a = siteInfo[0], num_of_server = _a.num_of_server, access_server = _a.access_server, tms_account = _a.tms_account, tms_password = _a.tms_password;
                    var sipUri = "", sipTlsUri = "", svnUri = "", httpsProxy = "", eserverUri = "", stgUri = "", stgAccount = "", stgPassword = "", sipStgUri = "", isSiptls = 0, isSrtp = 0, eserverStgUri = "", maaUri = "";
                    var tmsServer = "", tmsAccount = "", tmsPwd = "";
                    for (var i = 0; i < num_of_server; i++) {
                        if (!access_server || !access_server[i]) {
                            continue;
                        }
                        isSiptls = access_server[0].is_siptls;
                        isSrtp = access_server[0].is_srtp;
                        sipUri += access_server[i].sip_uri;
                        sipTlsUri = access_server[0].sip_tls_uri;
                        svnUri += access_server[i].svn_uri;
                        httpsProxy += access_server[i].httpsproxy_uri;
                        stgUri += access_server[i].stg_info.stg_uri;
                        sipStgUri += access_server[i].stg_info.sip_stg_uri;
                        eserverStgUri += access_server[i].stg_info.eserver_stg_uri;
                        stgAccount = access_server[0].stg_info.account;
                        stgPassword = access_server[0].stg_info.password;
                        if (!eserverUri) {
                            eserverUri = access_server[i].eserver_uri;
                        }
                        if (!maaUri) {
                            maaUri = access_server[i].maa_uri;
                        }
                        if (!tmsServer) {
                            tmsServer = access_server[i].tms_server;
                        }
                        if (!tmsAccount) {
                            tmsAccount = tms_account;
                        }
                        if (!tmsPwd) {
                            tmsPwd = tms_password;
                        }
                        if (i != num_of_server - 1) {
                            sipUri += ';';
                            svnUri += ';';
                            httpsProxy += ';';
                            stgUri += ';';
                            sipStgUri += ';';
                            eserverStgUri += ';';
                        }
                    }
                    var _b = ret.tempuser_info_result, access_code = _b.access_code, conf_id = _b.conf_id, conf_pwd = _b.conf_pwd, sip_account = _b.sip_account, sip_impi = _b.sip_impi, sip_password = _b.sip_password, password_type = _b.password_type, sip_domain = _b.sip_domain, sip_short_num = _b.sip_short_num, uportal_uri = _b.uportal_uri, terminal_func_type = _b.terminal_func_type;
                    var _c = eserverUri.split(":"), eserver_address = _c[0], eserver_port = _c[1];
                    var sipUriList = sipUri.split(";");
                    var _d = uportal_uri.split(":"), server_uri = _d[0], server_port = _d[1];
                    var _e = sipUriList[0] ? sipUriList[0].split(":") : ["", "0"], sipserver_address = _e[0], sipserver_port = _e[1];
                    var _f = sipUriList[1] ? sipUriList[1].split(":") : ["", "0"], sipserver_address1 = _f[0], sipserver_port1 = _f[1];
                    var _g = sipUriList[2] ? sipUriList[2].split(":") : ["", "0"], sipserver_address2 = _g[0], sipserver_port2 = _g[1];
                    var loginInfo = {
                        accessCode: access_code,
                        confId: conf_id,
                        confPwd: conf_pwd,
                        sipAccount: sip_account,
                        sipImpi: sip_impi,
                        sipPassword: sip_password,
                        sipPasswordType: password_type,
                        eServerAddress: eserver_address,
                        eServerPort: parseInt(eserver_port),
                        sipServerAddress: sipserver_address,
                        sipServerPort: parseInt(sipserver_port),
                        sipDomain: sip_domain,
                        sipServerBackup1: sipserver_address1,
                        sipServerPortBackup1: parseInt(sipserver_port1),
                        sipServerLocal: sipserver_address2,
                        sipServerPortLocal: parseInt(sipserver_port2),
                        authServerUri: server_uri,
                        authServerPort: parseInt(server_port),
                        isSiptls: isSiptls,
                        isSrtp: isSrtp,
                        sipUri: sipUri,
                        sipTlsUri: sipTlsUri,
                        svnUri: svnUri,
                        httpsProxy: httpsProxy,
                        stgUri: stgUri,
                        stgAccount: stgAccount,
                        stgPassword: stgPassword,
                        sipStgUri: sipStgUri,
                        eserverStgUri: eserverStgUri,
                        tmsServer: tmsServer,
                        tmsAccount: tmsAccount,
                        tmsPwd: tmsPwd,
                        shortNumber: sip_short_num,
                        terminalFuncType: terminal_func_type,
                        maaUri: maaUri
                    };
                    _this.updateLoginInfo(loginInfo);
                    return loginInfo;
                }
                return {};
            };
            this.buildStgTunnel = function (stgUri, stgAccount, stgPassword) { return __awaiter(_this, void 0, void 0, function () {
                var stgUriList, stgNum, stgServers, i, _a, serverUri, serverPort, stgServer, ca_path, data, ret, stgInfo, err;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            stgUriList = stgUri.split(";");
                            stgNum = stgUriList.length;
                            stgServers = new Array();
                            for (i = 0; i < stgNum; i++) {
                                _a = stgUriList[i].split(":"), serverUri = _a[0], serverPort = _a[1];
                                stgServer = {
                                    server_uri: serverUri,
                                    server_port: parseInt(serverPort)
                                };
                                stgServers.push(stgServer);
                            }
                            ca_path = serverConfig_1.CloudEC_SERVERCONFIG.CA_PATH;
                            return [4, this.loginWrapper.buildStgTunnel(stgNum, stgServers, stgAccount, stgPassword, ca_path)];
                        case 1:
                            data = _b.sent();
                            ret = data.param;
                            if (!(ret.result === 0)) return [3, 3];
                            util_1.default.debug("anonyConf", "stg tunnel build success.");
                            return [4, this.updateStgInfo(ret)];
                        case 2:
                            stgInfo = _b.sent();
                            return [2, { result: true, stgInfo: stgInfo }];
                        case 3:
                            util_1.default.error("anonyConf", "stg tunnel build fail.");
                            err = { cmdId: data.notify, errorCode: ret.result, errorInfo: "stg tunnel build fail" };
                            Object.assign(err, util.getErrCode(data.notify, ret.result));
                            return [2, { result: false, info: err }];
                    }
                });
            }); };
            this.updateStgInfo = function (ret) {
                var stgUriUsed = ret.address;
                var isBuildStgSuc = (ret.result === 0) ? true : false;
                var loginInfo = JSON.parse(sessionStorage.cloudEC_loginInfo);
                var stgUri = loginInfo.stgUri, eserverStgUri = loginInfo.eserverStgUri;
                var eServerAddr = "";
                if (isBuildStgSuc) {
                    var eserverStgUriList = eserverStgUri.split(";");
                    var stgUriList = stgUri.split(";");
                    var stgUriNum = stgUriList.length;
                    if (!stgUriUsed) {
                        eServerAddr = eserverStgUriList[0];
                    }
                    else {
                        for (var i = 0; i < stgUriNum; i++) {
                            if (stgUriList[i].indexOf(stgUriUsed) != -1) {
                                eServerAddr = eserverStgUriList[i];
                                break;
                            }
                        }
                    }
                }
                var _a = eServerAddr.split(":"), eserver_address = _a[0], eserver_port = _a[1];
                var stgInfo = {
                    stgUriUsed: stgUriUsed,
                    isBuildStgSuc: isBuildStgSuc,
                    eServerAddress: eserver_address,
                    eServerPort: parseInt(eserver_port)
                };
                _this.updateLoginInfo(stgInfo);
                return stgInfo;
            };
            this.fireWallDetect = function (svnUri) { return __awaiter(_this, void 0, void 0, function () {
                var svnUriList, serverNum, serverList, i, _a, serverUri, serverPort, server, ret;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            svnUriList = svnUri.split(";");
                            serverNum = svnUriList.length;
                            serverList = new Array();
                            for (i = 0; i < serverNum; i++) {
                                _a = svnUriList[i].split(":"), serverUri = _a[0], serverPort = _a[1];
                                server = {
                                    server_uri: serverUri,
                                    server_port: 0
                                };
                                serverList.push(server);
                            }
                            return [4, this.loginWrapper.fireWallDetect(serverNum, serverList)];
                        case 1:
                            ret = _b.sent();
                            if (!(ret && ret.result === 0)) return [3, 3];
                            util_1.default.debug("anonyConf", "fireWall detect success. The fireWall mode is  " + ret.fire_wall_mode);
                            this.fireWallConnectMode = ret.fire_wall_mode;
                            return [4, this.updateFireWallAndSipInfo(ret)];
                        case 2:
                            _b.sent();
                            return [3, 4];
                        case 3:
                            util_1.default.error("anonyConf", "fireWall detect fail.");
                            _b.label = 4;
                        case 4: return [2];
                    }
                });
            }); };
            this.updateFireWallAndSipInfo = function (data) {
                var fireWallMode = data.fire_wall_mode;
                var loginInfo = JSON.parse(sessionStorage.cloudEC_loginInfo);
                var stgUri = loginInfo.stgUri, stgUriUsed = loginInfo.stgUriUsed, svnUri = loginInfo.svnUri, sipStgUri = loginInfo.sipStgUri, sipUri = loginInfo.sipUri;
                var stgUriList = stgUri.split(";");
                var svnUriList = svnUri.split(";");
                var sipStgUriList = sipStgUri.split(";");
                var sipUriList = sipUri.split(";");
                var stgUriNum = stgUriList.length;
                var svnUriUsed = "";
                var sipStgUriUesd = "";
                for (var i = 0; i < stgUriNum; i++) {
                    if (stgUriList[i].indexOf(stgUriUsed) != -1) {
                        sipStgUriUesd = sipStgUriList[i];
                        svnUriUsed = svnUriList[i];
                        break;
                    }
                }
                var _a = ["", ""], sipserver_address = _a[0], sipserver_port = _a[1];
                if (enum_1.FIREWALL_MODE.LOGIN_E_FIREWALL_MODE_ONLY_HTTP === fireWallMode) {
                    _b = sipStgUriUesd.split(";"), sipserver_address = _b[0], sipserver_port = _b[1];
                }
                else if (enum_1.FIREWALL_MODE.LOGIN_E_FIREWALL_MODE_HTTP_AND_SVN === fireWallMode) {
                    _c = svnUriUsed.split(";"), sipserver_address = _c[0], sipserver_port = _c[1];
                }
                else {
                    _d = sipUriList[0].split(":"), sipserver_address = _d[0], sipserver_port = _d[1];
                }
                var isGetFirewallRes = true;
                var fireWallAndSipInfo = {
                    sipServerAddress: sipserver_address,
                    sipServerPort: parseInt(sipserver_port),
                    sipServerBackup1: "",
                    sipServerPortBackup1: 0,
                    sipServerLocal: "",
                    sipServerPortLocal: 0,
                    fireWallMode: fireWallMode,
                    isGetFirewallRes: isGetFirewallRes
                };
                _this.updateLoginInfo(fireWallAndSipInfo);
                var _b, _c, _d;
            };
            this.destroyStgTunnel = function () { return __awaiter(_this, void 0, void 0, function () {
                var ret, stgInfo;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.loginWrapper.destroyStgTunnel()];
                        case 1:
                            ret = _a.sent();
                            if (ret.result === 0) {
                                stgInfo = {
                                    isBuildStgSuc: false,
                                };
                                this.updateLoginInfo(stgInfo);
                                util_1.default.debug("anonyConf", "stg tunnel destroy success.");
                                return [2, { result: true }];
                            }
                            else {
                                util_1.default.error("anonyConf", "stg tunnel destroy fail.");
                            }
                            return [2];
                    }
                });
            }); };
            this.initLoginInfo = function () {
                var loginInfo = {
                    accessCode: "",
                    confId: "",
                    confPwd: "",
                    userAccount: "",
                    account: "",
                    password: "",
                    serverAddress: "",
                    serverPort: "",
                    authToken: "",
                    isRememberPassword: false,
                    isAutoLogin: false,
                    loginHistoryList: [],
                    isLoading: false,
                    loginDisable: false,
                    isCapslock: false,
                    isOffline: false,
                    eabUri: "",
                    groupServer: "",
                    sipUri: "",
                    isSiptls: 0,
                    isSrtp: 0,
                    sipTlsUri: "",
                    svnUri: "",
                    httpsProxy: "",
                    stgUri: "",
                    stgAccount: "",
                    stgPassword: "",
                    sipStgUri: "",
                    eserverStgUri: "",
                    sipAccount: "",
                    sipImpi: "",
                    sipPassword: "",
                    sipPasswordType: 0,
                    sipOutgoingAccCode: null,
                    sipServerAddress: "",
                    sipServerPort: 0,
                    sipDomain: "",
                    sipServerBackup1: "",
                    sipServerPortBackup1: 0,
                    sipServerLocal: "",
                    sipServerPortLocal: 0,
                    eServerAddress: "",
                    eServerPort: 0,
                    umHttpServerUri: "",
                    umHttpsServerUri: "",
                    stgUriUsed: "",
                    isBuildStgSuc: false,
                    isGetFirewallRes: false,
                    fireWallMode: 3,
                    isEserverLoginSuccess: false,
                    isResuming: false,
                    funcType: 0,
                    deployMode: 3,
                    tmsServer: "",
                    tmsAccount: "",
                    tmsPwd: "",
                    isTempUser: 1,
                    maaUri: "",
                    terminalFuncType: 0
                };
                var cloudEC_loginInfo = JSON.stringify(loginInfo);
                sessionStorage.cloudEC_loginInfo = cloudEC_loginInfo;
            };
            this.fireWallConnectMode = 2;
            this.loginWrapper = tupLoginWrapper_1.default.getInstance();
        }
        AnonyConf.prototype.do_actionAnonyLogin = function (anonymousConfParam, serverInfo) {
            return __awaiter(this, void 0, void 0, function () {
                var ret, data, err, _a, stgUri, stgAccount, stgPassword, svnUri, stgTunnelBuiltResult, stgTunnelBuiltResult;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.initLoginInfo();
                            return [4, this.loginWrapper.build()];
                        case 1:
                            _b.sent();
                            return [4, this.loginWrapper.logStart()];
                        case 2:
                            _b.sent();
                            return [4, this.loginWrapper.init()];
                        case 3:
                            _b.sent();
                            return [4, this.getTempUserInfo(anonymousConfParam, serverInfo)];
                        case 4:
                            ret = _b.sent();
                            if (!ret.result) {
                                util_1.default.error("anonyConf", "Get tempUser info failed.");
                                return [2, ret];
                            }
                            return [4, this.loginWrapper.getBestLocalIp(serverInfo.serverAddress)];
                        case 5:
                            data = _b.sent();
                            if (0 == data.result) {
                                sessionStorage.cloudEC_localIP = data.local_ip;
                                util_1.default.debug("anonymousconf", "Get local IP is " + util.hideIPAddress(data.local_ip));
                            }
                            else {
                                util_1.default.error("anonymousconf", "Get local IP failed");
                                err = { cmdId: 0, errorCode: -1, errorInfo: "Get local IP failed" };
                                Object.assign(err, util.getErrCode(data.rsp, data.result));
                                return [2, { result: false, info: err }];
                            }
                            _a = ret.loginInfo, stgUri = _a.stgUri, stgAccount = _a.stgAccount, stgPassword = _a.stgPassword, svnUri = _a.svnUri;
                            if (!userConfig_1.CloudEC_CLIENTCONFIG.USE_IM) return [3, 9];
                            if (!!(stgUri === undefined ||
                                stgUri === "" ||
                                stgUri === ";" ||
                                stgUri === ";;")) return [3, 8];
                            return [4, this.buildStgTunnel(stgUri, stgAccount, stgPassword)];
                        case 6:
                            stgTunnelBuiltResult = _b.sent();
                            if (!stgTunnelBuiltResult.result) {
                                util_1.default.error("anonyConf", "stgTunnel build failed.");
                                return [2, { result: false }];
                            }
                            return [4, this.fireWallDetect(svnUri)];
                        case 7:
                            _b.sent();
                            _b.label = 8;
                        case 8: return [3, 13];
                        case 9:
                            if (!!(stgUri === undefined ||
                                stgUri === "" ||
                                stgUri === ";" ||
                                stgUri === ";;")) return [3, 11];
                            util_1.default.debug("anonyConf", " start startFireWallDetect : " + svnUri);
                            return [4, this.fireWallDetect(svnUri)];
                        case 10:
                            _b.sent();
                            _b.label = 11;
                        case 11:
                            if (!(enum_1.FIREWALL_MODE.LOGIN_E_FIREWALL_MODE_ONLY_HTTP === this.fireWallConnectMode)) return [3, 13];
                            if (!!(stgUri === undefined || stgUri === "" || stgUri === ";" || stgUri === ";;")) return [3, 13];
                            util_1.default.debug("anonyConf", " start buildStgTunnel ");
                            return [4, this.buildStgTunnel(stgUri, stgAccount, stgPassword)];
                        case 12:
                            stgTunnelBuiltResult = _b.sent();
                            if (!stgTunnelBuiltResult.result) {
                                return [2, { result: false }];
                            }
                            _b.label = 13;
                        case 13:
                            stgPassword = "";
                            return [2, { result: true }];
                    }
                });
            });
        };
        AnonyConf.prototype.getTempUserInfo = function (anonymousConfParam, serverInfo) {
            return __awaiter(this, void 0, void 0, function () {
                var data, ret, loginInfo, err;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            util_1.default.debug("anonyConf", "step in getTempUserInfo");
                            return [4, this.loginWrapper.getTempUserInfo(anonymousConfParam, serverInfo)];
                        case 1:
                            data = _a.sent();
                            ret = data.param;
                            if (!(ret.result == 0)) return [3, 3];
                            return [4, this.updateSiteInfo(ret)];
                        case 2:
                            loginInfo = _a.sent();
                            util_1.default.debug("anonyConf", "Get tempUser info success!");
                            return [2, { result: true, loginInfo: loginInfo }];
                        case 3:
                            util_1.default.error("anonyConf", "Get tempUser info failed error_code=" + ret.result);
                            err = { cmdId: 0, errorCode: -1, errorInfo: "Get tempUser info failed" };
                            Object.assign(err, util.getErrCode(data.notify, ret.result));
                            return [2, { result: false, info: err }];
                    }
                });
            });
        };
        AnonyConf.prototype.updateLoginInfo = function (data) {
            var loginInfo = JSON.parse(sessionStorage.cloudEC_loginInfo);
            Object.assign(loginInfo, data);
            var cloudEC_loginInfo = JSON.stringify(loginInfo);
            sessionStorage.cloudEC_loginInfo = cloudEC_loginInfo;
        };
        AnonyConf.prototype.accessReservedConf = function (callType) {
            return __awaiter(this, void 0, void 0, function () {
                var wrapper, loginInfo, accessCode, confId, confPwd;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            wrapper = tupCallWrapper_1.default.getInstance();
                            loginInfo = JSON.parse(sessionStorage.cloudEC_loginInfo);
                            accessCode = loginInfo.accessCode, confId = loginInfo.confId, confPwd = loginInfo.confPwd;
                            return [4, wrapper.accessReservedConf(callType, confId, accessCode, confPwd)
                                    .catch(function (ret) {
                                    util_1.default.error("anonyConf", "accessReservedConf,  ret=" + JSON.stringify(ret));
                                })];
                        case 1:
                            _a.sent();
                            return [2];
                    }
                });
            });
        };
        return AnonyConf;
    }());
    exports.default = AnonyConf;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 376 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(12), __webpack_require__(13), __webpack_require__(24), __webpack_require__(1), __webpack_require__(23), __webpack_require__(1), __webpack_require__(14)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, dispatcher_1, eventInfo_1, errorCode_1, util, client_1, util_1, serverConfig_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Conference = (function () {
        function Conference() {
            var _this = this;
            this.wbInfoList = new Array();
            this.attendeeList = new Array();
            this.setConfInfo = function (confInfo) {
                _this.subject = confInfo.subject;
                _this.mediaType = confInfo.mediaType;
                _this.confHandle = confInfo.confHandle;
                _this.dataConfHandle = confInfo.dataConfHandle;
                _this.confId = confInfo.confId;
                _this.hostKey = confInfo.hostKey;
            };
            this.updateConfInfo = function (confInfo) {
                _this.createor = confInfo.createor;
                _this.isAllMute = confInfo.isAllMute;
                _this.lockState = confInfo.lockState;
            };
            this.isVideoOn = 1;
            this.isMicMute = 0;
            this.dataConfHandle = 0;
        }
        Conference.prototype.setAnnoid = function (annoid) {
            this.annoid = annoid;
        };
        Conference.prototype.isEmptyConfInfo = function () {
            if (this.subject.length == 0 &&
                this.confId.length == 0 &&
                this.hostKey.length == 0 &&
                this.mediaType == 0 &&
                this.confHandle == 0 &&
                this.dataConfHandle == 0 &&
                this.callId.length == 0) {
                return true;
            }
            return false;
        };
        Conference.prototype.getConfInfo = function (callback) {
            var evt = { result: true, info: "" };
            var info = {
                mediaType: this.mediaType,
                hostKey: this.mediaType,
                subject: this.mediaType,
                createor: this.createor,
                isAllMute: this.isAllMute,
                lockState: this.lockState,
            };
            evt.info = info;
            callback(evt);
        };
        Conference.prototype.getAttendeeListNumber = function () {
            var attendeeNum = 0;
            for (var i = 0; i < this.attendeeList.length; i++) {
                if (this.attendeeList[i].name != "") {
                    attendeeNum = attendeeNum + 1;
                }
            }
            return attendeeNum;
        };
        Conference.prototype.setCallId = function (callid) {
            this.callId = callid;
        };
        Conference.prototype.getAttendeeList = function (callback) {
            var evt = { result: true, info: "" };
            if (util.isUndefined(callback) || !util.isFunction(callback)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(300000000, 300000002, "callback");
                client_1.default.notifyErr(err);
                return;
            }
            if (this.attendeeList == null) {
                this.attendeeList = new Array();
            }
            evt.info = this.attendeeList;
            callback(evt);
        };
        Conference.prototype.addAttendeeList = function (attendee) {
            if (this.attendeeList == null) {
                this.attendeeList = new Array();
            }
            var flagData = this.attendeeList.find(function (value) {
                return attendee.number == value.number;
            });
            if (flagData != undefined && flagData.name == "") {
                var attendeeTemp = {
                    participantId: attendee.participantId,
                    name: attendee.name,
                    number: attendee.number,
                    isMute: attendee.isMute,
                    isDeaf: attendee.isDeaf,
                    raiseHandState: attendee.raiseHandState,
                    role: attendee.role,
                    joinState: attendee.joinState,
                    isSelf: attendee.isSelf,
                    isDataconfMember: flagData.isDataconfMember,
                    dataconfUserId: flagData.dataconfUserId,
                    dataconfMemberType: flagData.dataconfMemberType,
                    sharingPermit: attendee.sharingPermit,
                    isBroadcast: attendee.isBroadcast
                };
                this.updateAttendeeList(attendeeTemp);
            }
            else if (flagData != undefined && flagData.name != "") {
                var attendeeTemp = {
                    participantId: flagData.participantId,
                    name: flagData.name,
                    number: flagData.number,
                    isMute: flagData.isMute,
                    isDeaf: flagData.isDeaf,
                    raiseHandState: flagData.raiseHandState,
                    role: flagData.role,
                    joinState: flagData.joinState,
                    isSelf: flagData.isSelf,
                    isDataconfMember: attendee.isDataconfMember,
                    dataconfUserId: attendee.dataconfUserId,
                    dataconfMemberType: attendee.dataconfMemberType,
                    sharingPermit: flagData.sharingPermit,
                    isBroadcast: flagData.isBroadcast
                };
                this.updateAttendeeList(attendeeTemp);
            }
            else {
                this.attendeeList.push(attendee);
            }
        };
        Conference.prototype.updateAttendeeList = function (attendee) {
            if (this.attendeeList == null) {
                this.attendeeList = new Array();
            }
            for (var i = 0; i < this.attendeeList.length; i++) {
                if (this.attendeeList[i].number == attendee.number) {
                    this.attendeeList.splice(i, 1, attendee);
                    break;
                }
            }
        };
        Conference.prototype.deleteAttendeeList = function (attendee) {
            var evt = { result: true, info: "" };
            for (var i = 0; i < this.attendeeList.length; i++) {
                if (this.attendeeList[i].number == attendee.number) {
                    this.attendeeList.splice(i, 1);
                    evt = { result: false, info: "Participant deleted successfully" };
                    break;
                }
                else {
                    evt = { result: false, info: "execution failed" };
                }
            }
        };
        Conference.prototype.addWbInfoList = function (wbInfo) {
            if (this.wbInfoList == null) {
                this.wbInfoList = new Array();
            }
            this.wbInfoList.push(wbInfo);
        };
        Conference.prototype.updateWbInfoList = function (wbInfo) {
            if (this.wbInfoList == null) {
                this.wbInfoList = new Array();
                this.wbInfoList.push(wbInfo);
            }
            else {
                for (var i = 0; i < this.wbInfoList.length; i++) {
                    if (this.wbInfoList[i].number == wbInfo.number) {
                        this.wbInfoList.splice(i, 1, wbInfo);
                        break;
                    }
                }
            }
        };
        Conference.prototype.deleteWbInfoList = function (wbInfo) {
            var evt = { result: true, info: "" };
            for (var i = 0; i < this.wbInfoList.length; i++) {
                if (this.wbInfoList[i].number == wbInfo.number) {
                    this.wbInfoList.splice(i, 1);
                    evt = { result: false, info: "Participant deleted successfully" };
                    break;
                }
                else {
                    evt = { result: false, info: "execution failed" };
                }
            }
            return evt;
        };
        Conference.prototype.getWbInfoList = function () {
            return this.wbInfoList;
        };
        Conference.prototype.getAnnoidType = function () {
            return this.annoidType;
        };
        Conference.prototype.getPoint = function () {
            return this.canvasPoint;
        };
        Conference.prototype.getConfHandle = function () {
            return this.confHandle;
        };
        Conference.prototype.getDataConfHandle = function () {
            return this.dataConfHandle;
        };
        Conference.prototype.addAttendee = function (attendees) {
            if (util.isUndefined(attendees) || attendees.length === 0) {
                var err = errorCode_1.EC_SDK_ERROR.CONF_PARAM_INVALID_ERROR("attendees");
                client_1.default.notifyErr(err);
                return;
            }
            for (var i = 0; i < attendees.length; i++) {
                if (!util.isValidAttendeeParam(attendees[i])) {
                    var err = errorCode_1.EC_SDK_ERROR.CONF_PARAM_INVALID_ERROR("attendees");
                    client_1.default.notifyErr(err);
                    return;
                }
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_ADD_ATTENDEE, attendees, this.confHandle);
        };
        Conference.prototype.delAttendee = function (attendee) {
            if (util.isUndefined(attendee) || util.isNull(attendee)) {
                var err = errorCode_1.EC_SDK_ERROR.CONF_PARAM_INVALID_ERROR("attendee");
                client_1.default.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_DEL_ATTENDEE, attendee, this.confHandle, this.attendeeList);
        };
        Conference.prototype.muteConference = function (mute) {
            if (mute) {
                dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_MUTE_CONF, this.confHandle, 1);
            }
            else {
                dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_MUTE_CONF, this.confHandle, 0);
            }
            if (serverConfig_1.CloudEC_SERVERCONFIG.CONF_CONTROL_PROTOCOL == 1) {
                this.isAllMute = mute ? 1 : 0;
            }
        };
        Conference.prototype.muteAttendee = function (attendee, mute) {
            if (util.isUndefined(attendee) || util.isNull(attendee)) {
                var err = errorCode_1.EC_SDK_ERROR.CONF_PARAM_INVALID_ERROR("attendee");
                client_1.default.notifyErr(err);
                return;
            }
            if (mute) {
                dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_MUTE_ATTENDEE, this.confHandle, { number: attendee }, 1);
            }
            else {
                dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_MUTE_ATTENDEE, this.confHandle, { number: attendee }, 0);
            }
        };
        Conference.prototype.requestChairman = function (chairmanPwd) {
            if (util.isUndefined(chairmanPwd)) {
                var err = errorCode_1.EC_SDK_ERROR.CONF_PARAM_INVALID_ERROR("chairmanPwd");
                client_1.default.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_REQUEST_CHAIRMAN, this.confHandle, this.dataConfHandle, this.confId, this.hostKey, this.attendeeList, chairmanPwd);
        };
        Conference.prototype.releaseChairman = function () {
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_RELEASE_CHAIRMAN, this.confHandle, this.dataConfHandle, this.attendeeList);
        };
        Conference.prototype.postponeConf = function () { };
        Conference.prototype.handup = function (attendee) {
            if (util.isUndefined(attendee) || util.isNull(attendee)) {
                var err = errorCode_1.EC_SDK_ERROR.CONF_PARAM_INVALID_ERROR("attendee");
                client_1.default.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_HAND_UP, this.confHandle, attendee, this.attendeeList);
        };
        Conference.prototype.leaveConf = function () {
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_LEAVE_CONF, this.confHandle, this.dataConfHandle, this.attendeeList);
        };
        Conference.prototype.endConf = function () {
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_END_CONF, this.confHandle, this.dataConfHandle, this.attendeeList);
        };
        Conference.prototype.broadcastAttendee = function (isBroad, attendee) {
            if (util.isUndefined(attendee)) {
                var err = errorCode_1.EC_SDK_ERROR.CONF_PARAM_INVALID_ERROR("attendee");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(isBroad) || !util.isBinaryNumber(isBroad)) {
                var err = errorCode_1.EC_SDK_ERROR.CONF_PARAM_INVALID_ERROR("isBroad");
                client_1.default.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_BROADCAST_ATTENDEE, this.confHandle, isBroad, { number: attendee }, function (data) {
                if (data.result && 1 == data.info.type) {
                }
                else if (!data.result && 1 == data.info.type) {
                    client_1.default.notifyErr(data.info.description);
                }
                else if (!data.result && 0 == data.info.type) {
                }
                else {
                    client_1.default.notifyErr(data.info.description);
                }
            });
        };
        Conference.prototype.watchAttendee = function (attendee) {
            if (util.isUndefined(attendee)) {
                var err = errorCode_1.EC_SDK_ERROR.CONF_PARAM_INVALID_ERROR("attendee");
                client_1.default.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_WATCH_ATTENDEE, this.confHandle, { number: attendee });
        };
        Conference.prototype.startScreenSharing = function (userid, extensions) {
            var err = { cmdId: 0, errorCode: 490000001, errorInfo: "parameter error" };
            var evt = { result: false, info: err };
            if (!util.isInteger(userid)) {
                client_1.default.notifyErr(evt);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_AS_SET_OWNER, this.dataConfHandle, 1, userid);
        };
        Conference.prototype.stopScreenSharing = function (userid) {
            var err = { cmdId: 0, errorCode: 490000001, errorInfo: "parameter error" };
            var evt = { result: false, info: err };
            if (!util.isInteger(userid)) {
                client_1.default.notifyErr(evt);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_AS_STOP, this.dataConfHandle);
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_AS_SET_OWNER, this.dataConfHandle, 0, userid);
            var attendee = this.attendeeList.find(function (value) {
                return userid === value.dataconfUserId;
            });
            if (attendee != undefined) {
                attendee.sharingPermit = 0;
                this.updateAttendeeList(attendee);
            }
        };
        Conference.prototype.createWhiteBoard = function () {
            var _this = this;
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_WB_CREATE, this.dataConfHandle);
            setTimeout(function () {
                _this.meetingWhiteboard();
                _this.annotationSwitch(6);
            }, 2000);
        };
        Conference.prototype.deleleWhiteBorad = function () {
            var docid = this.wbInfoList[0].docid;
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_WB_DELETE, this.dataConfHandle, docid);
        };
        Conference.prototype.requestRemoteCtrl = function (privilege) {
            if (!util.isIntegerRange(privilege, 1, 2)) {
                var err = errorCode_1.EC_SDK_ERROR.CONF_PARAM_INVALID_ERROR("privilege");
                client_1.default.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_REQUEST_PRIVILEGE, this.dataConfHandle, privilege);
        };
        Conference.prototype.setRemoteCtrl = function (privilege, action, userid) {
            if (!util.isInteger(userid)) {
                var err = errorCode_1.EC_SDK_ERROR.CONF_PARAM_INVALID_ERROR("userid");
                client_1.default.notifyErr(err);
                return;
            }
            if (!util.isIntegerRange(privilege, 1, 2)) {
                var err = errorCode_1.EC_SDK_ERROR.CONF_PARAM_INVALID_ERROR("privilege");
                client_1.default.notifyErr(err);
                return;
            }
            if (!util.isIntegerRange(action, 0, 4)) {
                var err = errorCode_1.EC_SDK_ERROR.CONF_PARAM_INVALID_ERROR("action");
                client_1.default.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_SET_PRIVILEGE, this.dataConfHandle, privilege, action, userid);
        };
        Conference.prototype.answerRemoteCtrl = function (userid, accept) {
            if (!util.isInteger(userid)) {
                var err = errorCode_1.EC_SDK_ERROR.CONF_PARAM_INVALID_ERROR("userid");
                client_1.default.notifyErr(err);
                return;
            }
            if (accept) {
                dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_SET_PRIVILEGE, this.dataConfHandle, 1, 1, userid);
            }
            else {
                dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_SET_PRIVILEGE, this.dataConfHandle, 1, 4, userid);
            }
        };
        Conference.prototype.annotationSwitch = function (annotationType) {
            var annoidType = {
                operationIndex: 0,
                subtype: 0,
                meetingtype: 0,
                ciid: 0,
                localIndex: 0
            };
            switch (annotationType) {
                case 0:
                    annoidType = {
                        operationIndex: 0,
                        subtype: 0,
                        meetingtype: 0,
                        ciid: 512,
                        localIndex: 0
                    };
                    this.annoidType = annoidType;
                    break;
                case 1:
                    annoidType = {
                        operationIndex: 1,
                        subtype: 0,
                        meetingtype: 0,
                        ciid: 512,
                        localIndex: 0
                    };
                    this.annoidType = annoidType;
                    break;
                case 2:
                    annoidType = {
                        operationIndex: 2,
                        subtype: 0,
                        meetingtype: 0,
                        ciid: 512,
                        localIndex: 0
                    };
                    this.annoidType = annoidType;
                    break;
                case 3:
                    annoidType = {
                        operationIndex: 3,
                        subtype: 0,
                        meetingtype: 0,
                        ciid: 512,
                        localIndex: 0
                    };
                    this.annoidType = annoidType;
                    break;
                case 4:
                    annoidType = {
                        operationIndex: 4,
                        subtype: 0,
                        meetingtype: 0,
                        ciid: 512,
                        localIndex: 0
                    };
                    this.annoidType = annoidType;
                    break;
                case 5:
                    annoidType = {
                        operationIndex: 5,
                        subtype: 1,
                        meetingtype: 12,
                        ciid: 512,
                        localIndex: 0
                    };
                    this.annoidType = annoidType;
                    break;
                case 6:
                    annoidType = {
                        operationIndex: 6,
                        subtype: 2,
                        meetingtype: 12,
                        ciid: 512,
                        localIndex: 0
                    };
                    this.annoidType = annoidType;
                    break;
                case 7:
                    annoidType = {
                        operationIndex: 7,
                        subtype: 3,
                        meetingtype: 12,
                        ciid: 512,
                        localIndex: 0
                    };
                    this.annoidType = annoidType;
                    break;
                case 8:
                    annoidType = {
                        operationIndex: 8,
                        subtype: 4,
                        meetingtype: 12,
                        ciid: 512,
                        localIndex: 0
                    };
                    this.annoidType = annoidType;
                    break;
                case 9:
                    annoidType = {
                        operationIndex: 9,
                        subtype: 10,
                        meetingtype: 12,
                        ciid: 512,
                        localIndex: 0
                    };
                    this.annoidType = annoidType;
                    break;
                case 10:
                    annoidType = {
                        operationIndex: 10,
                        subtype: 11,
                        meetingtype: 12,
                        ciid: 512,
                        localIndex: 0
                    };
                    this.annoidType = annoidType;
                    break;
                case 11:
                    annoidType = {
                        operationIndex: 11,
                        subtype: 12,
                        meetingtype: 12,
                        ciid: 512,
                        localIndex: 0
                    };
                    this.annoidType = annoidType;
                    break;
                case 12:
                    annoidType = {
                        operationIndex: 12,
                        subtype: 1,
                        meetingtype: 13,
                        ciid: 512,
                        localIndex: 0
                    };
                    this.annoidType = annoidType;
                    break;
                case 13:
                    annoidType = {
                        operationIndex: 13,
                        subtype: 1,
                        meetingtype: 13,
                        ciid: 512,
                        localIndex: 1
                    };
                    this.annoidType = annoidType;
                    break;
                case 14:
                    annoidType = {
                        operationIndex: 14,
                        subtype: 2,
                        meetingtype: 13,
                        ciid: 512,
                        localIndex: 2
                    };
                    this.annoidType = annoidType;
                    break;
                case 15:
                    annoidType = {
                        operationIndex: 15,
                        subtype: 2,
                        meetingtype: 13,
                        ciid: 512,
                        localIndex: 3
                    };
                    this.annoidType = annoidType;
                    break;
                case 16:
                    annoidType = {
                        operationIndex: 16,
                        subtype: 2,
                        meetingtype: 13,
                        ciid: 512,
                        localIndex: 4
                    };
                    this.annoidType = annoidType;
                    break;
                case 17:
                    if (this.annoidType.operationIndex == 17) {
                    }
                    else {
                        annoidType = {
                            operationIndex: 17,
                            subtype: 0,
                            meetingtype: 0,
                            ciid: 512,
                            localIndex: 0
                        };
                        this.annoidType = annoidType;
                    }
                    break;
                case 18:
                    annoidType = {
                        operationIndex: 18,
                        subtype: 2,
                        meetingtype: 13,
                        ciid: 512,
                        localIndex: 5
                    };
                    this.annoidType = annoidType;
                    break;
                case 20:
                    annoidType = {
                        operationIndex: 20,
                        subtype: 0,
                        meetingtype: 0,
                        ciid: 512,
                        localIndex: 0
                    };
                    this.annoidType = annoidType;
                    break;
                case 21:
                    annoidType = {
                        operationIndex: 21,
                        subtype: 0,
                        meetingtype: 0,
                        ciid: 512,
                        localIndex: 0
                    };
                    this.annoidType = annoidType;
                    dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_AT_SET_SELECT, this.dataConfHandle, 0, this.annoidType.ciid, [this.annoid], this.wbInfoList[0].docid, this.wbInfoList[0].currentPage);
                    break;
            }
        };
        Conference.prototype.diag = function (pString) {
            var str = prompt("enter the contents", pString);
            if (str) {
                return str;
            }
        };
        Conference.prototype.removeCtrlMsg = function (isRemoveCtrl) {
            var _this = this;
            var canvas = document.getElementById("CloudEC:dataCanvas");
            if (isRemoveCtrl == 1) {
                canvas.onmousedown = function (e) {
                    var x = e.pageX, y = e.pageY, left = canvas.offsetLeft, top = canvas.offsetTop, canvasX = (x - left), canvasY = (y - top);
                    var btnNum = e.button != 0 ? e.button : e.buttons;
                    if (btnNum == 1) {
                        dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_KEYBOARD_INPUT, _this.dataConfHandle, 513, 0, 0, { "x": canvasX, "y": canvasY });
                    }
                    else if (btnNum == 2) {
                        dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_KEYBOARD_INPUT, _this.dataConfHandle, 516, 0, 0, { "x": canvasX, "y": canvasY });
                    }
                    document.onmousemove = function (e) {
                        var x = e.pageX, y = e.pageY, canvasX = (x - left), canvasY = (y - top);
                        dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_KEYBOARD_INPUT, _this.dataConfHandle, 512, 0, 0, { "x": canvasX, "y": canvasY });
                    };
                    document.onmouseup = function (e) {
                        var x = e.pageX, y = e.pageY, canvasX = (x - left), canvasY = (y - top);
                        if (btnNum == 1) {
                            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_KEYBOARD_INPUT, _this.dataConfHandle, 514, 0, 0, { "x": canvasX, "y": canvasY });
                        }
                        else if (btnNum == 2) {
                            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_KEYBOARD_INPUT, _this.dataConfHandle, 517, 0, 0, { "x": canvasX, "y": canvasY });
                        }
                    };
                };
            }
            else {
                canvas.onmousedown = function (e) { };
            }
        };
        Conference.prototype.meetingWhiteboard = function () {
            var _this = this;
            var canvas = document.getElementById("CloudEC:dataWBCanvas");
            canvas.onmousedown = function (e) {
                var x = e.pageX, y = e.pageY, left = canvas.offsetLeft, top = canvas.offsetTop, canvasX = (x - left) * 15, canvasY = (y - top) * 15;
                _this.canvasPoint = {
                    x: canvasX,
                    y: canvasY
                };
                if (_this.annoidType.operationIndex == 1) {
                    var pString = _this.diag("");
                    var pInfo = {
                        "bounds": {
                            "left": canvasX,
                            "top": canvasY,
                            "right": canvasX + 1500,
                            "bottom": canvasY + 300
                        },
                        "pString": pString,
                        "pFont": "宋体",
                        "color": 255,
                        "size": 240,
                        "reserve": 0
                    };
                    dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_AT_TEXT_CREATE, _this.dataConfHandle, pInfo, 0, _this.wbInfoList[0].docid, _this.wbInfoList[0].currentPage, _this.annoidType.ciid);
                }
                else if (_this.annoidType.operationIndex == 2) {
                    dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_AT_HITTEST, _this.dataConfHandle, { "x": canvasX, "y": canvasY }, 0, _this.wbInfoList[0].docid, _this.wbInfoList[0].currentPage, _this.annoidType.ciid);
                }
                else if (_this.annoidType.operationIndex == 3) {
                    dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_AT_HITTEST, _this.dataConfHandle, { "x": canvasX, "y": canvasY }, 0, _this.wbInfoList[0].docid, _this.wbInfoList[0].currentPage, _this.annoidType.ciid);
                }
                else if (_this.annoidType.operationIndex == 4) {
                    dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_AT_HITTEST, _this.dataConfHandle, { "x": canvasX, "y": canvasY }, 0, _this.wbInfoList[0].docid, _this.wbInfoList[0].currentPage, _this.annoidType.ciid);
                }
                else if (_this.annoidType.operationIndex >= 5 && _this.annoidType.operationIndex <= 11) {
                    util_1.default.debug("conference", "Starting coordinate:X " + canvasX + "Y: " + canvasY);
                    dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_AT_CREATE_START, { "x": canvasX, "y": canvasY }, _this.annoidType.subtype, _this.annoidType.ciid, _this.annoidType.meetingtype, _this.dataConfHandle, _this.wbInfoList[0].docid, _this.wbInfoList[0].currentPage);
                }
                else if (_this.annoidType.operationIndex >= 12 && _this.annoidType.operationIndex <= 16) {
                    dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_AT_CREATE_START, { "x": canvasX, "y": canvasY }, _this.annoidType.subtype, _this.annoidType.ciid, _this.annoidType.meetingtype, _this.dataConfHandle, _this.wbInfoList[0].docid, _this.wbInfoList[0].currentPage);
                }
                else if (_this.annoidType.operationIndex == 17) {
                    dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_AT_LASERPOINTER_START, _this.dataConfHandle, 0, 6, { "x": canvasX, "y": canvasY }, 0, 0, 0, 0, 1, _this.annoidType.ciid, { "cx": 28 * 15, "cy": 28 * 15 });
                }
                else if (_this.annoidType.operationIndex == 20) {
                    dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_AT_EDIT_START, _this.dataConfHandle, _this.annoid, 6, _this.wbInfoList[0].docid, _this.wbInfoList[0].currentPage, _this.annoidType.ciid, _this.canvasPoint, _this.annoid);
                }
                document.onmousemove = function (e) {
                    var x = e.pageX, y = e.pageY, canvasX = (x - left), canvasY = (y - top);
                    if (_this.annoidType.operationIndex == 3) {
                    }
                    else if (_this.annoidType.operationIndex >= 12 && _this.annoidType.operationIndex <= 16) {
                        var pdata = {
                            "bLocal": 1,
                            "localIndex": _this.annoidType.localIndex,
                            "dispRect": {
                                "left": canvasX * 15,
                                "top": canvasY * 15,
                                "right": (canvasX + 28) * 15,
                                "bottom": (canvasY + 28) * 15
                            }
                        };
                        dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_AT_CUSTOMER_UPDATE, _this.dataConfHandle, _this.annoidType.ciid, pdata);
                    }
                    else if (_this.annoidType.operationIndex >= 5 && _this.annoidType.operationIndex <= 11) {
                        var pdata = {
                            "x": canvasX * 15,
                            "y": canvasY * 15
                        };
                        dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_AT_DRAWING_UPDATE, _this.dataConfHandle, _this.annoidType.ciid, pdata);
                    }
                    else if (_this.annoidType.operationIndex == 17) {
                        var pdata = {
                            "x": canvasX * 15,
                            "y": canvasY * 15
                        };
                        dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_AT_LASERPOINTER_MOVETO, _this.dataConfHandle, _this.annoidType.ciid, pdata);
                    }
                    else if (_this.annoidType.operationIndex == 20) {
                        var pdata = {
                            "x": canvasX * 15,
                            "y": canvasY * 15
                        };
                        dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_AT_EDIT_UPDATE, _this.dataConfHandle, _this.annoidType.ciid, pdata);
                    }
                };
                document.onmouseup = function (e) {
                    var t = e.target;
                    if (t == canvas) {
                        if (_this.annoidType.operationIndex >= 5 && _this.annoidType.operationIndex <= 16) {
                            util_1.default.debug("conference", "End drawing");
                            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_AT_CREATE_DONE, _this.dataConfHandle, 0, _this.annoidType.ciid, false);
                        }
                        else if (_this.annoidType.operationIndex == 17) {
                            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_AT_LASERPOINTER_STOP, _this.dataConfHandle, _this.annoidType.ciid);
                        }
                        else if (_this.annoidType.operationIndex == 3) {
                        }
                        else if (_this.annoidType.operationIndex == 20) {
                            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_AT_EDIT_DONE, _this.dataConfHandle, _this.annoidType.ciid, false);
                        }
                    }
                    document.onmousemove = function (e) { };
                };
            };
        };
        Conference.prototype.enableAnnotation = function () { };
        Conference.prototype.disableAnnotation = function () { };
        Conference.prototype.setConfMode = function (mode) {
            if (!util.isIntegerRange(mode, 0, 2)) {
                var err = errorCode_1.EC_SDK_ERROR.CONF_PARAM_INVALID_ERROR("mode");
                client_1.default.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_SET_CONFMODE, this.confHandle, mode);
        };
        Conference.prototype.setConfMixedPicture = function (imageType, attendees) {
            if (!util.isIntegerRange(imageType, 0, 9) || imageType == 5 || imageType == 7 || imageType == 8) {
                var err = errorCode_1.EC_SDK_ERROR.CONF_PARAM_INVALID_ERROR("imageType");
                client_1.default.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_SET_CONF_MIXED_PICTURE, this.confHandle, 0, imageType, attendees);
        };
        Conference.prototype.sendMessage = function (messageParam) {
            var err = { cmdId: 400000000, errorCode: 490000001, errorInfo: "parameter error" };
            var evt = { result: false, info: err };
            if (util.isUndefined(messageParam)) {
                var errorInfo = errorCode_1.EC_SDK_ERROR.CONF_PARAM_INVALID_ERROR("messageParam");
                client_1.default.notifyErr(errorInfo);
                return;
            }
            if (util.isUndefined(messageParam.msgType) || util.isUndefined(messageParam.msgContent) || !util.isInteger(messageParam.receiveID)) {
                var errorInfo = errorCode_1.EC_SDK_ERROR.CONF_PARAM_INVALID_ERROR("msgType ,msgContent or receiveID");
                client_1.default.notifyErr(errorInfo);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_SEND_MSG, this.dataConfHandle, messageParam);
        };
        Conference.prototype.answerConference = function (accept) {
            var err = { cmdId: 0, errorCode: 400000001, errorInfo: "parameter error" };
            var evt = { result: false, info: err };
            if (accept) {
                dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_ACCEPT_CONF, this.confHandle, this.mediaType, function (ret) {
                    util_1.default.debug("conference", "accept conference result result= " + JSON.stringify(ret));
                });
            }
            else {
                dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_REJECT_CONF, this.confHandle, function (ret) {
                    util_1.default.debug("conference", "reject conference result result= " + JSON.stringify(ret));
                });
            }
        };
        Conference.prototype.answerScreenSharing = function (accept) {
            var dataconfUserId = 0;
            if (accept) {
                for (var i = 0; i < this.attendeeList.length; i++) {
                    if (1 == this.attendeeList[i].isSelf) {
                        dataconfUserId = this.attendeeList[i].dataconfUserId;
                    }
                }
                dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_AS_SET_OWNER, this.dataConfHandle, 1, dataconfUserId);
            }
            else {
                util_1.default.debug("conference", "Share invitation is rejected");
            }
        };
        Conference.prototype.videoRenderCtrl = function (enableFlag) {
            util_1.default.info("conference", "videoRenderCtrl = " + enableFlag);
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_ENABLE_RENDER, enableFlag);
        };
        Conference.prototype.setCanvasSize = function (canvasParam) {
            var err = { cmdId: 0, errorCode: 400000001, errorInfo: "parameter error" };
            var evt = { result: false, info: err };
            var canvasNum = canvasParam.canvasNum;
            var width = canvasParam.width;
            var height = canvasParam.height;
            if (!util.isInteger(canvasNum) || !util.isInteger(width) || !util.isInteger(height)) {
                client_1.default.notifyErr(errorCode_1.EC_SDK_ERROR.DATACONF_PARAM_TYPE_ERROR("canvasNum ,width or height"));
                return;
            }
            if (canvasNum > 4 || canvasNum < 0) {
                client_1.default.notifyErr(errorCode_1.EC_SDK_ERROR.DATACONF_PARAM_TYPE_ERROR("canvasNum"));
                return;
            }
            if (canvasNum == 1) {
                if (width > 480 || height > 352) {
                    width = 480;
                    height = 352;
                }
            }
            else {
                if (width > 1280 || height > 720) {
                    width = 1280;
                    height = 720;
                }
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_SET_CANVAS_SIZE, this.dataConfHandle, canvasNum, width, height);
        };
        Conference.prototype.setDropFrame = function (count) {
            if (!util.isInteger(count)) {
                var err = errorCode_1.EC_SDK_ERROR.CONF_PARAM_INVALID_ERROR("count");
                client_1.default.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_SET_DROP_FRAME, count);
        };
        Conference.prototype.videoReconnect = function () {
            var localView = document.getElementById("CloudEC:localCanvas");
            var remoteView = document.getElementById("CloudEC:remoteCanvas");
            if ((typeof localView === "undefined") || (typeof remoteView === "undefined")) {
                util_1.default.error("conference", "can't find CloudEC:remoteCanvas and CloudEC:localCanvas");
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_CONF_VIDEO_RECONNECT, localView, remoteView);
        };
        return Conference;
    }());
    exports.default = Conference;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 377 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(12), __webpack_require__(13), __webpack_require__(24), __webpack_require__(23), __webpack_require__(1), __webpack_require__(11), __webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, dispatcher_1, eventInfo_1, errorCode_1, client_1, util, enum_1, util_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Device = (function () {
        function Device() {
        }
        Device.prototype.getMediaDevice = function (deviceType, callback) {
            util_1.default.info("device", "step in getMediaDevice");
            if (util.isUndefined(deviceType) || !util.isIntegerRange(deviceType, 0, 2)) {
                var err = errorCode_1.EC_SDK_ERROR.CALL_PARAM_INVALID_ERROR("deviceType");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(callback) || !util.isFunction(callback)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(200000000, 200000003, "callback");
                client_1.default.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_DEVC_GET_MEDIA_DEVICE, deviceType, function (ret) {
                callback(ret);
            });
        };
        Device.prototype.setMediaDevice = function (deviceType, index) {
            if (util.isUndefined(deviceType) || !util.isIntegerRange(deviceType, 0, 2)) {
                var err = errorCode_1.EC_SDK_ERROR.CALL_PARAM_INVALID_ERROR("deviceType");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(deviceType) || !util.isInteger(index)) {
                var err = errorCode_1.EC_SDK_ERROR.CALL_PARAM_INVALID_ERROR("index");
                client_1.default.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_DEVC_SET_MEDIA_DEVICE, deviceType, index, function (ret) {
                if (ret.result == true) {
                    if (deviceType == enum_1.MediaDevice.MICROPHONE) {
                        Device.MICINDEX = index;
                    }
                    if (deviceType == enum_1.MediaDevice.SPEAKER) {
                        Device.SPKINDEX = index;
                    }
                    if (deviceType == enum_1.MediaDevice.CAMERA) {
                        Device.VIDEOINDEX = index;
                    }
                }
            });
        };
        Device.getVideoIndex = function () {
            return Device.VIDEOINDEX;
        };
        Device.getMicIndex = function () {
            return Device.MICINDEX;
        };
        Device.getSpeakerIndex = function () {
            return Device.SPKINDEX;
        };
        Device.prototype.setVoiceVol = function (deviceType, value) {
            if (util.isUndefined(deviceType) || !util.isIntegerRange(deviceType, 0, 1)) {
                var err = errorCode_1.EC_SDK_ERROR.CALL_PARAM_INVALID_ERROR("deviceType");
                client_1.default.notifyErr(err);
                return;
            }
            if (!util.isInteger(value)) {
                var err = errorCode_1.EC_SDK_ERROR.CALL_PARAM_INVALID_ERROR("index");
                client_1.default.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_DEVC_SET_VOICE, deviceType, value);
        };
        Device.prototype.getVoiceVol = function (deviceType, callback) {
            if (util.isUndefined(deviceType) || !util.isIntegerRange(deviceType, 0, 1)) {
                var err = errorCode_1.EC_SDK_ERROR.CALL_PARAM_INVALID_ERROR("deviceType");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(callback) || !util.isFunction(callback)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(200000000, 200000003, "callback");
                client_1.default.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_DEVC_GET_VOICE, deviceType, function (ret) {
                callback(ret);
            });
        };
        Device._listeners = {};
        Device.VIDEOINDEX = 0;
        Device.MICINDEX = 0;
        Device.SPKINDEX = 0;
        return Device;
    }());
    exports.default = Device;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 378 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(12), __webpack_require__(13), __webpack_require__(24), __webpack_require__(23), __webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, dispatcher_1, eventInfo_1, errorCode_1, client_1, util) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Eaddr = (function () {
        function Eaddr() {
        }
        Eaddr.prototype.searchUserInfo = function (queryParam, callback) {
            if (util.isUndefined(queryParam) || !util.isBinaryNumber(queryParam.searchType)
                || util.isUndefined(queryParam.pageIndex) || !util.isInteger(queryParam.pageIndex)) {
                var err = errorCode_1.EC_SDK_ERROR.EADDR_PARAM_INVALID_ERROR("queryParam");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(callback) || !util.isFunction(callback)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(600000000, 600000002, "callback");
                client_1.default.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_EADDR_SEARCH_USER, queryParam, function (ret) {
                if (ret.result) {
                    var user_list = [];
                    var user_list_info = ret.info.param.entry;
                    for (var m in user_list_info) {
                        var obj = {
                            name: user_list_info[m].name,
                            staffNo: user_list_info[m].staffno,
                            gender: user_list_info[m].gender,
                            ucAccount: user_list_info[m].ucaccount,
                            deptName: user_list_info[m].deptname,
                            position: user_list_info[m].position,
                            mobile: user_list_info[m].mobile,
                            homePhone: user_list_info[m].homephone,
                            officePhone: user_list_info[m].officephone,
                            officePhone2: user_list_info[m].officephone2,
                            otherPhone: user_list_info[m].otherphone,
                            otherPhone2: user_list_info[m].otherphone2,
                            espaceNumber: user_list_info[m].espacenumber,
                            fax: user_list_info[m].fax,
                            zipCode: user_list_info[m].zipcode,
                            email: user_list_info[m].email,
                            address: user_list_info[m].address,
                            signature: user_list_info[m].signature,
                            website: user_list_info[m].website,
                            headId: user_list_info[m]["head-id"]
                        };
                        user_list[m] = obj;
                    }
                    callback({ result: true, info: user_list });
                }
                else {
                    callback(ret);
                }
            });
        };
        Eaddr.prototype.searchDeptInfo = function (deptId, callback) {
            if (util.isUndefined(deptId)) {
                var err = errorCode_1.EC_SDK_ERROR.EADDR_PARAM_INVALID_ERROR("deptId");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(callback) || !util.isFunction(callback)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(600000000, 600000002, "callback");
                client_1.default.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_EADDR_SEARCH_DEPT, deptId, function (ret) {
                if (ret.result) {
                    callback({ result: true, info: ret.info.param.entry });
                }
                else {
                    callback(ret);
                }
            });
        };
        return Eaddr;
    }());
    exports.default = Eaddr;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 379 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(12), __webpack_require__(13), __webpack_require__(24), __webpack_require__(23), __webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, dispatcher_1, eventInfo_1, errorCode_1, client_1, util) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Contact = (function () {
        function Contact() {
        }
        Contact.prototype.getContactlist = function (isSyncAll, timestamp, callback) {
            if (util.isUndefined(isSyncAll) || !util.isBoolean(isSyncAll)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "isSyncAll");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(timestamp) || util.isNull(timestamp)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "timestamp");
                client_1.default.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_IM_GET_CONTACT_LIST, isSyncAll ? 1 : 0, timestamp, function (data) {
                if (data.result == 0) {
                    var userContactInfo = void 0;
                    var myUserLists = new Array();
                    var imGroup = void 0;
                    var imGroupList = new Array();
                    var imGroupResult = data.param.im_group_list;
                    var userGroup = void 0;
                    var userGroupList = new Array();
                    var userGroupResult = data.param.user_group_list;
                    var userGroupMember = void 0;
                    var userGroupMemberList = new Array();
                    var constantInfoResult = void 0;
                    var userListResult = data.param.user_list;
                    var userGroupMemberListResult_1 = data.param.user_group_member_list;
                    var contactListResult_1 = data.param.contact_list;
                    var evt = { result: true, info: "" };
                    for (var i = 0; (imGroupResult != null) && i < imGroupResult.length; i++) {
                        imGroup = {
                            id: imGroupResult[i].id,
                            name: imGroupResult[i].name,
                            owner: imGroupResult[i].owner,
                            singleFileSpace: imGroupResult[i].single_file_space,
                            state: imGroupResult[i].state,
                            capacity: imGroupResult[i].capacity,
                            desc: imGroupResult[i].desc,
                            fixDiscuss: imGroupResult[i].fix_discuss,
                            groupType: imGroupResult[i].group_type,
                            isInitGroupName: imGroupResult[i].is_init_group_name,
                            jointFlag: imGroupResult[i].joint_flag,
                            manifesto: imGroupResult[i].manifesto,
                            msgPolicyType: imGroupResult[i].msg_policy_type,
                            extensions: "",
                        };
                        imGroupList.push(imGroup);
                    }
                    for (var i = 0; (userGroupResult != null) && i < userGroupResult.length; i++) {
                        userGroup = {
                            id: userGroupResult[i].id,
                            index: userGroupResult[i].index,
                            name: userGroupResult[i].name,
                            state: userGroupResult[i].state,
                            extensions: "",
                        };
                        userGroupList.push(userGroup);
                    }
                    var objUserList = new Array();
                    var objContactList = new Array();
                    var _loop_1 = function (i) {
                        var flag = void 0;
                        flag = userListResult.find(function (value) {
                            return value.staff_id === contactListResult_1[i].staff_id;
                        });
                        if (flag != undefined) {
                            var userInfo = {
                                staffID: flag.staff_id,
                                account: flag.account,
                                staffNO: flag.staff_no,
                                name: flag.name,
                                nativeName: flag.native_name,
                                qPinYin: flag.q_pin_yin,
                                gender: flag.gender,
                                birthday: flag.birthday,
                                age: flag.age,
                                bindNO: flag.bind_no,
                                mobile: flag.mobile,
                                homePhone: flag.home_phone,
                                officePhone: flag.office_phone,
                                shortPhone: flag.short_phone,
                                otherPhone: flag.other_phone,
                                voip: flag.voip,
                                ipPhone: flag.ip_phone,
                                fax: flag.fax,
                                email: flag.email,
                                webSite: flag.website,
                                signature: flag.signature,
                                desc: flag.desc,
                                address: flag.address,
                                imageID: flag.image_id,
                                postalcode: flag.postcode,
                                isSecrecy: flag.is_security,
                                title: flag.title,
                                deptID: flag.dept_id,
                                deptNameEn: flag.dept_name_cn,
                                deptNameCn: flag.dept_name_en,
                                imageSyncTime: flag.image_sync_time,
                                oldAccount: flag.old_account,
                                state: flag.state,
                                modifyTime: flag.modify_time,
                                contactID: contactListResult_1[i].id,
                                extensions: "",
                            };
                            objUserList.push(userInfo);
                        }
                        else {
                            var objContact = {
                                id: contactListResult_1[i].id,
                                staffID: contactListResult_1[i].staff_id,
                                name: contactListResult_1[i].name,
                                nickName: contactListResult_1[i].nick_name,
                                foreignName: contactListResult_1[i].foreign_name,
                                birthday: contactListResult_1[i].birthday,
                                gender: contactListResult_1[i].gender,
                                corpName: contactListResult_1[i].crop_name,
                                deptName: contactListResult_1[i].dept_name,
                                title: contactListResult_1[i].title,
                                mobile: contactListResult_1[i].mobile,
                                officePhone: contactListResult_1[i].office_phone,
                                homePhone: contactListResult_1[i].other_mobiles,
                                otherPhone: contactListResult_1[i].other_phone,
                                fax: contactListResult_1[i].fax,
                                email: contactListResult_1[i].email,
                                webSite: contactListResult_1[i].website,
                                imNO: contactListResult_1[i].im_no,
                                address: contactListResult_1[i].address,
                                desc: contactListResult_1[i].desc,
                                postalcode: contactListResult_1[i].postcode,
                                state: contactListResult_1[i].state,
                                extensions: "",
                            };
                            objContactList.push(objContact);
                        }
                    };
                    for (var i = 0; (contactListResult_1 != null) && i < contactListResult_1.length; i++) {
                        _loop_1(i);
                    }
                    for (var i = 0; (userGroupList != null) && i < userGroupList.length; i++) {
                        var flagUser = void 0;
                        var flagContact = void 0;
                        var userList = new Array();
                        var contactList = new Array();
                        var _loop_2 = function (j) {
                            if (userGroupList[i].id == userGroupMemberListResult_1[j].group_id) {
                                flagUser = objUserList.find(function (value) {
                                    return value.contactID === userGroupMemberListResult_1[j].contact_id;
                                });
                                if (flagUser != undefined) {
                                    userList.push(flagUser);
                                }
                                flagContact = objContactList.find(function (value) {
                                    return value.id === userGroupMemberListResult_1[j].contact_id;
                                });
                                if (flagContact != undefined) {
                                    contactList.push(flagContact);
                                }
                            }
                        };
                        for (var j = 0; (userGroupMemberListResult_1 != null) && j < userGroupMemberListResult_1.length; j++) {
                            _loop_2(j);
                        }
                        userGroupMember = {
                            groupID: userGroupList[i].id,
                            name: userGroupList[i].name,
                            userList: userList,
                            contactList: contactList,
                            extensions: "",
                        };
                        userGroupMemberList.push(userGroupMember);
                    }
                    constantInfoResult = {
                        imGroupList: imGroupList,
                        userGroupList: userGroupList,
                        userGroupMemberList: userGroupMemberList,
                        extensions: "",
                    };
                    evt = {
                        result: true,
                        info: constantInfoResult,
                    };
                    callback(evt);
                }
            });
        };
        Contact.prototype.getUserInfo = function (account, callback) {
            if (util.isUndefined(account) || util.isNull(account)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "account");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(callback) || !util.isFunction(callback)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "callback");
                client_1.default.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_IM_GET_USER_INFO, account, function (data) {
                if (data.result == 0) {
                    var retUserInfo = data.param;
                    var userInfo = {
                        staffID: retUserInfo.staff_id,
                        account: retUserInfo.account,
                        staffNO: retUserInfo.staff_no,
                        name: retUserInfo.name,
                        nativeName: retUserInfo.native_name,
                        qPinYin: retUserInfo.q_pin_yin,
                        gender: retUserInfo.gender,
                        birthday: retUserInfo.birthday,
                        age: retUserInfo.age,
                        bindNO: retUserInfo.bind_no,
                        mobile: retUserInfo.mobile,
                        homePhone: retUserInfo.home_phone,
                        officePhone: retUserInfo.office_phone,
                        shortPhone: retUserInfo.short_phone,
                        otherPhone: retUserInfo.other_phone,
                        voip: retUserInfo.voip,
                        ipPhone: retUserInfo.ip_phone,
                        fax: retUserInfo.fax,
                        email: retUserInfo.email,
                        webSite: retUserInfo.website,
                        signature: retUserInfo.signature,
                        desc: retUserInfo.desc,
                        address: retUserInfo.address,
                        imageID: retUserInfo.image_id,
                        postalcode: retUserInfo.postcode,
                        isSecrecy: retUserInfo.is_security,
                        title: retUserInfo.title,
                        deptID: retUserInfo.dept_id,
                        deptNameEn: retUserInfo.dept_name_en,
                        deptNameCn: retUserInfo.dept_name_cn,
                        imageSyncTime: retUserInfo.image_sync_time,
                        oldAccount: retUserInfo.old_account,
                        state: retUserInfo.state,
                        modifyTime: retUserInfo.modify_time,
                        contactID: 0,
                        extensions: "",
                    };
                    callback({ result: true, info: userInfo });
                }
            });
        };
        Contact.prototype.setUserInfo = function (userInfo, callback) {
            var evt = { result: true, info: "Set user information successfully！" };
            if (util.isUndefined(userInfo) || util.isNull(userInfo)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "userInfo");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(callback) || !util.isFunction(callback)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "callback");
                client_1.default.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_IM_SET_USER_INFO, userInfo, function (data) {
                if (data.result == 0) {
                    callback(evt);
                }
            });
        };
        Contact.prototype.addFriend = function (account, groupID, displayName, callback) {
            var evt = { result: true, info: "add friend is successful" };
            if (util.isUndefined(account) || util.isNull(account)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "account");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(groupID) || util.isNull(groupID) || !util.isInteger(groupID)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "groupID");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(callback) || !util.isFunction(callback)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "callback");
                client_1.default.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_IM_ADD_FRIEND, account, groupID, displayName, function (data) {
                if (data.result == 0) {
                    callback(evt);
                }
                else {
                    evt = {
                        result: false,
                        info: "add friend failed!"
                    };
                    callback(evt);
                }
            });
        };
        Contact.prototype.addContactGroup = function (index, groupName, callback) {
            var evt = { result: true, info: "add contact group is successful" };
            if (util.isUndefined(groupName) || util.isNull(groupName)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "groupName");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(index) || util.isNull(index) || !util.isInteger(index)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "index");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(callback) || !util.isFunction(callback)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "callback");
                client_1.default.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_IM_ADD_CONTACT_GROUP, index, groupName, function (data) {
                if (data.result == 0) {
                    callback(evt);
                }
                else {
                    evt = {
                        result: false,
                        info: "add contact group failed!"
                    };
                    callback(evt);
                }
            });
        };
        Contact.prototype.modContactGroup = function (groupID, index, groupName, callback) {
            var evt = { result: true, info: "modify contact group is successful" };
            if (util.isUndefined(groupName) || util.isNull(groupName)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "groupName");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(groupID) || util.isNull(groupID) || !util.isInteger(groupID)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "groupID");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(index) || util.isNull(index) || !util.isInteger(index)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "index");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(callback) || !util.isFunction(callback)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "callback");
                client_1.default.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_IM_MOD_CONTACT_GROUP, groupID, index, groupName, function (data) {
                if (data.result == 0) {
                    callback(evt);
                }
                else {
                    evt = {
                        result: false,
                        info: "modify contact group failed!"
                    };
                    callback(evt);
                }
            });
        };
        Contact.prototype.delContactGroup = function (groupID, callback) {
            var evt = { result: true, info: "delete contact group is successful" };
            if (util.isUndefined(groupID) || util.isNull(groupID) || !util.isInteger(groupID)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "groupID");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(callback) || !util.isFunction(callback)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "callback");
                client_1.default.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_IM_DEL_CONTACT_GROUP, groupID, function (data) {
                if (data.result == 0) {
                    callback(evt);
                }
                else {
                    evt = {
                        result: false,
                        info: "delete contact group failed!"
                    };
                    callback(evt);
                }
            });
        };
        Contact.prototype.updateGroupListOrder = function (groupIDs, callback) {
            var evt = { result: true, info: "update group list order is successful" };
            if (util.isUndefined(groupIDs) || util.isNull(groupIDs)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "groupIDs");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(callback) || !util.isFunction(callback)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "callback");
                client_1.default.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_IM_UPDATE_GROUP_LIST_ORDER, groupIDs, function (data) {
                if (data.result == 0) {
                    callback(evt);
                }
                else {
                    evt = {
                        result: false,
                        info: "update group list order failed!"
                    };
                    callback(evt);
                }
            });
        };
        Contact.prototype.addContact = function (contactInfo, groupID, callback) {
            var evt = { result: true, info: "add contact is successful" };
            if (util.isUndefined(contactInfo) || util.isNull(contactInfo)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "contactInfo");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(contactInfo.name) || util.isNull(contactInfo.name)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "contactInfo.name");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(contactInfo.mobile) || util.isNull(contactInfo.mobile)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "contactInfo.mobile");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(groupID) || util.isNull(groupID) || !util.isInteger(groupID)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "groupID");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(callback) || !util.isFunction(callback)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "callback");
                client_1.default.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_IM_ADD_CONTACT, contactInfo, groupID, function (data) {
                if (data.result == 0) {
                    callback(evt);
                }
                else {
                    evt = {
                        result: false,
                        info: "add contact failed!"
                    };
                    callback(evt);
                }
            });
        };
        Contact.prototype.modContact = function (contactInfo, callback) {
            var evt = { result: true, info: "modify contact is successful" };
            if (util.isUndefined(contactInfo) || util.isNull(contactInfo)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "contactInfo");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(contactInfo.name) || util.isNull(contactInfo.name)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "contactInfo.name");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(contactInfo.mobile) || util.isNull(contactInfo.mobile)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "contactInfo.mobile");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(contactInfo.gender) || !util.isNumber(contactInfo.gender)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "contactInfo.gender");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(contactInfo.id) || !util.isNumber(contactInfo.id)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "contactInfo.id");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(contactInfo.state) || !util.isNumber(contactInfo.state)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "contactInfo.state");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(callback) || !util.isFunction(callback)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "callback");
                client_1.default.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_IM_MOD_CONTACT, contactInfo, function (data) {
                if (data.result == 0) {
                    callback(evt);
                }
                else {
                    evt = {
                        result: false,
                        info: "modify contact failed!"
                    };
                    callback(evt);
                }
            });
        };
        Contact.prototype.delContact = function (contactID, groupID, callback) {
            var evt = { result: true, info: "delete contact is successful" };
            if (util.isUndefined(contactID) || util.isNull(contactID) || !util.isInteger(contactID)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "contactID");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(groupID) || util.isNull(groupID) || !util.isInteger(groupID)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "groupID");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(callback) || !util.isFunction(callback)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "callback");
                client_1.default.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_IM_DEL_CONTACT, contactID, groupID, function (data) {
                if (data.result == 0) {
                    callback(evt);
                }
                else {
                    evt = {
                        result: false,
                        info: "delete contact failed!"
                    };
                    callback(evt);
                }
            });
        };
        Contact.prototype.moveContact = function (contactID, oldGroupID, newGroupID, type, callback) {
            var evt = { result: true, info: "move contact is successful" };
            if (util.isUndefined(contactID) || util.isNull(contactID) || !util.isInteger(contactID)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "contactID");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(oldGroupID) || util.isNull(oldGroupID) || !util.isInteger(oldGroupID)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "oldGroupID");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(newGroupID) || util.isNull(newGroupID) || !util.isInteger(newGroupID)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "contactID");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(type) || util.isNull(type) || !util.isBinaryNumber(type)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "type");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(callback) || !util.isFunction(callback)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "callback");
                client_1.default.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_IM_MOVE_CONTACT, contactID, oldGroupID, newGroupID, type, function (data) {
                if (data.result == 0) {
                    callback(evt);
                }
                else {
                    evt = {
                        result: false,
                        info: "move contact failed!"
                    };
                    callback(evt);
                }
            });
        };
        return Contact;
    }());
    exports.default = Contact;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 380 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(12), __webpack_require__(13), __webpack_require__(24), __webpack_require__(23), __webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, dispatcher_1, eventInfo_1, errorCode_1, client_1, util) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Group = (function () {
        function Group() {
        }
        Group.prototype.addGroup = function (groupInfo, callback) {
            var evt = { result: true, info: "add group is successful" };
            if (util.isUndefined(groupInfo) || util.isNull(groupInfo)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "groupInfo");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(groupInfo.name) || util.isNull(groupInfo.name)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "name");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(groupInfo.groupType) || !util.isBinaryNumber(groupInfo.groupType)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "groupType");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(callback) || !util.isFunction(callback)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "callback");
                client_1.default.notifyErr(err);
                return;
            }
            if (groupInfo.groupType == 0) {
                dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_IM_ADD_FIXED_GROUP, groupInfo, function (data) {
                    if (data.result == 0) {
                        callback(evt);
                    }
                    else {
                        evt = {
                            result: false,
                            info: "add fixed group failed."
                        };
                        callback(evt);
                    }
                });
            }
            else {
                dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_IM_ADD_DISCUSSION_GROUP, groupInfo, function (data) {
                    if (data.result == 0) {
                        callback(evt);
                    }
                    else {
                        evt = {
                            result: false,
                            info: "add discussion group failed."
                        };
                        callback(evt);
                    }
                });
            }
        };
        Group.prototype.modGroup = function (groupInfo, callback) {
            var evt = { result: true, info: "modify group is successful" };
            if (util.isUndefined(groupInfo) || util.isNull(groupInfo)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "groupInfo");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(groupInfo.id) || util.isNull(groupInfo.id)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "id");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(groupInfo.name) || util.isNull(groupInfo.name)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "name");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(groupInfo.owner) || util.isNull(groupInfo.owner)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "owner");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(groupInfo.groupType) || !util.isBinaryNumber(groupInfo.groupType)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "groupType");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(callback) || !util.isFunction(callback)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "callback");
                client_1.default.notifyErr(err);
                return;
            }
            if (groupInfo.groupType == 0) {
                dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_IM_MOD_FIXED_GROUP, groupInfo, function (data) {
                    if (data.result == 0) {
                        callback(evt);
                    }
                    else {
                        evt = {
                            result: false,
                            info: "mod fixed group failed."
                        };
                        callback(evt);
                    }
                });
            }
            else {
                dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_IM_MOD_DISCUSSION_GROUP, groupInfo, function (data) {
                    if (data.result == 0) {
                        callback(evt);
                    }
                    else {
                        evt = {
                            result: false,
                            info: "mod discussion group failed."
                        };
                        callback(evt);
                    }
                });
            }
        };
        Group.prototype.delGroup = function (groupId, callback) {
            var evt = { result: true, info: "delete group is successful" };
            if (util.isUndefined(groupId) || util.isNull(groupId)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "groupId");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(callback) || !util.isFunction(callback)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "callback");
                client_1.default.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_IM_GET_GROUP_DETAIL, groupId, function (data) {
                if (data.result == 0) {
                    if (data.param.group_type == 0) {
                        dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_IM_DEL_FIXED_GROUP, groupId, function (data) {
                            if (data.result == 0) {
                                callback(evt);
                            }
                            else {
                                evt = {
                                    result: false,
                                    info: "del fixed group failed."
                                };
                                callback(evt);
                            }
                        });
                    }
                    else {
                        dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_IM_DEL_DISCUSSION_GROUP, groupId, function (data) {
                            if (data.result == 0) {
                                callback(evt);
                            }
                            else {
                                evt = {
                                    result: false,
                                    info: "del discussion group failed."
                                };
                                callback(evt);
                            }
                        });
                    }
                }
                else {
                    var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "groupId");
                    client_1.default.notifyErr(err);
                    return;
                }
            });
        };
        Group.prototype.searchGroup = function (searchGroupParam, callback) {
            var evt = { result: true, info: "search the group list successfully" };
            if (util.isUndefined(searchGroupParam) || util.isNull(searchGroupParam)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "searchGroupParam");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(searchGroupParam.isNeedAmount) || !util.isBoolean(searchGroupParam.isNeedAmount)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "isNeedAmount");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(searchGroupParam.count) || !util.isInteger(searchGroupParam.count)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "count");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(searchGroupParam.queryType) || !util.isIntegerRange(searchGroupParam.queryType, 0, 2)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "queryType");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(searchGroupParam.condition)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "condition");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(callback) || !util.isFunction(callback)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "callback");
                client_1.default.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_IM_SEARCH_GROUP, searchGroupParam, function (data) {
                if (data.result == 0) {
                    var retGroupList = data.param.group_list;
                    var groupList = new Array();
                    if (retGroupList != null) {
                        for (var i = 0; i < retGroupList.length; i++) {
                            var group = retGroupList[i];
                            var groupInfo = {
                                id: group.id,
                                name: group.name,
                                capacity: group.capacity,
                                manifesto: group.manifesto,
                                desc: group.desc,
                                owner: group.owner,
                                jointFlag: group.auto_join_flag,
                                msgPolicyType: group.msg_policy_type,
                                groupType: group.group_type,
                                fixDiscuss: group.fix_discuss,
                                state: group.state,
                                isInitGroupName: group.is_init_group_name,
                                singleFileSpace: group.single_file_space,
                                extensions: ""
                            };
                            groupList.push(groupInfo);
                        }
                    }
                    evt.info = { "count": data.param.count, "offset": data.param.offset,
                        "amount": data.param.record_amount, "groupList": groupList };
                    callback(evt);
                }
                else {
                    callback(data);
                }
            });
        };
        Group.prototype.getGroupDetail = function (groupId, callback) {
            if (util.isUndefined(groupId) || util.isNull(groupId)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "groupId");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(callback) || !util.isFunction(callback)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "callback");
                client_1.default.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_IM_GET_GROUP_DETAIL, groupId, function (data) {
                if (data.result == 0) {
                    var retGroupInfo = data.param;
                    var groupInfo = {
                        id: retGroupInfo.id,
                        name: retGroupInfo.name,
                        capacity: retGroupInfo.capacity,
                        manifesto: retGroupInfo.manifesto,
                        desc: retGroupInfo.desc,
                        owner: retGroupInfo.owner,
                        jointFlag: retGroupInfo.auto_join_flag,
                        msgPolicyType: retGroupInfo.msg_policy_type,
                        groupType: retGroupInfo.group_type,
                        fixDiscuss: retGroupInfo.fix_discuss,
                        state: retGroupInfo.state,
                        isInitGroupName: retGroupInfo.is_init_group_name,
                        singleFileSpace: retGroupInfo.single_file_space,
                        extensions: ""
                    };
                    callback({ result: true, info: groupInfo });
                }
                else {
                    callback(data);
                }
            });
        };
        Group.prototype.joinGroup = function (joinGroupParam, callback) {
            var evt = { result: true, info: "join group is successful" };
            if (util.isUndefined(joinGroupParam) || util.isNull(joinGroupParam)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "groupId");
                client_1.default.notifyErr(err);
                return;
            }
            var groupId = joinGroupParam.groupId;
            if (util.isUndefined(groupId) || util.isNull(groupId)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "groupId");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(callback) || !util.isFunction(callback)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "callback");
                client_1.default.notifyErr(err);
                return;
            }
            var flag = joinGroupParam.flag;
            if (util.isUndefined(flag) || !util.isBinaryNumber(flag)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "flag");
                client_1.default.notifyErr(err);
                return;
            }
            var account = joinGroupParam.account;
            if (flag === 0 && (util.isUndefined(account) || util.isNull(account))) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "account");
                client_1.default.notifyErr(err);
                return;
            }
            var displayName = joinGroupParam.displayName;
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_IM_GET_GROUP_DETAIL, groupId, function (data) {
                if (data.result == 0) {
                    var groupName = data.param.name;
                    if (flag == 1) {
                        dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_IM_JOIN_FIXED_GROUP, groupId, groupName, displayName, function (data) {
                            if (data.result == 0) {
                            }
                            else {
                                evt = {
                                    result: false,
                                    info: "join fixed group failed."
                                };
                                callback(evt);
                            }
                        });
                    }
                    else {
                        if (data.param.group_type == 0) {
                            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_IM_ADD_FIXED_GROUP_MEMBER, groupId, account, groupName, displayName, function (data) {
                                if (data.result == 0) {
                                }
                                else {
                                    evt = {
                                        result: false,
                                        info: "add fixed group member failed."
                                    };
                                    callback(evt);
                                }
                            });
                        }
                        else {
                            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_IM_ADD_DISCUSSION_GROUP_MEMBER, groupId, account, groupName, displayName, function (data) {
                                if (data.result == 0) {
                                }
                                else {
                                    evt = {
                                        result: false,
                                        info: "add discussion group member failed."
                                    };
                                    callback(evt);
                                }
                            });
                        }
                    }
                }
                else {
                    var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "groupId");
                    client_1.default.notifyErr(err);
                    return;
                }
            });
        };
        Group.prototype.leaveGroup = function (groupId, account, flag, callback) {
            var evt = { result: true, info: "leave group is successful" };
            if (util.isUndefined(groupId) || util.isNull(groupId)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "groupId");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(flag) || !util.isBinaryNumber(flag)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "flag");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(callback) || !util.isFunction(callback)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "callback");
                client_1.default.notifyErr(err);
                return;
            }
            if (flag === 1 && (util.isUndefined(account) || util.isNull(account))) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "account");
                client_1.default.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_IM_GET_GROUP_DETAIL, groupId, function (data) {
                if (data.result == 0) {
                    var groupType = data.param.group_type;
                    if (flag == 0) {
                        if (groupType == 0) {
                            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_IM_LEAVE_FIXED_GROUP, groupId, function (data) {
                                if (data.result == 0) {
                                }
                                else {
                                    evt = {
                                        result: false,
                                        info: "leave fixed group failed."
                                    };
                                    callback(evt);
                                }
                            });
                        }
                        else {
                            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_IM_LEAVE_DISCUSSION_GROUP, groupId, function (data) {
                                if (data.result == 0) {
                                }
                                else {
                                    evt = {
                                        result: false,
                                        info: "leave discussion group failed."
                                    };
                                    callback(evt);
                                }
                            });
                        }
                    }
                    else {
                        if (groupType == 0) {
                            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_IM_DEL_FIXED_GROUP_MEMBER, groupId, account, function (data) {
                                if (data.result == 0) {
                                }
                                else {
                                    evt = {
                                        result: false,
                                        info: "del fixed group member failed."
                                    };
                                    callback(evt);
                                }
                            });
                        }
                        else {
                            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_IM_DEL_DISCUSSION_GROUP_MEMBER, groupId, account, function (data) {
                                if (data.result == 0) {
                                }
                                else {
                                    evt = {
                                        result: false,
                                        info: "del discussion group member failed."
                                    };
                                    callback(evt);
                                }
                            });
                        }
                    }
                }
                else {
                    var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "groupId");
                    client_1.default.notifyErr(err);
                    return;
                }
            });
        };
        Group.prototype.approvalGroup = function (approvalGroupParam, callback) {
            var evt = { result: true, info: "approval group is successful" };
            if (util.isUndefined(approvalGroupParam) || util.isNull(approvalGroupParam)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "approvalGroupParam");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(approvalGroupParam.groupId) || util.isNull(approvalGroupParam.groupId)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "groupId");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(approvalGroupParam.memberAccount) || util.isNull(approvalGroupParam.memberAccount)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "memberAccount");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(approvalGroupParam.flag) || !util.isBinaryNumber(approvalGroupParam.flag)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "flag");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(approvalGroupParam.agreeJoin) || !util.isBoolean(approvalGroupParam.agreeJoin)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "agreeJoin");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(callback) || !util.isFunction(callback)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "callback");
                client_1.default.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_IM_GET_GROUP_DETAIL, approvalGroupParam.groupId, function (data) {
                if (data.result == 0) {
                    var groupName = data.param.name;
                    if (approvalGroupParam.flag == 0) {
                        dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_IM_CONFIRM_FIXED_GROUP_INVITE, approvalGroupParam, groupName, function (data) {
                            if (data.result == 0) {
                            }
                            else {
                                evt = {
                                    result: false,
                                    info: "confirm fixed group invite failed."
                                };
                                callback(evt);
                            }
                        });
                    }
                    else {
                        dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_IM_CONFIRM_FIXED_GROUP_APPLY, approvalGroupParam, groupName, function (data) {
                            if (data.result == 0) {
                            }
                            else {
                                evt = {
                                    result: false,
                                    info: "confirm fixed group apply failed."
                                };
                                callback(evt);
                            }
                        });
                    }
                }
                else {
                    var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "groupId");
                    client_1.default.notifyErr(err);
                    return;
                }
            });
        };
        Group.prototype.getGroupMembers = function (groupId, isSyncAll, timestamp, callback) {
            var evt = { result: true, info: "Get the list of group members successfully" };
            var userList = new Array();
            if (util.isUndefined(groupId) || util.isNull(groupId)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "groupId");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(isSyncAll) || util.isNull(isSyncAll) || !util.isBoolean(isSyncAll)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "isSyncAll");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(timestamp) || util.isNull(timestamp)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "timestamp");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(callback) || !util.isFunction(callback)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "callback");
                client_1.default.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_IM_GET_GROUP_MEMBERS, groupId, isSyncAll ? 1 : 0, timestamp, function (data) {
                if (data.result == 0) {
                    var memberInfoList = data.param.member_info;
                    for (var index = 0; memberInfoList != null && index < memberInfoList.length; index++) {
                        var element = memberInfoList[index];
                        var userInfo = {
                            staffID: element.staff_id,
                            account: element.account,
                            staffNO: element.staff_no,
                            name: element.name,
                            nativeName: element.native_name,
                            qPinYin: element.q_pin_yin,
                            gender: element.gender,
                            birthday: element.birthday,
                            age: element.age,
                            bindNO: element.bind_no,
                            mobile: element.mobile,
                            homePhone: element.home_phone,
                            officePhone: element.office_phone,
                            shortPhone: element.short_phone,
                            otherPhone: element.other_phone,
                            voip: element.voip,
                            ipPhone: element.ip_phone,
                            fax: element.fax,
                            email: element.email,
                            webSite: element.website,
                            signature: element.signature,
                            desc: element.desc,
                            address: element.address,
                            imageID: element.image_id,
                            postalcode: element.postcode,
                            isSecrecy: element.is_security,
                            title: element.title,
                            deptID: element.dept_id,
                            deptNameEn: element.dept_name_cn,
                            deptNameCn: element.dept_name_en,
                            imageSyncTime: element.image_sync_time,
                            oldAccount: element.old_account,
                            state: element.state,
                            modifyTime: element.modify_time,
                            contactID: 0,
                            extensions: "",
                        };
                        userList.push(userInfo);
                    }
                    evt.info = { "groupMemberList": userList };
                    callback(evt);
                }
                else {
                    evt = {
                        result: false,
                        info: "Failed to get group member list!"
                    };
                    callback(evt);
                }
            });
        };
        Group.prototype.transferGroup = function (groupId, account, callback) {
            var evt = { result: true, info: "Transfer group administrator successfully" };
            if (util.isUndefined(groupId) || util.isNull(groupId)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "groupId");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(account) || util.isNull(account)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "account");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(callback) || !util.isFunction(callback)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "callback");
                client_1.default.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_IM_TRANSFER_GROUP, groupId, account, function (data) {
                if (data.result == 0) {
                }
                else {
                    evt = {
                        result: false,
                        info: "Transfer group administrator failed!"
                    };
                    callback(evt);
                }
            });
        };
        Group.prototype.setGroupMsgPromptPolicy = function (groupId, msgpolicyType, callback) {
            var evt = { result: true, info: "Set the group message prompt mode successfully!" };
            if (util.isUndefined(groupId) || util.isNull(groupId)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "groupId");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(msgpolicyType) || !util.isIntegerRange(msgpolicyType, 0, 1)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "msgpolicyType");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(callback) || !util.isFunction(callback)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "callback");
                client_1.default.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_IM_SET_GROUP_MSG_PROMPT_POLICY, groupId, msgpolicyType, function (data) {
                if (data.result == 0) {
                    callback(evt);
                }
                else {
                    evt = {
                        result: false,
                        info: "Failed to set group message prompt mode!"
                    };
                    callback(evt);
                }
            });
        };
        Group.prototype.setDisgroupPolicy = function (groupId, opType, callback) {
            var evt = { result: true, info: "Group saved to list successfully succeeded" };
            if (util.isUndefined(groupId) || util.isNull(groupId)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "groupId");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(opType) || !util.isIntegerRange(opType, 0, 1)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "opType");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(callback) || !util.isFunction(callback)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "callback");
                client_1.default.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_IM_SET_DISGROUP_POLICY, groupId, opType, function (data) {
                if (data.result == 0) {
                    callback(evt);
                }
                else {
                    evt = {
                        result: false,
                        info: "Group save to list failed!"
                    };
                    callback(evt);
                }
            });
        };
        return Group;
    }());
    exports.default = Group;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 381 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(12), __webpack_require__(13), __webpack_require__(24), __webpack_require__(23), __webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, dispatcher_1, eventInfo_1, errorCode_1, client_1, util) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Presence = (function () {
        function Presence() {
        }
        Presence.prototype.publishStatus = function (status, callback) {
            var evt = { result: true, info: "set personal status successfully!" };
            if (util.isUndefined(status) || util.isNull(status) || !util.isInteger(status)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "status");
                client_1.default.notifyErr(err);
                return;
            }
            if (status < -1 || status == 0 || status == 2 || status > 5) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "status");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(callback) || !util.isFunction(callback)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "callback");
                client_1.default.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_IM_PUBLISH_STATUS, status, function (data) {
                if (data.result == 0) {
                    callback(evt);
                }
                else {
                    evt = {
                        result: false,
                        info: "setting personal status failed!"
                    };
                    callback(evt);
                }
            });
        };
        Presence.prototype.detectUserStatus = function (accountList, callback) {
            var evt = { result: true, info: "Detecting user status successfully!" };
            if (util.isUndefined(accountList) || !util.isArray(accountList)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "accountList");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(callback) || !util.isFunction(callback)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "callback");
                client_1.default.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_IM_DETECT_USER_STATUS, accountList, function (data) {
                if (data.result == 0) {
                }
                else {
                    evt = {
                        result: false,
                        info: "Failed to detect user status!"
                    };
                    callback(evt);
                }
            });
        };
        return Presence;
    }());
    exports.default = Presence;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 382 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(12), __webpack_require__(13), __webpack_require__(24), __webpack_require__(23), __webpack_require__(1), __webpack_require__(11)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, dispatcher_1, eventInfo_1, errorCode_1, client_1, util, enum_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Message = (function () {
        function Message() {
        }
        Message.prototype.sendIMMessage = function (messageSendParam, callback) {
            var evt = { result: true, info: "Sending a message successfully!" };
            if (util.isUndefined(messageSendParam) || util.isNull(messageSendParam)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "messageSendParam");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(messageSendParam.content) || util.isNull(messageSendParam.content)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "messageSendParam.content");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(messageSendParam.chatType) || util.isNull(messageSendParam.chatType) || !util.isNumber(messageSendParam.chatType)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "messageSendParam.chatType");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(messageSendParam.mediaType) || util.isNull(messageSendParam.mediaType) || !util.isNumber(messageSendParam.mediaType)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "messageSendParam.mediaType");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(messageSendParam.receiver) || util.isNull(messageSendParam.receiver)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "messageSendParam.receiver");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(callback) || !util.isFunction(callback)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "callback");
                client_1.default.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_IM_SEND_MESSAGE, messageSendParam, function (data) {
                if (data.result == 0) {
                }
                else {
                    evt = {
                        result: false,
                        info: "Sending message failed!"
                    };
                    callback(evt);
                }
            });
        };
        Message.prototype.notifyImInputting = function (account, type) {
            var evt = { result: true, info: "Set personal input status to success!" };
            if (util.isUndefined(account) || util.isNull(account)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "account");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(type) || util.isNull(type) || !util.isBinaryNumber(type)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "type");
                client_1.default.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_IM_NOTIFY_INPUTTING, account, type);
        };
        Message.prototype.withDrawMessage = function (messageWithDrawParam, callback) {
            var evt = { result: true, info: "Withdraw message successfully!" };
            if (util.isUndefined(messageWithDrawParam) || util.isNull(messageWithDrawParam)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "messageWithDrawParam");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(messageWithDrawParam.receiver) || util.isNull(messageWithDrawParam.receiver)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "messageWithDrawParam.receiver");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(messageWithDrawParam.isGroupMsg) || util.isNull(messageWithDrawParam.isGroupMsg) || !util.isNumber(messageWithDrawParam.isGroupMsg)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "messageWithDrawParam.isGroupMsg");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(messageWithDrawParam.msgId) || util.isNull(messageWithDrawParam.msgId)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "messageWithDrawParam.msgId");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(callback) || !util.isFunction(callback)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "callback");
                client_1.default.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_IM_WITH_DRAW_MESSAGE, messageWithDrawParam, function (data) {
                if (data.result == 0) {
                }
                else {
                    evt = {
                        result: false,
                        info: "Withdraw message failure!"
                    };
                    callback(evt);
                }
            });
        };
        Message.prototype.setReadMessage = function (messageReadList, callback) {
            var evt = { result: true, info: "Set the message to be read successfully!" };
            if (util.isUndefined(messageReadList) || util.isNull(messageReadList) || !util.isArray(messageReadList)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "messageReadList");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(callback) || !util.isFunction(callback)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "callback");
                client_1.default.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_IM_SET_READ_MESSAGE, messageReadList, function (data) {
                if (data.result == 0) {
                    callback(evt);
                }
                else {
                    evt = {
                        result: false,
                        info: "Set message failed to read!"
                    };
                    callback(evt);
                }
            });
        };
        Message.prototype.getRecentConversation = function (timestamp, count, callback) {
            var evt = { result: true, info: "get the recent conversation successfully!" };
            if (util.isUndefined(timestamp) || util.isNull(timestamp) || !util.isNumber(timestamp)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "timestamp");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(count) || util.isNull(count) || !util.isNumber(count)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "count");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(callback) || !util.isFunction(callback)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "callback");
                client_1.default.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_IM_GET_RECENT_CONVERSATION, timestamp, count, function (data) {
                if (data.result == 0) {
                    evt.info = data.param;
                    callback(evt);
                }
                else {
                    evt = {
                        result: false,
                        info: "get the recent conversation failed!"
                    };
                    callback(evt);
                }
            });
        };
        Message.prototype.delRecentConversation = function (isDelAll, conversationId, type, callback) {
            var evt = { result: true, info: "delete the recent conversation successfully!" };
            if (util.isUndefined(isDelAll) || util.isNull(isDelAll) || !util.isBoolean(isDelAll)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "isDelAll");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(conversationId) || util.isNull(conversationId)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "conversationId");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(type) || util.isNull(type) || !util.isNumber(type)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "type");
                client_1.default.notifyErr(err);
                return;
            }
            if (!(type == 0 || type == 2 || type == 3 || type == 6)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "type");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(callback) || !util.isFunction(callback)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "callback");
                client_1.default.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_IM_DEL_RECENT_CONVERSATION, isDelAll, conversationId, type, function (data) {
                if (data.result == 0) {
                    callback(evt);
                }
                else {
                    evt = {
                        result: false,
                        info: "delete the recent conversation failed!"
                    };
                    callback(evt);
                }
            });
        };
        Message.prototype.deleteMessage = function (deleteMessageParam, callback) {
            var evt = { result: true, info: "delete message successfully!" };
            if (util.isUndefined(deleteMessageParam) || util.isNull(deleteMessageParam)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "deleteMessageParam");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(deleteMessageParam.msgIdList) || util.isNull(deleteMessageParam.msgIdList) || !util.isArray(deleteMessageParam.msgIdList)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "msgIdList");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(deleteMessageParam.isGroupMsg) || util.isNull(deleteMessageParam.isGroupMsg) || !util.isIntegerRange(deleteMessageParam.isGroupMsg, 1, 2)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "isGroupMsg");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(deleteMessageParam.optType) || util.isNull(deleteMessageParam.optType) || !util.isBinaryNumber(deleteMessageParam.optType)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "optType");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(callback) || !util.isFunction(callback)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "callback");
                client_1.default.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_IM_DEL_MESSAGE, deleteMessageParam, function (data) {
                if (data.result == 0) {
                    callback(evt);
                }
                else {
                    evt = {
                        result: false,
                        info: "delete message failure!"
                    };
                    callback(evt);
                }
            });
        };
        Message.prototype.queryHistoryMessage = function (queryHistoryMessageParam, callback) {
            var evt = { result: true, info: "query message to be read successfully!" };
            if (util.isUndefined(queryHistoryMessageParam) || util.isNull(queryHistoryMessageParam)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "queryHistoryMessageParam");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(queryHistoryMessageParam.operationType) || util.isNull(queryHistoryMessageParam.operationType) || !util.isBinaryNumber(queryHistoryMessageParam.operationType)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "queryHistoryMessageParam.operationType");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(queryHistoryMessageParam.msgType) || util.isNull(queryHistoryMessageParam.msgType) || !util.isIntegerRange(queryHistoryMessageParam.msgType, 0, 3) || queryHistoryMessageParam.msgType == 2) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "queryHistoryMessageParam.msgType");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(queryHistoryMessageParam.count) || util.isNull(queryHistoryMessageParam.count) || !util.isNumber(queryHistoryMessageParam.count)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "queryHistoryMessageParam.count");
                client_1.default.notifyErr(err);
                return;
            }
            if (enum_1.IM_HISTORYMESSAGE_TYPE.BULLETIN != queryHistoryMessageParam.msgType && (util.isUndefined(queryHistoryMessageParam.sender) || util.isNull(queryHistoryMessageParam.sender))) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "queryHistoryMessageParam.sender");
                client_1.default.notifyErr(err);
                return;
            }
            if (util.isUndefined(callback) || !util.isFunction(callback)) {
                var err = errorCode_1.EC_SDK_ERROR.IM_PARAM_INVALID_ERROR(500000000, 590000001, "callback");
                client_1.default.notifyErr(err);
                return;
            }
            dispatcher_1.default.fire(eventInfo_1.SDK_EVENT_ID.SDK_IM_QUERY_HISTORY_MESSAGE, queryHistoryMessageParam, function (data) {
                if (data.result == 0) {
                    var queryHistoryInfo = data.param;
                    var chatListInfo = queryHistoryInfo.chat_info_list;
                    var queryHistoryResult = void 0;
                    var chatInfoArr = new Array();
                    for (var index = 0; chatListInfo != null && index < chatListInfo.length; index++) {
                        var element = chatListInfo[index];
                        var chatInfo = {
                            chatType: element.chat_type,
                            sourceFlag: element.source_flag,
                            contentType: element.content_type,
                            utcStamp: element.utc_stamp,
                            origin: element.origin,
                            target: element.target,
                            groupID: element.group_id,
                            content: element.content,
                            name: element.name,
                            regionID: element.region_id,
                            clientChatID: element.client_chat_id,
                            serverChatID: element.server_chat_id_str,
                            groupName: element.group_name,
                            mediaType: element.media_type,
                            deliverTime: element.deliver_time,
                            atUserInfoList: new Array(),
                        };
                        chatInfoArr.push(chatInfo);
                    }
                    queryHistoryResult = {
                        operationType: queryHistoryInfo.operation_type,
                        msgType: queryHistoryInfo.msg_type,
                        sender: queryHistoryInfo.sender,
                        totalCount: queryHistoryInfo.total_count,
                        chatList: chatInfoArr,
                    };
                    evt.info = queryHistoryResult;
                    callback(evt);
                }
                else {
                    evt = {
                        result: false,
                        info: "query history message failed to read!"
                    };
                    callback(evt);
                }
            });
        };
        return Message;
    }());
    exports.default = Message;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 383 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, util_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TUPDeamon = (function () {
        function TUPDeamon(opts) {
            var _this = this;
            this.notifyFuncs = [];
            this.rspFuncs = [];
            this.wsocket = {};
            this.msgProcessor = function (data) {
                if (data.notify > 0) {
                    var notifyIdx = data.notify & 0x7fff;
                    if (typeof _this.notifyFuncs[notifyIdx] == "function") {
                        _this.notifyFuncs[notifyIdx](data);
                    }
                }
                if (data.rsp > 0) {
                    var rspIdx = data.rsp & 0x7fff;
                    if (typeof _this.rspFuncs[rspIdx] == "function")
                        _this.rspFuncs[rspIdx](data);
                }
            };
            this.notifyFuncs = new Array();
            this.rspFuncs = new Array();
            var serviceAddr = opts.svrAddr || "127.0.0.1";
            var pcol = "ws://";
            if (opts.ssl === 1) {
                pcol = "wss://";
            }
            if (opts.socket) {
                this.uniSocket = opts.socket;
                this.uniSocket.registerService(this);
            }
            else {
                this.wsocket = new WebSocket(pcol + serviceAddr + ":7682", "protocol_ws_deamon_service");
                this.wsocket.onopen = opts.ready;
                this.wsocket.onclose = opts.close;
                this.wsocket.onmessage = function (msg) {
                    var data = JSON.parse(msg.data);
                    util_1.default.debug("TUPDeamon", msg.data);
                    _this.msgProcessor(data);
                };
            }
        }
        TUPDeamon.prototype.sendData = function (data) {
            var sendStr = JSON.stringify(data);
            this.wsocket.send(sendStr);
        };
        ;
        TUPDeamon.prototype.setSeviceCallBack = function (callbacks) {
            if (callbacks && typeof callbacks.serviceStartUp == "function") {
                this.notifyFuncs[1] = callbacks.serviceStartUp;
            }
            if (callbacks && typeof callbacks.serviceShutDown == "function") {
                this.notifyFuncs[2] = callbacks.serviceShutDown;
            }
            if (callbacks && typeof callbacks.serviceRecover == "function") {
                this.notifyFuncs[3] = callbacks.serviceRecover;
            }
        };
        ;
        return TUPDeamon;
    }());
    exports.default = TUPDeamon;
    ;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ })
/******/ ]);
//# sourceMappingURL=CloudEC-SDK.js.map