; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "CloudLinkMeetingDaemon"
#define MyAppVersion "19.1.19"
#define MyAppPublisher "Huawei Inc."
#define MyAppCopyright "Copyright (c) Huawei Technologies Co., Ltd. 2010-2019. All rights reserved."
#define MyAppExeName "CloudLinkMeetingDaemon.exe"
#define MyDateTimeString GetDateTimeString('yyyy/mm/dd_hh:nn:ss', '_', '_');
#define MyCurVersion 3
#define VcRunTimeExeName "vcredist_x86.exe"
#define StopCloudLinkMeetingDaemon "stopCloudLinkMeetingDaemon.bat"
#define CloudLinkMeetingDaemon "CloudLinkMeetingDaemon.bat"
#define ImportCer "importCer.bat"


[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{C6824518-0938-49A6-B051-2B0C89BF66221}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
VersionInfoCopyright={#MyAppCopyright}
VersionInfoVersion= {#MyAppVersion}
DefaultDirName={code:GetDefaultInstallRoot}\{#MyAppName}
DefaultGroupName={#MyAppName}
InfoBeforeFile=
InfoAfterFile=
OutputDir=D:\package\Release
OutputBaseFilename = CloudLinkMeetingDaemon_{#MyDateTimeString}_BASE
SetupIconFile=D:\package\package-tool\CloudLinkMeetingDaemon.ico
Compression=lzma
SolidCompression=yes
ShowLanguageDialog=yes
UninstallDisplayIcon={app}\{#MyAppExeName}
UninstallDisplayName={#MyAppName}
SetupLogging=yes
DisableDirPage=yes
 
[code] 
var OverwriteFlag: Boolean;
var vcRunTimeIsMissing: Boolean;
function GetDefaultInstallRoot(Param: String): String;
begin
    Result := ExpandConstant('{userappdata}')
	//if((GetWindowsVersion shr 16) > $0603) then
	//	Result := ExpandConstant('{userappdata}')
	//else
	//	Result := ExpandConstant('{pf}');
end;

function IsAppRunning(const FileName : string): Boolean;
var
    winHwnd: longint;
begin
    Result:=false;
    winHwnd := FindWindowByWindowName(FileName);
    if winHwnd <> 0 then
    begin
    Result:=true;
    end;
end;

function NeedInstallVCRunTime(): Boolean;  
begin  
  Result := vcRunTimeIsMissing;  
end;

procedure CloseApp(const FileName : string);
var
    ResultCode: Integer;
begin
   Exec(ExpandConstant('taskkill.exe'), '/f /im ' + '"' + FileName + '"', '', SW_HIDE,
     ewWaitUntilTerminated, ResultCode);    
end;

procedure ExecStopCloudLinkMeetingDaemon();
var
    ResultCode: Integer;
begin
   Exec(ExpandConstant('{app}\stopCloudLinkMeetingDaemon.bat') ,'','',SW_HIDE, ewWaitUntilTerminated, ResultCode);   
end;

function IsUpgrade(): Boolean;
var 
   sPrevPath: String;
begin
sPrevPath := '';
if not RegQueryStringValue(HKCU,'Software\Microsoft\Windows\CurrentVersion\Uninstall\CloudLinkMeetingDaemon','UnistallString',sPrevPath) then
  RegQueryStringValue(HKLM,'SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\CloudLinkMeetingDaemon','UnistallString',sPrevPath);
  Result := (sPrevPath <> '');
end;

function ShouldSkipPage(PageID: Integer): Boolean;
begin if IsUpgrade() then 
   begin
    if PageID = wpSelectProgramGroup then begin Result := True;
    end
    else if PageID = wpSelectTasks then begin Result := True;
    end
    else if PageID = wpWelcome then begin Result := True;
    end
    else if PageID = wpPreparing then begin Result := True;
    end 
    else if PageID = wpReady then begin Result := True;
    end 
    else if PageID = wpFinished then begin Result := True;
    end
  end;
end;

// Loading the corresponding configuration file according to the selected language 
function MyLangName(Param : String): String;        
begin               
  Result := ActiveLanguage();  
end;

function MoveLogfileToLogDir():boolean;
var
  logfilepathname, logfilename, newfilepathname: string;
begin
  logfilepathname := ExpandConstant('{log}');

  //If logfile is disabled then logfilepathname is empty
  if logfilepathname = '' then begin
     result := false;
     exit;
  end;

  logfilename := ExtractFileName(logfilepathname);
  try
       newfilepathname := ExpandConstant('{userappdata}\CloudLinkMeetingDaemon\log\setup\');
  except
    //This exception is raised if {app} is invalid i.e. if canceled is pressed on the Welcome page
        try
          newfilepathname := WizardDirValue + '\Log\Installer\'; 
        except
          //This exception is raised if WizardDirValue i s invalid i.e. if canceled is pressed on the Mutex check message dialog.
          result := false;
        end;
  end;  
  result := ForceDirectories(newfilepathname); //Make sure the destination path exists.
  newfilepathname := newfilepathname + logfilename; //Add filename

  //if copy successful then delete logfilepathname 
  result := filecopy(logfilepathname, newfilepathname, false);

  if result then
     result := DeleteFile(logfilepathname);
end;

//Called just before Setup terminates. Note that this function is called even if the user exits Setup before anything is installed.
procedure DeinitializeSetup();
begin
  MoveLogfileToLogDir();
end;

 
function InitializeSetup(): Boolean;
  var  InstalledVer: Cardinal;
begin
  OverwriteFlag := false;
  if RegQueryDWordValue(HKCU, 'Software\Microsoft\Windows\CurrentVersion\Uninstall\CloudLinkMeetingDaemon',
     'InstalledVersion', InstalledVer) then
  begin
    // Successfully read the value
	if InstalledVer > {#MyCurVersion} then
	   begin
         if MsgBox(ExpandConstant('{cm:appInstallSmall}'),mbConfirmation, MB_YESNO) = IDNO then
           begin
             Result := false;
             Exit;
           end
         else
	       begin
	         OverwriteFlag := true;
             Result := true;
	       end
       end
    else
      Result := true;
     end;
  if IsAppRunning( 'CloudLinkMeetingDaemon' ) then
  begin
    if MsgBox(ExpandConstant('{cm:appIsRunInstall}'),mbConfirmation, MB_YESNO) = IDYES then
      begin 
      CloseApp('CloudLinkMeetingDaemon.exe');
      OverwriteFlag := true;
      Result := true;
      end
    else 
      Result := false;
      Exit;
  end
  else if IsUpgrade() then
  begin
   CloseApp('CloudLinkMeetingDaemon.exe');
   if OverwriteFlag then
   begin
    Result := true;
   end
   else 
   begin
//  if MsgBox(ExpandConstant('{cm:appOverwrite}'),mbConfirmation, MB_YESNO) = IDNO then
//    begin
//     Result := false;
//     end
//    else
     Result := true;
   end
  end;
  //Detection of the VC runtime
  if RegValueExists(HKLM, 'SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{3D6AD258-61EA-35F5-812C-B7A02152996E}', 'Version')
  then  
    begin  
      vcRunTimeIsMissing := false;  
    end  
  else  
    begin  
      vcRunTimeIsMissing := true;  
    end; 
  Result := true;
end;
 
function InitializeUninstall(): Boolean;
begin
  if IsAppRunning( 'CloudLinkMeetingDaemon' ) then
  begin
  if MsgBox(ExpandConstant('{cm:appIsRunUninstall}'),mbConfirmation, MB_YESNO) = IDYES then
    begin 
    CloseApp('CloudLinkMeetingDaemon.exe');
    ExecStopCloudLinkMeetingDaemon();
    Result := true;
    end
    else Result := false;
  end
  else 
  begin
  CloseApp( 'CloudLinkMeetingDaemon.exe' );
  ExecStopCloudLinkMeetingDaemon();
  Result := true;
  end;
end;

//Delete all configuration files to achieve the goal of clean unloading. 
procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);

begin

if CurUninstallStep = usUninstall then
begin
if MsgBox(ExpandConstant('{cm:appDeleteConfig}'), mbConfirmation, MB_YESNO) = IDYES then
   begin
   //Delete local database, delete log and other user information. 
   DelTree(ExpandConstant('{localappdata}\CloudLinkMeetingDaemon'), True, True, True);
   DelTree(ExpandConstant('{userappdata}\CloudLinkMeetingDaemon'), True, True, True);
   end;
DelTree(ExpandConstant('{app}'), True, True, True);
end;
end;

[/code]

[InstallDelete]
;Name: {app}\CloudLinkMeetingDaemon; Type: filesandordirs
;Name: {app}\locales; Type: filesandordirs

[UninstallDelete]  
Type: filesandordirs; Name: "{app}" 

[Languages]
Name: "Chinese"; MessagesFile: "compiler:Languages\ChineseSimplified.isl"
Name: "English"; MessagesFile: "compiler:Languages\EnglishBritish.isl"
;Name: "Deutsch"; MessagesFile: "compiler:Languages\German.isl"
;Name: "Spanish"; MessagesFile: "compiler:Languages\Spanish.isl"

[CustomMessages]
;Spanish.appIsRunUninstall = El teléfono virtual está en funcionamiento. La aplicación se cerrará si la desinstalación continúa.
;Deutsch.appIsRunUninstall = CloudLinkMeetingDaemon wird ausgeführt. Die Anwendung wird geschlossen, wenn Sie die Deinstallation fortsetzen.
Chinese.appIsRunUninstall = CloudLinkMeetingDaemon 正在运行,继续卸载将关闭应用。
English.appIsRunUninstall = CloudLinkMeetingDaemon is running, continue to uninstall will close the application.
;Spanish.appDeleteConfig = ?Eliminar toda la información de usuario del teléfono virtual?
;Deutsch.appDeleteConfig = Alle CloudLinkMeetingDaemon-Benutzerinformationen l?schen?
English.appDeleteConfig = Are your shure delete user config info.
Chinese.appDeleteConfig = 是否要完全去除CloudLinkMeetingDaemon 用户信息。
;Spanish.appIsRunInstall = El teléfono virtual está en funcionamiento. La aplicación se cerrará si la instalación continúa.
;Deutsch.appIsRunInstall = CloudLinkMeetingDaemon wird ausgeführt. Die Anwendung wird geschlossen, wenn Sie die Installation fortsetzen.
English.appIsRunInstall = CloudLinkMeetingDaemon is running, continue installation will close the application.
Chinese.appIsRunInstall = CloudLinkMeetingDaemon 正在运行,继续安装将关闭应用。
;Spanish.appAutoStart = Iniciar automáticamente con sistema operativo.
;Deutsch.appAutoStart = Automatischer Start mit Betriebssystem.
English.appAutoStart = Start automatically with operating system.
Chinese.appAutoStart = 开机自动启动
;Spanish.appOverwrite = Whether to overwrite the installed CloudLinkMeetingDaemon
;Deutsch.appOverwrite = Whether to overwrite the installed CloudLinkMeetingDaemon
English.appOverwrite = Whether to overwrite the installed CloudLinkMeetingDaemon
Chinese.appOverwrite = 已经安装了CloudLinkMeetingDaemon，是否要覆盖安装？
;Spanish.appInstallSmall = Whether to use old version overwrite the installed CloudLinkMeetingDaemon
;Deutsch.appInstallSmall = Whether to use old version overwrite the installed CloudLinkMeetingDaemon
English.appInstallSmall = Whether to use old version overwrite the installed CloudLinkMeetingDaemon
Chinese.appInstallSmall = 是否使用旧版本覆盖安装软件？

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: checkablealone
Name: "startmenu"; Description: "{cm:appAutoStart}"; GroupDescription:"{cm:AdditionalIcons}";Flags:checkablealone;

[Registry]
Root:HKLM; Subkey:"SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\CloudLinkMeetingDaemon";Flags: uninsdeletekeyifempty
Root:HKLM; Subkey:"SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\CloudLinkMeetingDaemon"; ValueType: string; ValueName: "UnistallString"; ValueData: "{app}";Flags:uninsdeletekey
Root:HKCU; Subkey:"Software\Microsoft\Windows\CurrentVersion\Uninstall\CloudLinkMeetingDaemon";Flags: uninsdeletekeyifempty
Root:HKCU; Subkey:"Software\Microsoft\Windows\CurrentVersion\Uninstall\CloudLinkMeetingDaemon"; ValueType: string; ValueName: "UnistallString"; ValueData: "{app}";Flags:uninsdeletekey
Root:HKLM; Subkey:"SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\CloudLinkMeetingDaemon";Flags: uninsdeletekeyifempty
Root:HKLM; Subkey:"SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\CloudLinkMeetingDaemon"; ValueType: dword; ValueName: "InstalledVersion"; ValueData:  "{#MyCurVersion}";Flags:uninsdeletekey
Root:HKCU; Subkey:"Software\Microsoft\Windows\CurrentVersion\Uninstall\CloudLinkMeetingDaemon";Flags: uninsdeletekeyifempty
Root:HKCU; Subkey:"Software\Microsoft\Windows\CurrentVersion\Uninstall\CloudLinkMeetingDaemon"; ValueType: dword; ValueName: "InstalledVersion"; ValueData: "{#MyCurVersion}";Flags:uninsdeletekey
Root:HKCU; Subkey:"Software\Microsoft\Windows\Windows Error Reporting\ExcludedApplications";Flags: uninsdeletekeyifempty
Root:HKCU; Subkey:"Software\Microsoft\Windows\Windows Error Reporting\ExcludedApplications"; ValueType: dword; ValueName: "CloudLinkMeetingDaemon.exe"; ValueData: 1;Flags:uninsdeletekey
Root:HKCU; Subkey:"Software\Classes\CloudLinkMeetingDaemonLaunch\DefaultIcon"; ValueType: string;  ValueName: ""; ValueData: "CloudLinkMeetingDaemonLaunch.exe,1";Flags:uninsdeletekey
Root:HKCU; Subkey:"Software\Classes\CloudLinkMeetingDaemonLaunch\shell\open\command"; ValueType: string; ValueName: ""; ValueData: """{app}\CloudLinkMeetingDaemon.exe"" ""%1""";Flags:uninsdeletekey
Root:HKCR; SubKey:"CloudLinkMeetingDaemon"; ValueType: string; ValueData: "CloudLinkMeetingDaemon protocol";  Flags: CreateValueIfDoesntExist UninsDeleteKey;
Root:HKCR; SubKey:"CloudLinkMeetingDaemon"; ValueType: string; ValueName: "URL Protocol"; ValueData: "{app}\CloudLinkMeetingDaemon.exe"; Flags: CreateValueIfDoesntExist;
Root:HKCR; SubKey:"CloudLinkMeetingDaemon\DefaultIcon"; ValueType: string; ValueData: "{app}\CloudLinkMeetingDaemon.exe"; Flags: CreateValueIfDoesntExist;
Root:HKCR; SubKey:"CloudLinkMeetingDaemon\shell\open\command"; ValueType: string; ValueData: """{app}\CloudLinkMeetingDaemon.exe"" ""%1"""; Flags: CreateValueIfDoesntExist;

[Files]
Source: "D:\package\package-tool\sdk\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
; NOTE: Don't use "Flags: ignoreversion" on any shared system files
; VC Redistribute  
Source: "D:\package\package-tool\vcredist_x86.exe"; DestDir: "{app}"; Check: NeedInstallVCRunTime 
Source: "D:\package\package-tool\CloudLinkMeetingDaemon.bat"; DestDir: "{app}"; 
Source: "D:\package\package-tool\stopCloudLinkMeetingDaemon.bat"; DestDir: "{app}";
Source: "D:\package\package-tool\importCer.bat"; DestDir: "{app}";
Source: "D:\package\package-tool\cert.pfx"; DestDir: "{app}";
Source: "D:\package\package-tool\root_cert.pem"; DestDir: "{app}";
Source: "D:\package\package-tool\root_cert_huawei.pem"; DestDir: "{app}";
Source: "D:\package\package-tool\server.pem"; DestDir: "{app}";
Source: "D:\package\package-tool\server.key"; DestDir: "{app}";
;Source: "D:\package\package-tool\map_tree.xml"; DestDir: "{app}";
Source: "D:\package\package-tool\root.crt"; DestDir: "{app}";
Source: "D:\package\package-tool\CertMgr.exe"; DestDir: "{app}";

[Icons]
;Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
;Name: "{group}\Uninstall"; Filename: "{app}\unins000.exe"
Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon
;Boot mode: create shortcuts in the start menu startup directory. 
Name: "{userstartup}\{#CloudLinkMeetingDaemon}"; Filename: "{app}\{#CloudLinkMeetingDaemon}";  Tasks: startmenu

[Run]
Filename: "{app}\{#VcRunTimeExeName}"; Parameters: "/q /norestart"; WorkingDir: {app}; Flags: skipifdoesntexist; StatusMsg: "Install Microsoft Visual C++ 2012 Runtime ..."; Check: NeedInstallVCRunTime
Filename:"{app}\{#StopCloudLinkMeetingDaemon}"; Parameters: "/q /norestart";  WorkingDir: {app};  Flags: runhidden;
Filename:"{app}\{#CloudLinkMeetingDaemon}"; Parameters: "/q /norestart";  WorkingDir: {app};  Flags: runhidden;Filename:"{app}\{#ImportCer}"; Parameters: "/q /norestart";  WorkingDir: {app};  Flags: runhidden;
;Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

[INI]  
Filename: "{userappdata}\CloudLinkMeetingDaemon\log\language.ini"; Section: "set"; Key: "lan"; String: "{code:MyLangName|{app}}"; Flags: uninsdeletesection;
Filename: "{userappdata}\CloudLinkMeetingDaemon\log\version.ini"; Section: "BuildTime"; Key: "time"; String: "{#MyDateTimeString}"; Flags: uninsdeletesection;
Filename: "{userappdata}\CloudLinkMeetingDaemon\log\version.ini"; Section: "Version"; Key: "version"; String: "{#MyAppVersion}"; Flags: uninsdeletesection;
